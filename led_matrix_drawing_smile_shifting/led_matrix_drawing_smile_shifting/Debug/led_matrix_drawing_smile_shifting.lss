
led_matrix_drawing_smile_shifting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800108  00800108  000004e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c21  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093e  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071d  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ef d0       	rcall	.+478    	; 0x2a2 <main>
  c4:	c1 c1       	rjmp	.+898    	; 0x448 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LEDMatrix_init>:
#include <avr/io.h>
#include "LEDMatrix.h"

void LEDMatrix_init(void) {
	// 해당 column 핀을 출력으로 설정
	MATRIX_COL1_DDR |= (1 << MATRIX_COL1_PIN);
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL2_DDR |= (1 << MATRIX_COL2_PIN);
  ce:	84 b3       	in	r24, 0x14	; 20
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL3_DDR |= (1 << MATRIX_COL3_PIN);
  d4:	84 b3       	in	r24, 0x14	; 20
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL4_DDR |= (1 << MATRIX_COL4_PIN);
  da:	84 b3       	in	r24, 0x14	; 20
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL5_DDR |= (1 << MATRIX_COL5_PIN);
  e0:	84 b3       	in	r24, 0x14	; 20
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL6_DDR |= (1 << MATRIX_COL6_PIN);
  e6:	84 b3       	in	r24, 0x14	; 20
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL7_DDR |= (1 << MATRIX_COL7_PIN);	
  ec:	84 b3       	in	r24, 0x14	; 20
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL8_DDR |= (1 << MATRIX_COL8_PIN);
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	84 bb       	out	0x14, r24	; 20
	
	// 해당 row 핀을 출력으로 설정
	MATRIX_ROW1_DDR |= (1 << MATRIX_ROW1_PIN);
  f8:	8a b3       	in	r24, 0x1a	; 26
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW2_DDR |= (1 << MATRIX_ROW2_PIN);
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW3_DDR |= (1 << MATRIX_ROW3_PIN);
 104:	8a b3       	in	r24, 0x1a	; 26
 106:	84 60       	ori	r24, 0x04	; 4
 108:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW4_DDR |= (1 << MATRIX_ROW4_PIN);
 10a:	8a b3       	in	r24, 0x1a	; 26
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW5_DDR |= (1 << MATRIX_ROW5_PIN);
 110:	8a b3       	in	r24, 0x1a	; 26
 112:	80 61       	ori	r24, 0x10	; 16
 114:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW6_DDR |= (1 << MATRIX_ROW6_PIN);
 116:	8a b3       	in	r24, 0x1a	; 26
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW7_DDR |= (1 << MATRIX_ROW7_PIN);
 11c:	8a b3       	in	r24, 0x1a	; 26
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW8_DDR |= (1 << MATRIX_ROW8_PIN);
 122:	8a b3       	in	r24, 0x1a	; 26
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8a bb       	out	0x1a, r24	; 26
 128:	08 95       	ret

0000012a <LEDMatrix_writeColumn>:
}

void LEDMatrix_writeColumn(uint8_t col_data) { // column 데이터 출력
	if(col_data & (1 << 0))	MATRIX_COL1_PORT |= (1 << MATRIX_COL1_PIN);
 12a:	80 ff       	sbrs	r24, 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <LEDMatrix_writeColumn+0xc>
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	91 60       	ori	r25, 0x01	; 1
 132:	95 bb       	out	0x15, r25	; 21
 134:	03 c0       	rjmp	.+6      	; 0x13c <LEDMatrix_writeColumn+0x12>
	else MATRIX_COL1_PORT &= ~(1 << MATRIX_COL1_PIN);
 136:	95 b3       	in	r25, 0x15	; 21
 138:	9e 7f       	andi	r25, 0xFE	; 254
 13a:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 1))	MATRIX_COL2_PORT |= (1 << MATRIX_COL2_PIN);
 13c:	81 ff       	sbrs	r24, 1
 13e:	04 c0       	rjmp	.+8      	; 0x148 <LEDMatrix_writeColumn+0x1e>
 140:	95 b3       	in	r25, 0x15	; 21
 142:	92 60       	ori	r25, 0x02	; 2
 144:	95 bb       	out	0x15, r25	; 21
 146:	03 c0       	rjmp	.+6      	; 0x14e <LEDMatrix_writeColumn+0x24>
	else MATRIX_COL2_PORT &= ~(1 << MATRIX_COL2_PIN);
 148:	95 b3       	in	r25, 0x15	; 21
 14a:	9d 7f       	andi	r25, 0xFD	; 253
 14c:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 2))	MATRIX_COL3_PORT |= (1 << MATRIX_COL3_PIN);
 14e:	82 ff       	sbrs	r24, 2
 150:	04 c0       	rjmp	.+8      	; 0x15a <LEDMatrix_writeColumn+0x30>
 152:	95 b3       	in	r25, 0x15	; 21
 154:	94 60       	ori	r25, 0x04	; 4
 156:	95 bb       	out	0x15, r25	; 21
 158:	03 c0       	rjmp	.+6      	; 0x160 <LEDMatrix_writeColumn+0x36>
	else MATRIX_COL3_PORT &= ~(1 << MATRIX_COL3_PIN);
 15a:	95 b3       	in	r25, 0x15	; 21
 15c:	9b 7f       	andi	r25, 0xFB	; 251
 15e:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 3))	MATRIX_COL4_PORT |= (1 << MATRIX_COL4_PIN);
 160:	83 ff       	sbrs	r24, 3
 162:	04 c0       	rjmp	.+8      	; 0x16c <LEDMatrix_writeColumn+0x42>
 164:	95 b3       	in	r25, 0x15	; 21
 166:	98 60       	ori	r25, 0x08	; 8
 168:	95 bb       	out	0x15, r25	; 21
 16a:	03 c0       	rjmp	.+6      	; 0x172 <LEDMatrix_writeColumn+0x48>
	else MATRIX_COL4_PORT &= ~(1 << MATRIX_COL4_PIN);
 16c:	95 b3       	in	r25, 0x15	; 21
 16e:	97 7f       	andi	r25, 0xF7	; 247
 170:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 4))	MATRIX_COL5_PORT |= (1 << MATRIX_COL5_PIN);
 172:	84 ff       	sbrs	r24, 4
 174:	04 c0       	rjmp	.+8      	; 0x17e <LEDMatrix_writeColumn+0x54>
 176:	95 b3       	in	r25, 0x15	; 21
 178:	90 61       	ori	r25, 0x10	; 16
 17a:	95 bb       	out	0x15, r25	; 21
 17c:	03 c0       	rjmp	.+6      	; 0x184 <LEDMatrix_writeColumn+0x5a>
	else MATRIX_COL5_PORT &= ~(1 << MATRIX_COL5_PIN);
 17e:	95 b3       	in	r25, 0x15	; 21
 180:	9f 7e       	andi	r25, 0xEF	; 239
 182:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 5))	MATRIX_COL6_PORT |= (1 << MATRIX_COL6_PIN);
 184:	85 ff       	sbrs	r24, 5
 186:	04 c0       	rjmp	.+8      	; 0x190 <LEDMatrix_writeColumn+0x66>
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	90 62       	ori	r25, 0x20	; 32
 18c:	95 bb       	out	0x15, r25	; 21
 18e:	03 c0       	rjmp	.+6      	; 0x196 <LEDMatrix_writeColumn+0x6c>
	else MATRIX_COL6_PORT &= ~(1 << MATRIX_COL6_PIN);
 190:	95 b3       	in	r25, 0x15	; 21
 192:	9f 7d       	andi	r25, 0xDF	; 223
 194:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 6))	MATRIX_COL7_PORT |= (1 << MATRIX_COL7_PIN);
 196:	86 ff       	sbrs	r24, 6
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <LEDMatrix_writeColumn+0x78>
 19a:	95 b3       	in	r25, 0x15	; 21
 19c:	90 64       	ori	r25, 0x40	; 64
 19e:	95 bb       	out	0x15, r25	; 21
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <LEDMatrix_writeColumn+0x7e>
	else MATRIX_COL7_PORT &= ~(1 << MATRIX_COL7_PIN);
 1a2:	95 b3       	in	r25, 0x15	; 21
 1a4:	9f 7b       	andi	r25, 0xBF	; 191
 1a6:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 7))	MATRIX_COL8_PORT |= (1 << MATRIX_COL8_PIN);
 1a8:	88 23       	and	r24, r24
 1aa:	24 f4       	brge	.+8      	; 0x1b4 <LEDMatrix_writeColumn+0x8a>
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	08 95       	ret
	else MATRIX_COL8_PORT &= ~(1 << MATRIX_COL8_PIN);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	8f 77       	andi	r24, 0x7F	; 127
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	08 95       	ret

000001bc <LEDMatrix_writeRow>:
}

void LEDMatrix_writeRow(uint8_t row_data) { // row 데이터 출력
	if(row_data & (1 << 0))	MATRIX_ROW1_PORT |= (1 << MATRIX_ROW1_PIN);
 1bc:	80 ff       	sbrs	r24, 0
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <LEDMatrix_writeRow+0xc>
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	91 60       	ori	r25, 0x01	; 1
 1c4:	9b bb       	out	0x1b, r25	; 27
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <LEDMatrix_writeRow+0x12>
	else MATRIX_ROW1_PORT &= ~(1 << MATRIX_ROW1_PIN);
 1c8:	9b b3       	in	r25, 0x1b	; 27
 1ca:	9e 7f       	andi	r25, 0xFE	; 254
 1cc:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 1))	MATRIX_ROW2_PORT |= (1 << MATRIX_ROW2_PIN);
 1ce:	81 ff       	sbrs	r24, 1
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <LEDMatrix_writeRow+0x1e>
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	92 60       	ori	r25, 0x02	; 2
 1d6:	9b bb       	out	0x1b, r25	; 27
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <LEDMatrix_writeRow+0x24>
	else MATRIX_ROW2_PORT &= ~(1 << MATRIX_ROW2_PIN);
 1da:	9b b3       	in	r25, 0x1b	; 27
 1dc:	9d 7f       	andi	r25, 0xFD	; 253
 1de:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 2))	MATRIX_ROW3_PORT |= (1 << MATRIX_ROW3_PIN);
 1e0:	82 ff       	sbrs	r24, 2
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <LEDMatrix_writeRow+0x30>
 1e4:	9b b3       	in	r25, 0x1b	; 27
 1e6:	94 60       	ori	r25, 0x04	; 4
 1e8:	9b bb       	out	0x1b, r25	; 27
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <LEDMatrix_writeRow+0x36>
	else MATRIX_ROW3_PORT &= ~(1 << MATRIX_ROW3_PIN);
 1ec:	9b b3       	in	r25, 0x1b	; 27
 1ee:	9b 7f       	andi	r25, 0xFB	; 251
 1f0:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 3))	MATRIX_ROW4_PORT |= (1 << MATRIX_ROW4_PIN);
 1f2:	83 ff       	sbrs	r24, 3
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <LEDMatrix_writeRow+0x42>
 1f6:	9b b3       	in	r25, 0x1b	; 27
 1f8:	98 60       	ori	r25, 0x08	; 8
 1fa:	9b bb       	out	0x1b, r25	; 27
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <LEDMatrix_writeRow+0x48>
	else MATRIX_ROW4_PORT &= ~(1 << MATRIX_ROW4_PIN);
 1fe:	9b b3       	in	r25, 0x1b	; 27
 200:	97 7f       	andi	r25, 0xF7	; 247
 202:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 4))	MATRIX_ROW5_PORT |= (1 << MATRIX_ROW5_PIN);
 204:	84 ff       	sbrs	r24, 4
 206:	04 c0       	rjmp	.+8      	; 0x210 <LEDMatrix_writeRow+0x54>
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	90 61       	ori	r25, 0x10	; 16
 20c:	9b bb       	out	0x1b, r25	; 27
 20e:	03 c0       	rjmp	.+6      	; 0x216 <LEDMatrix_writeRow+0x5a>
	else MATRIX_ROW5_PORT &= ~(1 << MATRIX_ROW5_PIN);
 210:	9b b3       	in	r25, 0x1b	; 27
 212:	9f 7e       	andi	r25, 0xEF	; 239
 214:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 5))	MATRIX_ROW6_PORT |= (1 << MATRIX_ROW6_PIN);
 216:	85 ff       	sbrs	r24, 5
 218:	04 c0       	rjmp	.+8      	; 0x222 <LEDMatrix_writeRow+0x66>
 21a:	9b b3       	in	r25, 0x1b	; 27
 21c:	90 62       	ori	r25, 0x20	; 32
 21e:	9b bb       	out	0x1b, r25	; 27
 220:	03 c0       	rjmp	.+6      	; 0x228 <LEDMatrix_writeRow+0x6c>
	else MATRIX_ROW6_PORT &= ~(1 << MATRIX_ROW6_PIN);
 222:	9b b3       	in	r25, 0x1b	; 27
 224:	9f 7d       	andi	r25, 0xDF	; 223
 226:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 6))	MATRIX_ROW7_PORT |= (1 << MATRIX_ROW7_PIN);
 228:	86 ff       	sbrs	r24, 6
 22a:	04 c0       	rjmp	.+8      	; 0x234 <LEDMatrix_writeRow+0x78>
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	90 64       	ori	r25, 0x40	; 64
 230:	9b bb       	out	0x1b, r25	; 27
 232:	03 c0       	rjmp	.+6      	; 0x23a <LEDMatrix_writeRow+0x7e>
	else MATRIX_ROW7_PORT &= ~(1 << MATRIX_ROW7_PIN);
 234:	9b b3       	in	r25, 0x1b	; 27
 236:	9f 7b       	andi	r25, 0xBF	; 191
 238:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 7))	MATRIX_ROW8_PORT |= (1 << MATRIX_ROW8_PIN);
 23a:	88 23       	and	r24, r24
 23c:	24 f4       	brge	.+8      	; 0x246 <LEDMatrix_writeRow+0x8a>
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	80 68       	ori	r24, 0x80	; 128
 242:	8b bb       	out	0x1b, r24	; 27
 244:	08 95       	ret
	else MATRIX_ROW8_PORT &= ~(1 << MATRIX_ROW8_PIN);
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	8f 77       	andi	r24, 0x7F	; 127
 24a:	8b bb       	out	0x1b, r24	; 27
 24c:	08 95       	ret

0000024e <smile_shifting>:

uint8_t smile_shifted[8];


void smile_shifting(char dir, char shifting) {
	for (int i = 0; i < 8; i++) {
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	23 c0       	rjmp	.+70     	; 0x29a <smile_shifting+0x4c>
		if(dir == 1) smile_shifted[i] = smile[i] >> shifting;
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	81 f4       	brne	.+32     	; 0x278 <smile_shifting+0x2a>
 258:	f9 01       	movw	r30, r18
 25a:	e0 50       	subi	r30, 0x00	; 0
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	40 81       	ld	r20, Z
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	06 2e       	mov	r0, r22
 264:	02 c0       	rjmp	.+4      	; 0x26a <smile_shifting+0x1c>
 266:	55 95       	asr	r21
 268:	47 95       	ror	r20
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <smile_shifting+0x18>
 26e:	f9 01       	movw	r30, r18
 270:	e8 5f       	subi	r30, 0xF8	; 248
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	40 83       	st	Z, r20
 276:	0f c0       	rjmp	.+30     	; 0x296 <smile_shifting+0x48>
		else if(dir == 0) smile_shifted[i] = smile[i] << shifting;
 278:	81 11       	cpse	r24, r1
 27a:	0d c0       	rjmp	.+26     	; 0x296 <smile_shifting+0x48>
 27c:	f9 01       	movw	r30, r18
 27e:	e0 50       	subi	r30, 0x00	; 0
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	90 81       	ld	r25, Z
 284:	f9 01       	movw	r30, r18
 286:	e8 5f       	subi	r30, 0xF8	; 248
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	06 2e       	mov	r0, r22
 28c:	01 c0       	rjmp	.+2      	; 0x290 <smile_shifting+0x42>
 28e:	99 0f       	add	r25, r25
 290:	0a 94       	dec	r0
 292:	ea f7       	brpl	.-6      	; 0x28e <smile_shifting+0x40>
 294:	90 83       	st	Z, r25

uint8_t smile_shifted[8];


void smile_shifting(char dir, char shifting) {
	for (int i = 0; i < 8; i++) {
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	28 30       	cpi	r18, 0x08	; 8
 29c:	31 05       	cpc	r19, r1
 29e:	d4 f2       	brlt	.-76     	; 0x254 <smile_shifting+0x6>
		if(dir == 1) smile_shifted[i] = smile[i] >> shifting;
		else if(dir == 0) smile_shifted[i] = smile[i] << shifting;
	}
}
 2a0:	08 95       	ret

000002a2 <main>:


int main(void)
{
    LEDMatrix_init();
 2a2:	12 df       	rcall	.-476    	; 0xc8 <LEDMatrix_init>
	int count = 0;
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		if (count < 100) smile_shifting(1, 0);
 2a8:	04 36       	cpi	r16, 0x64	; 100
 2aa:	11 05       	cpc	r17, r1
 2ac:	24 f4       	brge	.+8      	; 0x2b6 <main+0x14>
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	cd df       	rcall	.-102    	; 0x24e <smile_shifting>
 2b4:	17 c0       	rjmp	.+46     	; 0x2e4 <main+0x42>
		else if(count >= 100 && count < 200) smile_shifting(0, 1);
 2b6:	c8 01       	movw	r24, r16
 2b8:	98 01       	movw	r18, r16
 2ba:	24 56       	subi	r18, 0x64	; 100
 2bc:	31 09       	sbc	r19, r1
 2be:	24 36       	cpi	r18, 0x64	; 100
 2c0:	31 05       	cpc	r19, r1
 2c2:	20 f4       	brcc	.+8      	; 0x2cc <main+0x2a>
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	c2 df       	rcall	.-124    	; 0x24e <smile_shifting>
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <main+0x42>
		else if(count >= 200 && count < 300) smile_shifting(0, 2);
 2cc:	98 01       	movw	r18, r16
 2ce:	28 5c       	subi	r18, 0xC8	; 200
 2d0:	31 09       	sbc	r19, r1
 2d2:	24 36       	cpi	r18, 0x64	; 100
 2d4:	31 05       	cpc	r19, r1
 2d6:	48 f4       	brcc	.+18     	; 0x2ea <main+0x48>
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	b8 df       	rcall	.-144    	; 0x24e <smile_shifting>
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <main+0x42>
		else if(count >= 1400 && count < 1500) smile_shifting(1, 4);
		else if(count >= 1500 && count < 1600) smile_shifting(1, 3);
		else if(count >= 1600 && count < 1700) smile_shifting(1, 2);
		else if(count >= 1700 && count < 1800) smile_shifting(1, 1);
		else if(count >= 1800 && count < 2000) smile_shifting(1, 0);
		else if(count >= 2000) count = 0;
 2e0:	00 e0       	ldi	r16, 0x00	; 0
 2e2:	10 e0       	ldi	r17, 0x00	; 0
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	ab c0       	rjmp	.+342    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    while (1) 
    {
		if (count < 100) smile_shifting(1, 0);
		else if(count >= 100 && count < 200) smile_shifting(0, 1);
		else if(count >= 200 && count < 300) smile_shifting(0, 2);
		else if(count >= 300 && count < 400) smile_shifting(0, 3);
 2ea:	98 01       	movw	r18, r16
 2ec:	2c 52       	subi	r18, 0x2C	; 44
 2ee:	31 40       	sbci	r19, 0x01	; 1
 2f0:	24 36       	cpi	r18, 0x64	; 100
 2f2:	31 05       	cpc	r19, r1
 2f4:	20 f4       	brcc	.+8      	; 0x2fe <main+0x5c>
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	a9 df       	rcall	.-174    	; 0x24e <smile_shifting>
 2fc:	f3 cf       	rjmp	.-26     	; 0x2e4 <main+0x42>
		else if(count >= 400 && count < 500) smile_shifting(0, 4);
 2fe:	98 01       	movw	r18, r16
 300:	20 59       	subi	r18, 0x90	; 144
 302:	31 40       	sbci	r19, 0x01	; 1
 304:	24 36       	cpi	r18, 0x64	; 100
 306:	31 05       	cpc	r19, r1
 308:	20 f4       	brcc	.+8      	; 0x312 <main+0x70>
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	9f df       	rcall	.-194    	; 0x24e <smile_shifting>
 310:	e9 cf       	rjmp	.-46     	; 0x2e4 <main+0x42>
		else if(count >= 500 && count < 600) smile_shifting(0, 3);
 312:	98 01       	movw	r18, r16
 314:	24 5f       	subi	r18, 0xF4	; 244
 316:	31 40       	sbci	r19, 0x01	; 1
 318:	24 36       	cpi	r18, 0x64	; 100
 31a:	31 05       	cpc	r19, r1
 31c:	20 f4       	brcc	.+8      	; 0x326 <main+0x84>
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	95 df       	rcall	.-214    	; 0x24e <smile_shifting>
 324:	df cf       	rjmp	.-66     	; 0x2e4 <main+0x42>
		else if(count >= 600 && count < 700) smile_shifting(0, 2);
 326:	98 01       	movw	r18, r16
 328:	28 55       	subi	r18, 0x58	; 88
 32a:	32 40       	sbci	r19, 0x02	; 2
 32c:	24 36       	cpi	r18, 0x64	; 100
 32e:	31 05       	cpc	r19, r1
 330:	20 f4       	brcc	.+8      	; 0x33a <main+0x98>
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	8b df       	rcall	.-234    	; 0x24e <smile_shifting>
 338:	d5 cf       	rjmp	.-86     	; 0x2e4 <main+0x42>
		else if(count >= 700 && count < 800) smile_shifting(0, 1);
 33a:	98 01       	movw	r18, r16
 33c:	2c 5b       	subi	r18, 0xBC	; 188
 33e:	32 40       	sbci	r19, 0x02	; 2
 340:	24 36       	cpi	r18, 0x64	; 100
 342:	31 05       	cpc	r19, r1
 344:	20 f4       	brcc	.+8      	; 0x34e <main+0xac>
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	81 df       	rcall	.-254    	; 0x24e <smile_shifting>
		else if(count >= 800 && count < 1100) smile_shifting(1, 0);
 34c:	cb cf       	rjmp	.-106    	; 0x2e4 <main+0x42>
 34e:	98 01       	movw	r18, r16
 350:	20 52       	subi	r18, 0x20	; 32
 352:	33 40       	sbci	r19, 0x03	; 3
 354:	2c 32       	cpi	r18, 0x2C	; 44
 356:	31 40       	sbci	r19, 0x01	; 1
 358:	20 f4       	brcc	.+8      	; 0x362 <main+0xc0>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	77 df       	rcall	.-274    	; 0x24e <smile_shifting>
		else if(count >= 1100 && count < 1200) smile_shifting(1, 1);
 360:	c1 cf       	rjmp	.-126    	; 0x2e4 <main+0x42>
 362:	98 01       	movw	r18, r16
 364:	2c 54       	subi	r18, 0x4C	; 76
 366:	34 40       	sbci	r19, 0x04	; 4
 368:	24 36       	cpi	r18, 0x64	; 100
 36a:	31 05       	cpc	r19, r1
 36c:	20 f4       	brcc	.+8      	; 0x376 <main+0xd4>
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	6d df       	rcall	.-294    	; 0x24e <smile_shifting>
		else if(count >= 1200 && count < 1300) smile_shifting(1, 2);
 374:	b7 cf       	rjmp	.-146    	; 0x2e4 <main+0x42>
 376:	98 01       	movw	r18, r16
 378:	20 5b       	subi	r18, 0xB0	; 176
 37a:	34 40       	sbci	r19, 0x04	; 4
 37c:	24 36       	cpi	r18, 0x64	; 100
 37e:	31 05       	cpc	r19, r1
 380:	20 f4       	brcc	.+8      	; 0x38a <main+0xe8>
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	63 df       	rcall	.-314    	; 0x24e <smile_shifting>
		else if(count >= 1300 && count < 1400) smile_shifting(1, 3);
 388:	ad cf       	rjmp	.-166    	; 0x2e4 <main+0x42>
 38a:	98 01       	movw	r18, r16
 38c:	24 51       	subi	r18, 0x14	; 20
 38e:	35 40       	sbci	r19, 0x05	; 5
 390:	24 36       	cpi	r18, 0x64	; 100
 392:	31 05       	cpc	r19, r1
 394:	20 f4       	brcc	.+8      	; 0x39e <main+0xfc>
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	59 df       	rcall	.-334    	; 0x24e <smile_shifting>
		else if(count >= 1400 && count < 1500) smile_shifting(1, 4);
 39c:	a3 cf       	rjmp	.-186    	; 0x2e4 <main+0x42>
 39e:	98 01       	movw	r18, r16
 3a0:	28 57       	subi	r18, 0x78	; 120
 3a2:	35 40       	sbci	r19, 0x05	; 5
 3a4:	24 36       	cpi	r18, 0x64	; 100
 3a6:	31 05       	cpc	r19, r1
 3a8:	20 f4       	brcc	.+8      	; 0x3b2 <main+0x110>
 3aa:	64 e0       	ldi	r22, 0x04	; 4
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	4f df       	rcall	.-354    	; 0x24e <smile_shifting>
		else if(count >= 1500 && count < 1600) smile_shifting(1, 3);
 3b0:	99 cf       	rjmp	.-206    	; 0x2e4 <main+0x42>
 3b2:	98 01       	movw	r18, r16
 3b4:	2c 5d       	subi	r18, 0xDC	; 220
 3b6:	35 40       	sbci	r19, 0x05	; 5
 3b8:	24 36       	cpi	r18, 0x64	; 100
 3ba:	31 05       	cpc	r19, r1
 3bc:	20 f4       	brcc	.+8      	; 0x3c6 <main+0x124>
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	45 df       	rcall	.-374    	; 0x24e <smile_shifting>
		else if(count >= 1600 && count < 1700) smile_shifting(1, 2);
 3c4:	8f cf       	rjmp	.-226    	; 0x2e4 <main+0x42>
 3c6:	98 01       	movw	r18, r16
 3c8:	20 54       	subi	r18, 0x40	; 64
 3ca:	36 40       	sbci	r19, 0x06	; 6
 3cc:	24 36       	cpi	r18, 0x64	; 100
 3ce:	31 05       	cpc	r19, r1
 3d0:	20 f4       	brcc	.+8      	; 0x3da <main+0x138>
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	3b df       	rcall	.-394    	; 0x24e <smile_shifting>
		else if(count >= 1700 && count < 1800) smile_shifting(1, 1);
 3d8:	85 cf       	rjmp	.-246    	; 0x2e4 <main+0x42>
 3da:	98 01       	movw	r18, r16
 3dc:	24 5a       	subi	r18, 0xA4	; 164
 3de:	36 40       	sbci	r19, 0x06	; 6
 3e0:	24 36       	cpi	r18, 0x64	; 100
 3e2:	31 05       	cpc	r19, r1
 3e4:	20 f4       	brcc	.+8      	; 0x3ee <main+0x14c>
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	81 e0       	ldi	r24, 0x01	; 1
		else if(count >= 1800 && count < 2000) smile_shifting(1, 0);
 3ea:	31 df       	rcall	.-414    	; 0x24e <smile_shifting>
 3ec:	7b cf       	rjmp	.-266    	; 0x2e4 <main+0x42>
 3ee:	88 50       	subi	r24, 0x08	; 8
 3f0:	97 40       	sbci	r25, 0x07	; 7
 3f2:	88 3c       	cpi	r24, 0xC8	; 200
 3f4:	91 05       	cpc	r25, r1
 3f6:	20 f4       	brcc	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
		else if(count >= 2000) count = 0;
 3fc:	28 df       	rcall	.-432    	; 0x24e <smile_shifting>
 3fe:	72 cf       	rjmp	.-284    	; 0x2e4 <main+0x42>
 400:	00 3d       	cpi	r16, 0xD0	; 208
 402:	87 e0       	ldi	r24, 0x07	; 7
 404:	18 07       	cpc	r17, r24
		
		for(int i = 0; i < 8; i++) {
			LEDMatrix_writeRow(0);
 406:	0c f0       	brlt	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	6b cf       	rjmp	.-298    	; 0x2e0 <main+0x3e>
 40a:	6c cf       	rjmp	.-296    	; 0x2e4 <main+0x42>
			
			uint8_t col_data = ~(1 << i);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	d6 de       	rcall	.-596    	; 0x1bc <LEDMatrix_writeRow>
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0c 2e       	mov	r0, r28
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
			LEDMatrix_writeColumn(col_data);
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
			
			LEDMatrix_writeRow(smile_shifted[i]);
 422:	83 de       	rcall	.-762    	; 0x12a <LEDMatrix_writeColumn>
 424:	fe 01       	movw	r30, r28
 426:	e8 5f       	subi	r30, 0xF8	; 248
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	80 81       	ld	r24, Z
 42c:	c7 de       	rcall	.-626    	; 0x1bc <LEDMatrix_writeRow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	9f e1       	ldi	r25, 0x1F	; 31
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
			
			_delay_ms(2);
			count++;
 43a:	0f 5f       	subi	r16, 0xFF	; 255
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
		else if(count >= 1600 && count < 1700) smile_shifting(1, 2);
		else if(count >= 1700 && count < 1800) smile_shifting(1, 1);
		else if(count >= 1800 && count < 2000) smile_shifting(1, 0);
		else if(count >= 2000) count = 0;
		
		for(int i = 0; i < 8; i++) {
 43e:	21 96       	adiw	r28, 0x01	; 1
 440:	c8 30       	cpi	r28, 0x08	; 8
 442:	d1 05       	cpc	r29, r1
 444:	1c f3       	brlt	.-58     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 446:	30 cf       	rjmp	.-416    	; 0x2a8 <main+0x6>

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
