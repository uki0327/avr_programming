
I2C_Protocol_using_DS1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000005d0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001529  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eb1  00000000  00000000  00002725  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  000035d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000631  00000000  00000000  000039bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000110c  00000000  00000000  00003fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 39       	cpi	r26, 0x98	; 152
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  8e:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <I2C_init>:
 */ 

#include "I2C.h"

void I2C_init(void) {
	DDRC |= (1 << I2C_SCL);
  96:	87 b1       	in	r24, 0x07	; 7
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << I2C_SDA);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	87 b9       	out	0x07, r24	; 7
	TWBR = 32;
  a2:	e8 eb       	ldi	r30, 0xB8	; 184
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	TWBR = (1 << TWEN) | (1 << TWEA);
  aa:	84 e4       	ldi	r24, 0x44	; 68
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <I2C_start>:
}

void I2C_start(void) {
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWEA);
  b0:	84 ee       	ldi	r24, 0xE4	; 228
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while( !(TWCR & (1 << TWINT)) ); // 시작 완료 대기
  b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ba:	88 23       	and	r24, r24
  bc:	e4 f7       	brge	.-8      	; 0xb6 <I2C_start+0x6>
}
  be:	08 95       	ret

000000c0 <I2C_transmit>:

void I2C_transmit(uint8_t data) {
	TWDR = data;
  c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  c4:	84 ec       	ldi	r24, 0xC4	; 196
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while( !(TWCR & (1 << TWINT)) );
  ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	88 23       	and	r24, r24
  d0:	e4 f7       	brge	.-8      	; 0xca <I2C_transmit+0xa>
}
  d2:	08 95       	ret

000000d4 <I2C_receive_ACK>:

uint8_t I2C_receive_ACK(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  d4:	84 ec       	ldi	r24, 0xC4	; 196
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while( !(TWCR & (1 << TWINT)) );
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	88 23       	and	r24, r24
  e0:	e4 f7       	brge	.-8      	; 0xda <I2C_receive_ACK+0x6>
	return TWDR;
  e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  e6:	08 95       	ret

000000e8 <I2C_receive_NACK>:

uint8_t I2C_receive_NACK(void) {
	TWCR = _BV(TWINT) | _BV(TWEN);
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while( !(TWCR & (1 << TWINT)) );
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <I2C_receive_NACK+0x6>
	return TWDR;
  f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  fa:	08 95       	ret

000000fc <I2C_stop>:

void I2C_stop(void) {
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWEA);
  fc:	84 ed       	ldi	r24, 0xD4	; 212
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 102:	08 95       	ret

00000104 <bcd_to_decimal>:
#include <util/delay.h>
#include "UART.h"
#include "I2C.h"

uint8_t bcd_to_decimal(uint8_t bcd) {
	return (bcd >> 4) * 10 + (bcd & 0x0F); // BCD to Binary
 104:	98 2f       	mov	r25, r24
 106:	92 95       	swap	r25
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	99 0f       	add	r25, r25
 10c:	29 2f       	mov	r18, r25
 10e:	22 0f       	add	r18, r18
 110:	22 0f       	add	r18, r18
 112:	92 0f       	add	r25, r18
 114:	8f 70       	andi	r24, 0x0F	; 15
}
 116:	89 0f       	add	r24, r25
 118:	08 95       	ret

0000011a <decimal_to_bcd>:

uint8_t decimal_to_bcd(uint8_t decimal) {
	return ( ((decimal / 10) << 4) | (decimal % 10) );
 11a:	9d ec       	ldi	r25, 0xCD	; 205
 11c:	89 9f       	mul	r24, r25
 11e:	91 2d       	mov	r25, r1
 120:	11 24       	eor	r1, r1
 122:	96 95       	lsr	r25
 124:	96 95       	lsr	r25
 126:	96 95       	lsr	r25
 128:	20 e1       	ldi	r18, 0x10	; 16
 12a:	92 9f       	mul	r25, r18
 12c:	a0 01       	movw	r20, r0
 12e:	11 24       	eor	r1, r1
 130:	99 0f       	add	r25, r25
 132:	29 2f       	mov	r18, r25
 134:	22 0f       	add	r18, r18
 136:	22 0f       	add	r18, r18
 138:	92 0f       	add	r25, r18
 13a:	89 1b       	sub	r24, r25
}
 13c:	84 2b       	or	r24, r20
 13e:	08 95       	ret

00000140 <write_message>:

void write_message(uint8_t no, char *message) { // RTC 데이터 출력
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	18 2f       	mov	r17, r24
 148:	eb 01       	movw	r28, r22
	UART_printString(" ");
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
	UART_print8bitNumber(no);
 152:	81 2f       	mov	r24, r17
 154:	0e 94 95 02 	call	0x52a	; 0x52a <UART_print8bitNumber>
	UART_printString(message);
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <main>:

int main(void)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	27 97       	sbiw	r28, 0x07	; 7
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
    uint8_t i;
	I2C_init();	// I2C 초기화
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <I2C_init>
	UART_INIT(9600, 2); // UART 초기화
 17e:	42 e0       	ldi	r20, 0x02	; 2
 180:	60 e8       	ldi	r22, 0x80	; 128
 182:	75 e2       	ldi	r23, 0x25	; 37
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UART_INIT>
	UART_printString("* UART is ready...\n");
 18c:	89 e0       	ldi	r24, 0x09	; 9
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
	
	uint8_t address = 0x68;	// RTC CHIP 의 I2C 주소
	
	// 2014년 9월 1일 월요일 12시 34분 56초
	uint8_t data[] = {56,34,12,2,1,9,14};
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	de 01       	movw	r26, r28
 19c:	11 96       	adiw	r26, 0x01	; 1
 19e:	01 90       	ld	r0, Z+
 1a0:	0d 92       	st	X+, r0
 1a2:	8a 95       	dec	r24
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x38>
	
	// RTC 모듈 시간 설정
	I2C_start();
 1a6:	0e 94 58 00 	call	0xb0	; 0xb0 <I2C_start>
	I2C_transmit(address << 1);
 1aa:	80 ed       	ldi	r24, 0xD0	; 208
 1ac:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_transmit>
	// RTC 데이터 기록 메모리 시작 주소 전송
	I2C_transmit(0);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_transmit>
	
	UART_printString("* Setting RTC...\n");
 1b6:	8d e1       	ldi	r24, 0x1D	; 29
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
	for(i = 0; i < 7; i++) {
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <main+0x8a>
		UART_printString(" ");
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
		UART_print8bitNumber(i);
 1ca:	81 2f       	mov	r24, r17
 1cc:	0e 94 95 02 	call	0x52a	; 0x52a <UART_print8bitNumber>
		UART_printString("th byte write...\n");
 1d0:	8f e2       	ldi	r24, 0x2F	; 47
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
		I2C_transmit(decimal_to_bcd(data[i]));
 1d8:	e1 e0       	ldi	r30, 0x01	; 1
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	e1 0f       	add	r30, r17
 1e2:	f1 1d       	adc	r31, r1
 1e4:	80 81       	ld	r24, Z
 1e6:	0e 94 8d 00 	call	0x11a	; 0x11a <decimal_to_bcd>
 1ea:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_transmit>
	I2C_transmit(address << 1);
	// RTC 데이터 기록 메모리 시작 주소 전송
	I2C_transmit(0);
	
	UART_printString("* Setting RTC...\n");
	for(i = 0; i < 7; i++) {
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	17 30       	cpi	r17, 0x07	; 7
 1f2:	38 f3       	brcs	.-50     	; 0x1c2 <main+0x5c>
		UART_print8bitNumber(i);
		UART_printString("th byte write...\n");
		I2C_transmit(decimal_to_bcd(data[i]));
	}
	
	I2C_stop();
 1f4:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	87 ea       	ldi	r24, 0xA7	; 167
 1fc:	91 e6       	ldi	r25, 0x61	; 97
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x98>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0xa2>
 208:	00 00       	nop
	_delay_ms(2000);
	I2C_start();
 20a:	0e 94 58 00 	call	0xb0	; 0xb0 <I2C_start>
	I2C_transmit(address << 1);
 20e:	80 ed       	ldi	r24, 0xD0	; 208
 210:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_transmit>
	I2C_transmit(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_transmit>
	I2C_stop();
 21a:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_stop>
	I2C_start();
 21e:	0e 94 58 00 	call	0xb0	; 0xb0 <I2C_start>
	I2C_transmit( (address << 1) + 1);
 222:	81 ed       	ldi	r24, 0xD1	; 209
 224:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_transmit>
	
	UART_printString("* Time/Date Retrieval...\n");
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_printString>
	
	write_message(bcd_to_decimal(I2C_receive_ACK()), " second\n");
 230:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_receive_ACK>
 234:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 238:	6b e5       	ldi	r22, 0x5B	; 91
 23a:	71 e0       	ldi	r23, 0x01	; 1
 23c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	write_message(bcd_to_decimal(I2C_receive_ACK()), " minute\n");
 240:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_receive_ACK>
 244:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 248:	64 e6       	ldi	r22, 0x64	; 100
 24a:	71 e0       	ldi	r23, 0x01	; 1
 24c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	write_message(bcd_to_decimal(I2C_receive_ACK()), " hour\n");
 250:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_receive_ACK>
 254:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 258:	6d e6       	ldi	r22, 0x6D	; 109
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	write_message(bcd_to_decimal(I2C_receive_ACK()), " day of week\n");
 260:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_receive_ACK>
 264:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 268:	64 e7       	ldi	r22, 0x74	; 116
 26a:	71 e0       	ldi	r23, 0x01	; 1
 26c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	write_message(bcd_to_decimal(I2C_receive_ACK()), " day\n");
 270:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_receive_ACK>
 274:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 278:	62 e8       	ldi	r22, 0x82	; 130
 27a:	71 e0       	ldi	r23, 0x01	; 1
 27c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	write_message(bcd_to_decimal(I2C_receive_ACK()), " month\n");
 280:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_receive_ACK>
 284:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 288:	68 e8       	ldi	r22, 0x88	; 136
 28a:	71 e0       	ldi	r23, 0x01	; 1
 28c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	write_message(bcd_to_decimal(I2C_receive_NACK()), " year\n");
 290:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_receive_NACK>
 294:	0e 94 82 00 	call	0x104	; 0x104 <bcd_to_decimal>
 298:	60 e9       	ldi	r22, 0x90	; 144
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	0e 94 a0 00 	call	0x140	; 0x140 <write_message>
	
	I2C_stop();
 2a0:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_stop>
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <main+0x13e>

000002a6 <UART_INIT>:
}

unsigned char UART_receive(void) {
	while ( !(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 2a6:	42 30       	cpi	r20, 0x02	; 2
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <UART_INIT+0x10>
 2aa:	e0 ec       	ldi	r30, 0xC0	; 192
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	30 81       	ld	r19, Z
 2b0:	32 60       	ori	r19, 0x02	; 2
 2b2:	30 83       	st	Z, r19
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <UART_INIT+0x18>
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	11 f4       	brne	.+4      	; 0x2be <UART_INIT+0x18>
 2ba:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <UART_INIT+0x22>
 2c6:	7f c0       	rjmp	.+254    	; 0x3c6 <UART_INIT+0x120>
 2c8:	61 15       	cp	r22, r1
 2ca:	26 e9       	ldi	r18, 0x96	; 150
 2cc:	72 07       	cpc	r23, r18
 2ce:	81 05       	cpc	r24, r1
 2d0:	91 05       	cpc	r25, r1
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <UART_INIT+0x30>
 2d4:	66 c0       	rjmp	.+204    	; 0x3a2 <UART_INIT+0xfc>
 2d6:	58 f5       	brcc	.+86     	; 0x32e <UART_INIT+0x88>
 2d8:	60 38       	cpi	r22, 0x80	; 128
 2da:	25 e2       	ldi	r18, 0x25	; 37
 2dc:	72 07       	cpc	r23, r18
 2de:	81 05       	cpc	r24, r1
 2e0:	91 05       	cpc	r25, r1
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <UART_INIT+0x40>
 2e4:	56 c0       	rjmp	.+172    	; 0x392 <UART_INIT+0xec>
 2e6:	70 f4       	brcc	.+28     	; 0x304 <UART_INIT+0x5e>
 2e8:	60 36       	cpi	r22, 0x60	; 96
 2ea:	29 e0       	ldi	r18, 0x09	; 9
 2ec:	72 07       	cpc	r23, r18
 2ee:	81 05       	cpc	r24, r1
 2f0:	91 05       	cpc	r25, r1
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <UART_INIT+0x50>
 2f4:	4c c0       	rjmp	.+152    	; 0x38e <UART_INIT+0xe8>
 2f6:	60 3c       	cpi	r22, 0xC0	; 192
 2f8:	72 41       	sbci	r23, 0x12	; 18
 2fa:	81 05       	cpc	r24, r1
 2fc:	91 05       	cpc	r25, r1
 2fe:	09 f4       	brne	.+2      	; 0x302 <UART_INIT+0x5c>
 300:	e4 c0       	rjmp	.+456    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 302:	5f c0       	rjmp	.+190    	; 0x3c2 <UART_INIT+0x11c>
 304:	61 15       	cp	r22, r1
 306:	2b e4       	ldi	r18, 0x4B	; 75
 308:	72 07       	cpc	r23, r18
 30a:	81 05       	cpc	r24, r1
 30c:	91 05       	cpc	r25, r1
 30e:	09 f4       	brne	.+2      	; 0x312 <UART_INIT+0x6c>
 310:	44 c0       	rjmp	.+136    	; 0x39a <UART_INIT+0xf4>
 312:	60 38       	cpi	r22, 0x80	; 128
 314:	20 e7       	ldi	r18, 0x70	; 112
 316:	72 07       	cpc	r23, r18
 318:	81 05       	cpc	r24, r1
 31a:	91 05       	cpc	r25, r1
 31c:	09 f4       	brne	.+2      	; 0x320 <UART_INIT+0x7a>
 31e:	3f c0       	rjmp	.+126    	; 0x39e <UART_INIT+0xf8>
 320:	60 34       	cpi	r22, 0x40	; 64
 322:	78 43       	sbci	r23, 0x38	; 56
 324:	81 05       	cpc	r24, r1
 326:	91 05       	cpc	r25, r1
 328:	09 f0       	breq	.+2      	; 0x32c <UART_INIT+0x86>
 32a:	4b c0       	rjmp	.+150    	; 0x3c2 <UART_INIT+0x11c>
 32c:	34 c0       	rjmp	.+104    	; 0x396 <UART_INIT+0xf0>
 32e:	61 15       	cp	r22, r1
 330:	24 e8       	ldi	r18, 0x84	; 132
 332:	72 07       	cpc	r23, r18
 334:	23 e0       	ldi	r18, 0x03	; 3
 336:	82 07       	cpc	r24, r18
 338:	91 05       	cpc	r25, r1
 33a:	d9 f1       	breq	.+118    	; 0x3b2 <UART_INIT+0x10c>
 33c:	a0 f4       	brcc	.+40     	; 0x366 <UART_INIT+0xc0>
 33e:	61 15       	cp	r22, r1
 340:	2c e2       	ldi	r18, 0x2C	; 44
 342:	72 07       	cpc	r23, r18
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	82 07       	cpc	r24, r18
 348:	91 05       	cpc	r25, r1
 34a:	79 f1       	breq	.+94     	; 0x3aa <UART_INIT+0x104>
 34c:	61 15       	cp	r22, r1
 34e:	22 ec       	ldi	r18, 0xC2	; 194
 350:	72 07       	cpc	r23, r18
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	82 07       	cpc	r24, r18
 356:	91 05       	cpc	r25, r1
 358:	51 f1       	breq	.+84     	; 0x3ae <UART_INIT+0x108>
 35a:	61 15       	cp	r22, r1
 35c:	71 4e       	sbci	r23, 0xE1	; 225
 35e:	81 05       	cpc	r24, r1
 360:	91 05       	cpc	r25, r1
 362:	79 f5       	brne	.+94     	; 0x3c2 <UART_INIT+0x11c>
 364:	20 c0       	rjmp	.+64     	; 0x3a6 <UART_INIT+0x100>
 366:	60 32       	cpi	r22, 0x20	; 32
 368:	21 ea       	ldi	r18, 0xA1	; 161
 36a:	72 07       	cpc	r23, r18
 36c:	27 e0       	ldi	r18, 0x07	; 7
 36e:	82 07       	cpc	r24, r18
 370:	91 05       	cpc	r25, r1
 372:	19 f1       	breq	.+70     	; 0x3ba <UART_INIT+0x114>
 374:	60 34       	cpi	r22, 0x40	; 64
 376:	22 e4       	ldi	r18, 0x42	; 66
 378:	72 07       	cpc	r23, r18
 37a:	2f e0       	ldi	r18, 0x0F	; 15
 37c:	82 07       	cpc	r24, r18
 37e:	91 05       	cpc	r25, r1
 380:	f1 f0       	breq	.+60     	; 0x3be <UART_INIT+0x118>
 382:	60 39       	cpi	r22, 0x90	; 144
 384:	70 4d       	sbci	r23, 0xD0	; 208
 386:	83 40       	sbci	r24, 0x03	; 3
 388:	91 05       	cpc	r25, r1
 38a:	d9 f4       	brne	.+54     	; 0x3c2 <UART_INIT+0x11c>
 38c:	14 c0       	rjmp	.+40     	; 0x3b6 <UART_INIT+0x110>
 38e:	20 ea       	ldi	r18, 0xA0	; 160
 390:	9f c0       	rjmp	.+318    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 392:	27 e6       	ldi	r18, 0x67	; 103
 394:	9d c0       	rjmp	.+314    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 396:	24 e4       	ldi	r18, 0x44	; 68
 398:	9b c0       	rjmp	.+310    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 39a:	23 e3       	ldi	r18, 0x33	; 51
 39c:	99 c0       	rjmp	.+306    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 39e:	22 e2       	ldi	r18, 0x22	; 34
 3a0:	97 c0       	rjmp	.+302    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3a2:	29 e1       	ldi	r18, 0x19	; 25
 3a4:	95 c0       	rjmp	.+298    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	93 c0       	rjmp	.+294    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3aa:	2c e0       	ldi	r18, 0x0C	; 12
 3ac:	91 c0       	rjmp	.+290    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3ae:	28 e0       	ldi	r18, 0x08	; 8
 3b0:	8f c0       	rjmp	.+286    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3b2:	23 e0       	ldi	r18, 0x03	; 3
 3b4:	8d c0       	rjmp	.+282    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3b6:	23 e0       	ldi	r18, 0x03	; 3
 3b8:	8b c0       	rjmp	.+278    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	87 c0       	rjmp	.+270    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3c2:	27 e6       	ldi	r18, 0x67	; 103
 3c4:	85 c0       	rjmp	.+266    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3c6:	42 30       	cpi	r20, 0x02	; 2
 3c8:	09 f0       	breq	.+2      	; 0x3cc <UART_INIT+0x126>
 3ca:	82 c0       	rjmp	.+260    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3cc:	61 15       	cp	r22, r1
 3ce:	26 e9       	ldi	r18, 0x96	; 150
 3d0:	72 07       	cpc	r23, r18
 3d2:	81 05       	cpc	r24, r1
 3d4:	91 05       	cpc	r25, r1
 3d6:	09 f4       	brne	.+2      	; 0x3da <UART_INIT+0x134>
 3d8:	66 c0       	rjmp	.+204    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 3da:	58 f5       	brcc	.+86     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3dc:	60 38       	cpi	r22, 0x80	; 128
 3de:	25 e2       	ldi	r18, 0x25	; 37
 3e0:	72 07       	cpc	r23, r18
 3e2:	81 05       	cpc	r24, r1
 3e4:	91 05       	cpc	r25, r1
 3e6:	09 f4       	brne	.+2      	; 0x3ea <UART_INIT+0x144>
 3e8:	56 c0       	rjmp	.+172    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 3ea:	70 f4       	brcc	.+28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ec:	60 36       	cpi	r22, 0x60	; 96
 3ee:	29 e0       	ldi	r18, 0x09	; 9
 3f0:	72 07       	cpc	r23, r18
 3f2:	81 05       	cpc	r24, r1
 3f4:	91 05       	cpc	r25, r1
 3f6:	09 f4       	brne	.+2      	; 0x3fa <UART_INIT+0x154>
 3f8:	4c c0       	rjmp	.+152    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 3fa:	60 3c       	cpi	r22, 0xC0	; 192
 3fc:	72 41       	sbci	r23, 0x12	; 18
 3fe:	81 05       	cpc	r24, r1
 400:	91 05       	cpc	r25, r1
 402:	09 f4       	brne	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	64 c0       	rjmp	.+200    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 406:	5f c0       	rjmp	.+190    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 408:	61 15       	cp	r22, r1
 40a:	2b e4       	ldi	r18, 0x4B	; 75
 40c:	72 07       	cpc	r23, r18
 40e:	81 05       	cpc	r24, r1
 410:	91 05       	cpc	r25, r1
 412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	44 c0       	rjmp	.+136    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 416:	60 38       	cpi	r22, 0x80	; 128
 418:	20 e7       	ldi	r18, 0x70	; 112
 41a:	72 07       	cpc	r23, r18
 41c:	81 05       	cpc	r24, r1
 41e:	91 05       	cpc	r25, r1
 420:	09 f4       	brne	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	3f c0       	rjmp	.+126    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 424:	60 34       	cpi	r22, 0x40	; 64
 426:	78 43       	sbci	r23, 0x38	; 56
 428:	81 05       	cpc	r24, r1
 42a:	91 05       	cpc	r25, r1
 42c:	09 f0       	breq	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42e:	4b c0       	rjmp	.+150    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 430:	34 c0       	rjmp	.+104    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 432:	61 15       	cp	r22, r1
 434:	24 e8       	ldi	r18, 0x84	; 132
 436:	72 07       	cpc	r23, r18
 438:	23 e0       	ldi	r18, 0x03	; 3
 43a:	82 07       	cpc	r24, r18
 43c:	91 05       	cpc	r25, r1
 43e:	d9 f1       	breq	.+118    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 440:	a0 f4       	brcc	.+40     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 442:	61 15       	cp	r22, r1
 444:	2c e2       	ldi	r18, 0x2C	; 44
 446:	72 07       	cpc	r23, r18
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	82 07       	cpc	r24, r18
 44c:	91 05       	cpc	r25, r1
 44e:	79 f1       	breq	.+94     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 450:	61 15       	cp	r22, r1
 452:	22 ec       	ldi	r18, 0xC2	; 194
 454:	72 07       	cpc	r23, r18
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	82 07       	cpc	r24, r18
 45a:	91 05       	cpc	r25, r1
 45c:	51 f1       	breq	.+84     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 45e:	61 15       	cp	r22, r1
 460:	71 4e       	sbci	r23, 0xE1	; 225
 462:	81 05       	cpc	r24, r1
 464:	91 05       	cpc	r25, r1
 466:	79 f5       	brne	.+94     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 468:	20 c0       	rjmp	.+64     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 46a:	60 32       	cpi	r22, 0x20	; 32
 46c:	21 ea       	ldi	r18, 0xA1	; 161
 46e:	72 07       	cpc	r23, r18
 470:	27 e0       	ldi	r18, 0x07	; 7
 472:	82 07       	cpc	r24, r18
 474:	91 05       	cpc	r25, r1
 476:	19 f1       	breq	.+70     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 478:	60 34       	cpi	r22, 0x40	; 64
 47a:	22 e4       	ldi	r18, 0x42	; 66
 47c:	72 07       	cpc	r23, r18
 47e:	2f e0       	ldi	r18, 0x0F	; 15
 480:	82 07       	cpc	r24, r18
 482:	91 05       	cpc	r25, r1
 484:	f1 f0       	breq	.+60     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 486:	60 39       	cpi	r22, 0x90	; 144
 488:	70 4d       	sbci	r23, 0xD0	; 208
 48a:	83 40       	sbci	r24, 0x03	; 3
 48c:	91 05       	cpc	r25, r1
 48e:	d9 f4       	brne	.+54     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 490:	14 c0       	rjmp	.+40     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 492:	20 e4       	ldi	r18, 0x40	; 64
 494:	1d c0       	rjmp	.+58     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 496:	2f ec       	ldi	r18, 0xCF	; 207
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 49a:	2a e8       	ldi	r18, 0x8A	; 138
 49c:	19 c0       	rjmp	.+50     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 49e:	27 e6       	ldi	r18, 0x67	; 103
 4a0:	17 c0       	rjmp	.+46     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4a2:	24 e4       	ldi	r18, 0x44	; 68
 4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4a6:	23 e3       	ldi	r18, 0x33	; 51
 4a8:	13 c0       	rjmp	.+38     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4aa:	22 e2       	ldi	r18, 0x22	; 34
 4ac:	11 c0       	rjmp	.+34     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ae:	29 e1       	ldi	r18, 0x19	; 25
 4b0:	0f c0       	rjmp	.+30     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4b2:	20 e1       	ldi	r18, 0x10	; 16
 4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4b6:	28 e0       	ldi	r18, 0x08	; 8
 4b8:	0b c0       	rjmp	.+22     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ba:	27 e0       	ldi	r18, 0x07	; 7
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4be:	23 e0       	ldi	r18, 0x03	; 3
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c6:	2f ec       	ldi	r18, 0xCF	; 207
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ca:	2f ec       	ldi	r18, 0xCF	; 207
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ce:	20 ea       	ldi	r18, 0xA0	; 160
 4d0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 4d4:	e2 ec       	ldi	r30, 0xC2	; 194
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	86 60       	ori	r24, 0x06	; 6
 4dc:	80 83       	st	Z, r24
 4de:	e1 ec       	ldi	r30, 0xC1	; 193
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	80 61       	ori	r24, 0x10	; 16
 4e6:	80 83       	st	Z, r24
 4e8:	80 81       	ld	r24, Z
 4ea:	88 60       	ori	r24, 0x08	; 8
 4ec:	80 83       	st	Z, r24
 4ee:	08 95       	ret

000004f0 <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR0A & (1 << UDRE0)));
 4f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4f4:	95 ff       	sbrs	r25, 5
 4f6:	fc cf       	rjmp	.-8      	; 0x4f0 <UART_transmit>
	UDR0 = data;
 4f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4fc:	08 95       	ret

000004fe <UART_printString>:
}

void UART_printString(char *str) {
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++) {
 508:	c0 e0       	ldi	r28, 0x00	; 0
 50a:	d0 e0       	ldi	r29, 0x00	; 0
 50c:	03 c0       	rjmp	.+6      	; 0x514 <UART_printString+0x16>
		UART_transmit(str[i]);
 50e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <UART_transmit>
	while ( !(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void UART_printString(char *str) {
	for (int i = 0; str[i]; i++) {
 512:	21 96       	adiw	r28, 0x01	; 1
 514:	f8 01       	movw	r30, r16
 516:	ec 0f       	add	r30, r28
 518:	fd 1f       	adc	r31, r29
 51a:	80 81       	ld	r24, Z
 51c:	81 11       	cpse	r24, r1
 51e:	f7 cf       	rjmp	.-18     	; 0x50e <UART_printString+0x10>
		UART_transmit(str[i]);
	}
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no) {
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	00 d0       	rcall	.+0      	; 0x534 <UART_print8bitNumber+0xa>
 534:	00 d0       	rcall	.+0      	; 0x536 <UART_print8bitNumber+0xc>
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 53a:	20 e3       	ldi	r18, 0x30	; 48
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	3a 83       	std	Y+2, r19	; 0x02
 540:	29 83       	std	Y+1, r18	; 0x01
 542:	1c 82       	std	Y+4, r1	; 0x04
 544:	1b 82       	std	Y+3, r1	; 0x03
	int i, index = 0;

	if (no > 0) {
 546:	81 11       	cpse	r24, r1
 548:	1d c0       	rjmp	.+58     	; 0x584 <UART_print8bitNumber+0x5a>
	}
}

void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;
 54a:	00 e0       	ldi	r16, 0x00	; 0
 54c:	10 e0       	ldi	r17, 0x00	; 0
 54e:	33 c0       	rjmp	.+102    	; 0x5b6 <UART_print8bitNumber+0x8c>

	if (no > 0) {
		for (i = 0; no != 0; i++ ) {
			numString[i] = no % 10 + '0';
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ec 0f       	add	r30, r28
 556:	fd 1f       	adc	r31, r29
 558:	e0 0f       	add	r30, r16
 55a:	f1 1f       	adc	r31, r17
 55c:	9d ec       	ldi	r25, 0xCD	; 205
 55e:	89 9f       	mul	r24, r25
 560:	91 2d       	mov	r25, r1
 562:	11 24       	eor	r1, r1
 564:	96 95       	lsr	r25
 566:	96 95       	lsr	r25
 568:	96 95       	lsr	r25
 56a:	39 2f       	mov	r19, r25
 56c:	33 0f       	add	r19, r19
 56e:	23 2f       	mov	r18, r19
 570:	22 0f       	add	r18, r18
 572:	22 0f       	add	r18, r18
 574:	23 0f       	add	r18, r19
 576:	82 1b       	sub	r24, r18
 578:	80 5d       	subi	r24, 0xD0	; 208
 57a:	80 83       	st	Z, r24
			no = no / 10;
 57c:	89 2f       	mov	r24, r25
void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;

	if (no > 0) {
		for (i = 0; no != 0; i++ ) {
 57e:	0f 5f       	subi	r16, 0xFF	; 255
 580:	1f 4f       	sbci	r17, 0xFF	; 255
 582:	02 c0       	rjmp	.+4      	; 0x588 <UART_print8bitNumber+0x5e>
 584:	00 e0       	ldi	r16, 0x00	; 0
 586:	10 e0       	ldi	r17, 0x00	; 0
 588:	81 11       	cpse	r24, r1
 58a:	e2 cf       	rjmp	.-60     	; 0x550 <UART_print8bitNumber+0x26>
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 58c:	e1 e0       	ldi	r30, 0x01	; 1
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ec 0f       	add	r30, r28
 592:	fd 1f       	adc	r31, r29
 594:	e0 0f       	add	r30, r16
 596:	f1 1f       	adc	r31, r17
 598:	10 82       	st	Z, r1
		index = i - 1;
 59a:	01 50       	subi	r16, 0x01	; 1
 59c:	11 09       	sbc	r17, r1
 59e:	0b c0       	rjmp	.+22     	; 0x5b6 <UART_print8bitNumber+0x8c>
	}

	for (i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	ec 0f       	add	r30, r28
 5a6:	fd 1f       	adc	r31, r29
 5a8:	e0 0f       	add	r30, r16
 5aa:	f1 1f       	adc	r31, r17
 5ac:	80 81       	ld	r24, Z
 5ae:	0e 94 78 02 	call	0x4f0	; 0x4f0 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}

	for (i = index; i >= 0; i--) {
 5b2:	01 50       	subi	r16, 0x01	; 1
 5b4:	11 09       	sbc	r17, r1
 5b6:	11 23       	and	r17, r17
 5b8:	9c f7       	brge	.-26     	; 0x5a0 <UART_print8bitNumber+0x76>
		UART_transmit(numString[i]);
	}
}
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
