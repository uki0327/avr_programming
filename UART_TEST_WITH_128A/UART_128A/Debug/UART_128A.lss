
UART_128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002b8  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011d0  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ef  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8e  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000617  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e9b  00000000  00000000  00003507  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	ff c0       	rjmp	.+510    	; 0x2b4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "UART_128A_USE_1.h"

int main(void) {
	UART_INIT(9600,2);
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	60 e8       	ldi	r22, 0x80	; 128
  bc:	75 e2       	ldi	r23, 0x25	; 37
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	15 d0       	rcall	.+42     	; 0xee <UART_INIT>
	UART_printString("Hello there~!\n");
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	4f d0       	rcall	.+158    	; 0x168 <UART_printString>
	
	int i = 0;
  ca:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(1){
		UART_print8bitNumber(i);
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	8c 2f       	mov	r24, r28
		UART_printString(": Hello there~!\n");
  d0:	60 d0       	rcall	.+192    	; 0x192 <UART_print8bitNumber>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	48 d0       	rcall	.+144    	; 0x168 <UART_printString>
		i++;
  d8:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x32>
  ea:	00 00       	nop
  ec:	f0 cf       	rjmp	.-32     	; 0xce <main+0x16>

000000ee <UART_INIT>:
}

unsigned char UART_receive(void) {
	while ( !(UCSR1A & (1 << RXC0)));
	return UDR1;
}
  ee:	42 30       	cpi	r20, 0x02	; 2
  f0:	31 f4       	brne	.+12     	; 0xfe <UART_INIT+0x10>
  f2:	eb e9       	ldi	r30, 0x9B	; 155
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	20 81       	ld	r18, Z
  f8:	22 60       	ori	r18, 0x02	; 2
  fa:	20 83       	st	Z, r18
  fc:	04 c0       	rjmp	.+8      	; 0x106 <UART_INIT+0x18>
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	11 f4       	brne	.+4      	; 0x106 <UART_INIT+0x18>
 102:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 106:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	29 f0       	breq	.+10     	; 0x118 <UART_INIT+0x2a>
 10e:	42 30       	cpi	r20, 0x02	; 2
 110:	31 f4       	brne	.+12     	; 0x11e <UART_INIT+0x30>
 112:	a8 e0       	ldi	r26, 0x08	; 8
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	05 c0       	rjmp	.+10     	; 0x122 <UART_INIT+0x34>
 118:	a0 e1       	ldi	r26, 0x10	; 16
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <UART_INIT+0x34>
 11e:	a2 e0       	ldi	r26, 0x02	; 2
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	9b 01       	movw	r18, r22
 124:	ac 01       	movw	r20, r24
 126:	b6 d0       	rcall	.+364    	; 0x294 <__mulshisi3>
 128:	9b 01       	movw	r18, r22
 12a:	ac 01       	movw	r20, r24
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	74 e2       	ldi	r23, 0x24	; 36
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	7e d0       	rcall	.+252    	; 0x232 <__udivmodsi4>
 136:	21 50       	subi	r18, 0x01	; 1
 138:	31 09       	sbc	r19, r1
 13a:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13e:	ed e9       	ldi	r30, 0x9D	; 157
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 60       	ori	r24, 0x06	; 6
 146:	80 83       	st	Z, r24
 148:	ea e9       	ldi	r30, 0x9A	; 154
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	80 83       	st	Z, r24
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR1A & (1 << UDRE0)));
 15a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 15e:	95 ff       	sbrs	r25, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <UART_transmit>
	UDR1 = data;
 162:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 166:	08 95       	ret

00000168 <UART_printString>:
}

void UART_printString(char *str) {
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++) {
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <UART_printString+0x14>
		UART_transmit(str[i]);
 178:	f0 df       	rcall	.-32     	; 0x15a <UART_transmit>
	while ( !(UCSR1A & (1 << UDRE0)));
	UDR1 = data;
}

void UART_printString(char *str) {
	for (int i = 0; str[i]; i++) {
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	f8 01       	movw	r30, r16
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	80 81       	ld	r24, Z
 184:	81 11       	cpse	r24, r1
 186:	f8 cf       	rjmp	.-16     	; 0x178 <UART_printString+0x10>
		UART_transmit(str[i]);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no) {
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <UART_print8bitNumber+0xa>
 19c:	00 d0       	rcall	.+0      	; 0x19e <UART_print8bitNumber+0xc>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 1a2:	20 e3       	ldi	r18, 0x30	; 48
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	3a 83       	std	Y+2, r19	; 0x02
 1a8:	29 83       	std	Y+1, r18	; 0x01
 1aa:	1c 82       	std	Y+4, r1	; 0x04
 1ac:	1b 82       	std	Y+3, r1	; 0x03
	int i, index = 0;

	if (no > 0) {
 1ae:	81 11       	cpse	r24, r1
 1b0:	1d c0       	rjmp	.+58     	; 0x1ec <UART_print8bitNumber+0x5a>
	}
}

void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	32 c0       	rjmp	.+100    	; 0x21c <UART_print8bitNumber+0x8a>

	if (no > 0) {
		for (i = 0; no != 0; i++ ) {
			numString[i] = no % 10 + '0';
 1b8:	e1 e0       	ldi	r30, 0x01	; 1
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ec 0f       	add	r30, r28
 1be:	fd 1f       	adc	r31, r29
 1c0:	e0 0f       	add	r30, r16
 1c2:	f1 1f       	adc	r31, r17
 1c4:	9d ec       	ldi	r25, 0xCD	; 205
 1c6:	89 9f       	mul	r24, r25
 1c8:	91 2d       	mov	r25, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	96 95       	lsr	r25
 1ce:	96 95       	lsr	r25
 1d0:	96 95       	lsr	r25
 1d2:	39 2f       	mov	r19, r25
 1d4:	33 0f       	add	r19, r19
 1d6:	23 2f       	mov	r18, r19
 1d8:	22 0f       	add	r18, r18
 1da:	22 0f       	add	r18, r18
 1dc:	23 0f       	add	r18, r19
 1de:	82 1b       	sub	r24, r18
 1e0:	80 5d       	subi	r24, 0xD0	; 208
 1e2:	80 83       	st	Z, r24
			no = no / 10;
 1e4:	89 2f       	mov	r24, r25
void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;

	if (no > 0) {
		for (i = 0; no != 0; i++ ) {
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <UART_print8bitNumber+0x5e>
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	81 11       	cpse	r24, r1
 1f2:	e2 cf       	rjmp	.-60     	; 0x1b8 <UART_print8bitNumber+0x26>
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 1f4:	e1 e0       	ldi	r30, 0x01	; 1
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	e0 0f       	add	r30, r16
 1fe:	f1 1f       	adc	r31, r17
 200:	10 82       	st	Z, r1
		index = i - 1;
 202:	01 50       	subi	r16, 0x01	; 1
 204:	11 09       	sbc	r17, r1
 206:	0a c0       	rjmp	.+20     	; 0x21c <UART_print8bitNumber+0x8a>
	}

	for (i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
 208:	e1 e0       	ldi	r30, 0x01	; 1
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	e0 0f       	add	r30, r16
 212:	f1 1f       	adc	r31, r17
 214:	80 81       	ld	r24, Z
 216:	a1 df       	rcall	.-190    	; 0x15a <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}

	for (i = index; i >= 0; i--) {
 218:	01 50       	subi	r16, 0x01	; 1
 21a:	11 09       	sbc	r17, r1
 21c:	11 23       	and	r17, r17
 21e:	a4 f7       	brge	.-24     	; 0x208 <UART_print8bitNumber+0x76>
		UART_transmit(numString[i]);
	}
}
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <__udivmodsi4>:
 232:	a1 e2       	ldi	r26, 0x21	; 33
 234:	1a 2e       	mov	r1, r26
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	fd 01       	movw	r30, r26
 23c:	0d c0       	rjmp	.+26     	; 0x258 <__udivmodsi4_ep>

0000023e <__udivmodsi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	ee 1f       	adc	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	a2 17       	cp	r26, r18
 248:	b3 07       	cpc	r27, r19
 24a:	e4 07       	cpc	r30, r20
 24c:	f5 07       	cpc	r31, r21
 24e:	20 f0       	brcs	.+8      	; 0x258 <__udivmodsi4_ep>
 250:	a2 1b       	sub	r26, r18
 252:	b3 0b       	sbc	r27, r19
 254:	e4 0b       	sbc	r30, r20
 256:	f5 0b       	sbc	r31, r21

00000258 <__udivmodsi4_ep>:
 258:	66 1f       	adc	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	88 1f       	adc	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	1a 94       	dec	r1
 262:	69 f7       	brne	.-38     	; 0x23e <__udivmodsi4_loop>
 264:	60 95       	com	r22
 266:	70 95       	com	r23
 268:	80 95       	com	r24
 26a:	90 95       	com	r25
 26c:	9b 01       	movw	r18, r22
 26e:	ac 01       	movw	r20, r24
 270:	bd 01       	movw	r22, r26
 272:	cf 01       	movw	r24, r30
 274:	08 95       	ret

00000276 <__umulhisi3>:
 276:	a2 9f       	mul	r26, r18
 278:	b0 01       	movw	r22, r0
 27a:	b3 9f       	mul	r27, r19
 27c:	c0 01       	movw	r24, r0
 27e:	a3 9f       	mul	r26, r19
 280:	70 0d       	add	r23, r0
 282:	81 1d       	adc	r24, r1
 284:	11 24       	eor	r1, r1
 286:	91 1d       	adc	r25, r1
 288:	b2 9f       	mul	r27, r18
 28a:	70 0d       	add	r23, r0
 28c:	81 1d       	adc	r24, r1
 28e:	11 24       	eor	r1, r1
 290:	91 1d       	adc	r25, r1
 292:	08 95       	ret

00000294 <__mulshisi3>:
 294:	b7 ff       	sbrs	r27, 7
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <__muluhisi3>

00000298 <__mulohisi3>:
 298:	03 d0       	rcall	.+6      	; 0x2a0 <__muluhisi3>
 29a:	82 1b       	sub	r24, r18
 29c:	93 0b       	sbc	r25, r19
 29e:	08 95       	ret

000002a0 <__muluhisi3>:
 2a0:	ea df       	rcall	.-44     	; 0x276 <__umulhisi3>
 2a2:	a5 9f       	mul	r26, r21
 2a4:	90 0d       	add	r25, r0
 2a6:	b4 9f       	mul	r27, r20
 2a8:	90 0d       	add	r25, r0
 2aa:	a4 9f       	mul	r26, r20
 2ac:	80 0d       	add	r24, r0
 2ae:	91 1d       	adc	r25, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
