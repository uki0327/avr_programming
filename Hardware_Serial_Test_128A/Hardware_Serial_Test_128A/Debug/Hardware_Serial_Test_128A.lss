
Hardware_Serial_Test_128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000111f  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000955  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b75  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e8  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f64  00000000  00000000  000033bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00004320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	3d c1       	rjmp	.+634    	; 0x330 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

int main(void)
{
	unsigned char data;
	
	UART_INIT(9600,2);
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	60 e8       	ldi	r22, 0x80	; 128
  bc:	75 e2       	ldi	r23, 0x25	; 37
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	03 d0       	rcall	.+6      	; 0xca <UART_INIT>
	
    while (1) 
    {
		data = UART_receive();
  c4:	27 d1       	rcall	.+590    	; 0x314 <UART_receive>
		UART_transmit(data);
  c6:	2d d1       	rcall	.+602    	; 0x322 <UART_transmit>
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <main+0xc>

000000ca <UART_INIT>:
  ca:	42 30       	cpi	r20, 0x02	; 2
#include <avr/io.h>
#include "UART_USE_1.h"


void UART_INIT(unsigned long boud, char x) {
	if (x == 2) UCSR1A |= _BV(U2X0); // 비동기 2배속 모드
  cc:	31 f4       	brne	.+12     	; 0xda <UART_INIT+0x10>
  ce:	eb e9       	ldi	r30, 0x9B	; 155
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	30 81       	ld	r19, Z
  d4:	32 60       	ori	r19, 0x02	; 2
  d6:	30 83       	st	Z, r19
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <UART_INIT+0x18>
	else if (x == 1) UCSR1A = 0x00;
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	11 f4       	brne	.+4      	; 0xe2 <UART_INIT+0x18>
  de:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	
	UBRR1H = 0x00;
  e2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	b = F_CPU / (xFactor * boud) - 1 + 0.5; // 반올림을 위해 +0.5 적용한 계산
	int UBRRnL_Value = (int)b; // 소수점 이하 자리 버림 (반올림) */
	
	// UBRRnL 수식계산 결과값 오차 발생으로 하드코딩
	int UBRRnL_Value;
	if(x == 1) {
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	09 f0       	breq	.+2      	; 0xec <UART_INIT+0x22>
  ea:	7f c0       	rjmp	.+254    	; 0x1ea <UART_INIT+0x120>
		switch(boud) {
  ec:	61 15       	cp	r22, r1
  ee:	26 e9       	ldi	r18, 0x96	; 150
  f0:	72 07       	cpc	r23, r18
  f2:	81 05       	cpc	r24, r1
  f4:	91 05       	cpc	r25, r1
  f6:	09 f4       	brne	.+2      	; 0xfa <UART_INIT+0x30>
  f8:	66 c0       	rjmp	.+204    	; 0x1c6 <UART_INIT+0xfc>
  fa:	58 f5       	brcc	.+86     	; 0x152 <UART_INIT+0x88>
  fc:	60 38       	cpi	r22, 0x80	; 128
  fe:	25 e2       	ldi	r18, 0x25	; 37
 100:	72 07       	cpc	r23, r18
 102:	81 05       	cpc	r24, r1
 104:	91 05       	cpc	r25, r1
 106:	09 f4       	brne	.+2      	; 0x10a <UART_INIT+0x40>
 108:	56 c0       	rjmp	.+172    	; 0x1b6 <UART_INIT+0xec>
 10a:	70 f4       	brcc	.+28     	; 0x128 <UART_INIT+0x5e>
 10c:	60 36       	cpi	r22, 0x60	; 96
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	72 07       	cpc	r23, r18
 112:	81 05       	cpc	r24, r1
 114:	91 05       	cpc	r25, r1
 116:	09 f4       	brne	.+2      	; 0x11a <UART_INIT+0x50>
 118:	4c c0       	rjmp	.+152    	; 0x1b2 <UART_INIT+0xe8>
 11a:	60 3c       	cpi	r22, 0xC0	; 192
 11c:	72 41       	sbci	r23, 0x12	; 18
 11e:	81 05       	cpc	r24, r1
 120:	91 05       	cpc	r25, r1
 122:	09 f4       	brne	.+2      	; 0x126 <UART_INIT+0x5c>
 124:	e4 c0       	rjmp	.+456    	; 0x2ee <UART_INIT+0x224>
 126:	5f c0       	rjmp	.+190    	; 0x1e6 <UART_INIT+0x11c>
 128:	61 15       	cp	r22, r1
 12a:	2b e4       	ldi	r18, 0x4B	; 75
 12c:	72 07       	cpc	r23, r18
 12e:	81 05       	cpc	r24, r1
 130:	91 05       	cpc	r25, r1
 132:	09 f4       	brne	.+2      	; 0x136 <UART_INIT+0x6c>
 134:	44 c0       	rjmp	.+136    	; 0x1be <UART_INIT+0xf4>
 136:	60 38       	cpi	r22, 0x80	; 128
 138:	20 e7       	ldi	r18, 0x70	; 112
 13a:	72 07       	cpc	r23, r18
 13c:	81 05       	cpc	r24, r1
 13e:	91 05       	cpc	r25, r1
 140:	09 f4       	brne	.+2      	; 0x144 <UART_INIT+0x7a>
 142:	3f c0       	rjmp	.+126    	; 0x1c2 <UART_INIT+0xf8>
 144:	60 34       	cpi	r22, 0x40	; 64
 146:	78 43       	sbci	r23, 0x38	; 56
 148:	81 05       	cpc	r24, r1
 14a:	91 05       	cpc	r25, r1
 14c:	09 f0       	breq	.+2      	; 0x150 <UART_INIT+0x86>
 14e:	4b c0       	rjmp	.+150    	; 0x1e6 <UART_INIT+0x11c>
 150:	34 c0       	rjmp	.+104    	; 0x1ba <UART_INIT+0xf0>
 152:	61 15       	cp	r22, r1
 154:	24 e8       	ldi	r18, 0x84	; 132
 156:	72 07       	cpc	r23, r18
 158:	23 e0       	ldi	r18, 0x03	; 3
 15a:	82 07       	cpc	r24, r18
 15c:	91 05       	cpc	r25, r1
 15e:	d9 f1       	breq	.+118    	; 0x1d6 <UART_INIT+0x10c>
 160:	a0 f4       	brcc	.+40     	; 0x18a <UART_INIT+0xc0>
 162:	61 15       	cp	r22, r1
 164:	2c e2       	ldi	r18, 0x2C	; 44
 166:	72 07       	cpc	r23, r18
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	82 07       	cpc	r24, r18
 16c:	91 05       	cpc	r25, r1
 16e:	79 f1       	breq	.+94     	; 0x1ce <UART_INIT+0x104>
 170:	61 15       	cp	r22, r1
 172:	22 ec       	ldi	r18, 0xC2	; 194
 174:	72 07       	cpc	r23, r18
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	82 07       	cpc	r24, r18
 17a:	91 05       	cpc	r25, r1
 17c:	51 f1       	breq	.+84     	; 0x1d2 <UART_INIT+0x108>
 17e:	61 15       	cp	r22, r1
 180:	71 4e       	sbci	r23, 0xE1	; 225
 182:	81 05       	cpc	r24, r1
 184:	91 05       	cpc	r25, r1
 186:	79 f5       	brne	.+94     	; 0x1e6 <UART_INIT+0x11c>
 188:	20 c0       	rjmp	.+64     	; 0x1ca <UART_INIT+0x100>
 18a:	60 32       	cpi	r22, 0x20	; 32
 18c:	21 ea       	ldi	r18, 0xA1	; 161
 18e:	72 07       	cpc	r23, r18
 190:	27 e0       	ldi	r18, 0x07	; 7
 192:	82 07       	cpc	r24, r18
 194:	91 05       	cpc	r25, r1
 196:	19 f1       	breq	.+70     	; 0x1de <UART_INIT+0x114>
 198:	60 34       	cpi	r22, 0x40	; 64
 19a:	22 e4       	ldi	r18, 0x42	; 66
 19c:	72 07       	cpc	r23, r18
 19e:	2f e0       	ldi	r18, 0x0F	; 15
 1a0:	82 07       	cpc	r24, r18
 1a2:	91 05       	cpc	r25, r1
 1a4:	f1 f0       	breq	.+60     	; 0x1e2 <UART_INIT+0x118>
 1a6:	60 39       	cpi	r22, 0x90	; 144
 1a8:	70 4d       	sbci	r23, 0xD0	; 208
 1aa:	83 40       	sbci	r24, 0x03	; 3
 1ac:	91 05       	cpc	r25, r1
 1ae:	d9 f4       	brne	.+54     	; 0x1e6 <UART_INIT+0x11c>
 1b0:	14 c0       	rjmp	.+40     	; 0x1da <UART_INIT+0x110>
			case 2400:		UBRRnL_Value =  416;	break;
 1b2:	20 ea       	ldi	r18, 0xA0	; 160
 1b4:	9f c0       	rjmp	.+318    	; 0x2f4 <UART_INIT+0x22a>
			case 4800:		UBRRnL_Value =  207;	break;
			case 9600:		UBRRnL_Value =  103;	break;
 1b6:	27 e6       	ldi	r18, 0x67	; 103
 1b8:	9d c0       	rjmp	.+314    	; 0x2f4 <UART_INIT+0x22a>
			case 14400:		UBRRnL_Value =  68;		break;
 1ba:	24 e4       	ldi	r18, 0x44	; 68
 1bc:	9b c0       	rjmp	.+310    	; 0x2f4 <UART_INIT+0x22a>
			case 19200:		UBRRnL_Value =  51;		break;
 1be:	23 e3       	ldi	r18, 0x33	; 51
 1c0:	99 c0       	rjmp	.+306    	; 0x2f4 <UART_INIT+0x22a>
			case 28800:		UBRRnL_Value =  34;		break;
 1c2:	22 e2       	ldi	r18, 0x22	; 34
 1c4:	97 c0       	rjmp	.+302    	; 0x2f4 <UART_INIT+0x22a>
			case 38400:		UBRRnL_Value =  25;		break;
 1c6:	29 e1       	ldi	r18, 0x19	; 25
 1c8:	95 c0       	rjmp	.+298    	; 0x2f4 <UART_INIT+0x22a>
			case 57600:		UBRRnL_Value =  16;		break;
 1ca:	20 e1       	ldi	r18, 0x10	; 16
 1cc:	93 c0       	rjmp	.+294    	; 0x2f4 <UART_INIT+0x22a>
			case 76800:		UBRRnL_Value =  12;		break;
 1ce:	2c e0       	ldi	r18, 0x0C	; 12
 1d0:	91 c0       	rjmp	.+290    	; 0x2f4 <UART_INIT+0x22a>
			case 115200:	UBRRnL_Value =  8;		break;
 1d2:	28 e0       	ldi	r18, 0x08	; 8
 1d4:	8f c0       	rjmp	.+286    	; 0x2f4 <UART_INIT+0x22a>
			case 230400:	UBRRnL_Value =  3;		break;
 1d6:	23 e0       	ldi	r18, 0x03	; 3
 1d8:	8d c0       	rjmp	.+282    	; 0x2f4 <UART_INIT+0x22a>
			case 250000:	UBRRnL_Value =  3;		break;
 1da:	23 e0       	ldi	r18, 0x03	; 3
 1dc:	8b c0       	rjmp	.+278    	; 0x2f4 <UART_INIT+0x22a>
			case 500000:	UBRRnL_Value =  1;		break;
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	89 c0       	rjmp	.+274    	; 0x2f4 <UART_INIT+0x22a>
			case 1000000:	UBRRnL_Value =  0;		break;
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	87 c0       	rjmp	.+270    	; 0x2f4 <UART_INIT+0x22a>
			default:		UBRRnL_Value =  103;	break;
 1e6:	27 e6       	ldi	r18, 0x67	; 103
 1e8:	85 c0       	rjmp	.+266    	; 0x2f4 <UART_INIT+0x22a>
		}
	} else if(x == 2) {
 1ea:	42 30       	cpi	r20, 0x02	; 2
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <UART_INIT+0x126>
 1ee:	82 c0       	rjmp	.+260    	; 0x2f4 <UART_INIT+0x22a>
		switch(boud) {
 1f0:	61 15       	cp	r22, r1
 1f2:	26 e9       	ldi	r18, 0x96	; 150
 1f4:	72 07       	cpc	r23, r18
 1f6:	81 05       	cpc	r24, r1
 1f8:	91 05       	cpc	r25, r1
 1fa:	09 f4       	brne	.+2      	; 0x1fe <UART_INIT+0x134>
 1fc:	66 c0       	rjmp	.+204    	; 0x2ca <UART_INIT+0x200>
 1fe:	58 f5       	brcc	.+86     	; 0x256 <UART_INIT+0x18c>
 200:	60 38       	cpi	r22, 0x80	; 128
 202:	25 e2       	ldi	r18, 0x25	; 37
 204:	72 07       	cpc	r23, r18
 206:	81 05       	cpc	r24, r1
 208:	91 05       	cpc	r25, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <UART_INIT+0x144>
 20c:	56 c0       	rjmp	.+172    	; 0x2ba <UART_INIT+0x1f0>
 20e:	70 f4       	brcc	.+28     	; 0x22c <UART_INIT+0x162>
 210:	60 36       	cpi	r22, 0x60	; 96
 212:	29 e0       	ldi	r18, 0x09	; 9
 214:	72 07       	cpc	r23, r18
 216:	81 05       	cpc	r24, r1
 218:	91 05       	cpc	r25, r1
 21a:	09 f4       	brne	.+2      	; 0x21e <UART_INIT+0x154>
 21c:	4c c0       	rjmp	.+152    	; 0x2b6 <UART_INIT+0x1ec>
 21e:	60 3c       	cpi	r22, 0xC0	; 192
 220:	72 41       	sbci	r23, 0x12	; 18
 222:	81 05       	cpc	r24, r1
 224:	91 05       	cpc	r25, r1
 226:	09 f4       	brne	.+2      	; 0x22a <UART_INIT+0x160>
 228:	64 c0       	rjmp	.+200    	; 0x2f2 <UART_INIT+0x228>
 22a:	5f c0       	rjmp	.+190    	; 0x2ea <UART_INIT+0x220>
 22c:	61 15       	cp	r22, r1
 22e:	2b e4       	ldi	r18, 0x4B	; 75
 230:	72 07       	cpc	r23, r18
 232:	81 05       	cpc	r24, r1
 234:	91 05       	cpc	r25, r1
 236:	09 f4       	brne	.+2      	; 0x23a <UART_INIT+0x170>
 238:	44 c0       	rjmp	.+136    	; 0x2c2 <UART_INIT+0x1f8>
 23a:	60 38       	cpi	r22, 0x80	; 128
 23c:	20 e7       	ldi	r18, 0x70	; 112
 23e:	72 07       	cpc	r23, r18
 240:	81 05       	cpc	r24, r1
 242:	91 05       	cpc	r25, r1
 244:	09 f4       	brne	.+2      	; 0x248 <UART_INIT+0x17e>
 246:	3f c0       	rjmp	.+126    	; 0x2c6 <UART_INIT+0x1fc>
 248:	60 34       	cpi	r22, 0x40	; 64
 24a:	78 43       	sbci	r23, 0x38	; 56
 24c:	81 05       	cpc	r24, r1
 24e:	91 05       	cpc	r25, r1
 250:	09 f0       	breq	.+2      	; 0x254 <UART_INIT+0x18a>
 252:	4b c0       	rjmp	.+150    	; 0x2ea <UART_INIT+0x220>
 254:	34 c0       	rjmp	.+104    	; 0x2be <UART_INIT+0x1f4>
 256:	61 15       	cp	r22, r1
 258:	24 e8       	ldi	r18, 0x84	; 132
 25a:	72 07       	cpc	r23, r18
 25c:	23 e0       	ldi	r18, 0x03	; 3
 25e:	82 07       	cpc	r24, r18
 260:	91 05       	cpc	r25, r1
 262:	d9 f1       	breq	.+118    	; 0x2da <UART_INIT+0x210>
 264:	a0 f4       	brcc	.+40     	; 0x28e <UART_INIT+0x1c4>
 266:	61 15       	cp	r22, r1
 268:	2c e2       	ldi	r18, 0x2C	; 44
 26a:	72 07       	cpc	r23, r18
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	82 07       	cpc	r24, r18
 270:	91 05       	cpc	r25, r1
 272:	79 f1       	breq	.+94     	; 0x2d2 <UART_INIT+0x208>
 274:	61 15       	cp	r22, r1
 276:	22 ec       	ldi	r18, 0xC2	; 194
 278:	72 07       	cpc	r23, r18
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	82 07       	cpc	r24, r18
 27e:	91 05       	cpc	r25, r1
 280:	51 f1       	breq	.+84     	; 0x2d6 <UART_INIT+0x20c>
 282:	61 15       	cp	r22, r1
 284:	71 4e       	sbci	r23, 0xE1	; 225
 286:	81 05       	cpc	r24, r1
 288:	91 05       	cpc	r25, r1
 28a:	79 f5       	brne	.+94     	; 0x2ea <UART_INIT+0x220>
 28c:	20 c0       	rjmp	.+64     	; 0x2ce <UART_INIT+0x204>
 28e:	60 32       	cpi	r22, 0x20	; 32
 290:	21 ea       	ldi	r18, 0xA1	; 161
 292:	72 07       	cpc	r23, r18
 294:	27 e0       	ldi	r18, 0x07	; 7
 296:	82 07       	cpc	r24, r18
 298:	91 05       	cpc	r25, r1
 29a:	19 f1       	breq	.+70     	; 0x2e2 <UART_INIT+0x218>
 29c:	60 34       	cpi	r22, 0x40	; 64
 29e:	22 e4       	ldi	r18, 0x42	; 66
 2a0:	72 07       	cpc	r23, r18
 2a2:	2f e0       	ldi	r18, 0x0F	; 15
 2a4:	82 07       	cpc	r24, r18
 2a6:	91 05       	cpc	r25, r1
 2a8:	f1 f0       	breq	.+60     	; 0x2e6 <UART_INIT+0x21c>
 2aa:	60 39       	cpi	r22, 0x90	; 144
 2ac:	70 4d       	sbci	r23, 0xD0	; 208
 2ae:	83 40       	sbci	r24, 0x03	; 3
 2b0:	91 05       	cpc	r25, r1
 2b2:	d9 f4       	brne	.+54     	; 0x2ea <UART_INIT+0x220>
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <UART_INIT+0x214>
			case 2400:		UBRRnL_Value =  832;	break;
 2b6:	20 e4       	ldi	r18, 0x40	; 64
 2b8:	1d c0       	rjmp	.+58     	; 0x2f4 <UART_INIT+0x22a>
			case 4800:		UBRRnL_Value =  416;	break;
			case 9600:		UBRRnL_Value =  207;	break;
 2ba:	2f ec       	ldi	r18, 0xCF	; 207
 2bc:	1b c0       	rjmp	.+54     	; 0x2f4 <UART_INIT+0x22a>
			case 14400:		UBRRnL_Value =  138;	break;
 2be:	2a e8       	ldi	r18, 0x8A	; 138
 2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <UART_INIT+0x22a>
			case 19200:		UBRRnL_Value =  103;	break;
 2c2:	27 e6       	ldi	r18, 0x67	; 103
 2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <UART_INIT+0x22a>
			case 28800:		UBRRnL_Value =  68;		break;
 2c6:	24 e4       	ldi	r18, 0x44	; 68
 2c8:	15 c0       	rjmp	.+42     	; 0x2f4 <UART_INIT+0x22a>
			case 38400:		UBRRnL_Value =  51;		break;
 2ca:	23 e3       	ldi	r18, 0x33	; 51
 2cc:	13 c0       	rjmp	.+38     	; 0x2f4 <UART_INIT+0x22a>
			case 57600:		UBRRnL_Value =  34;		break;
 2ce:	22 e2       	ldi	r18, 0x22	; 34
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <UART_INIT+0x22a>
			case 76800:		UBRRnL_Value =  25;		break;
 2d2:	29 e1       	ldi	r18, 0x19	; 25
 2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <UART_INIT+0x22a>
			case 115200:	UBRRnL_Value =  16;		break;
 2d6:	20 e1       	ldi	r18, 0x10	; 16
 2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <UART_INIT+0x22a>
			case 230400:	UBRRnL_Value =  8;		break;
 2da:	28 e0       	ldi	r18, 0x08	; 8
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <UART_INIT+0x22a>
			case 250000:	UBRRnL_Value =  7;		break;
 2de:	27 e0       	ldi	r18, 0x07	; 7
 2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <UART_INIT+0x22a>
			case 500000:	UBRRnL_Value =  3;		break;
 2e2:	23 e0       	ldi	r18, 0x03	; 3
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <UART_INIT+0x22a>
			case 1000000:	UBRRnL_Value =  1;		break;
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <UART_INIT+0x22a>
			default:		UBRRnL_Value =  207;	break;
 2ea:	2f ec       	ldi	r18, 0xCF	; 207
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <UART_INIT+0x22a>
	// UBRRnL 수식계산 결과값 오차 발생으로 하드코딩
	int UBRRnL_Value;
	if(x == 1) {
		switch(boud) {
			case 2400:		UBRRnL_Value =  416;	break;
			case 4800:		UBRRnL_Value =  207;	break;
 2ee:	2f ec       	ldi	r18, 0xCF	; 207
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <UART_INIT+0x22a>
			default:		UBRRnL_Value =  103;	break;
		}
	} else if(x == 2) {
		switch(boud) {
			case 2400:		UBRRnL_Value =  832;	break;
			case 4800:		UBRRnL_Value =  416;	break;
 2f2:	20 ea       	ldi	r18, 0xA0	; 160
			case 1000000:	UBRRnL_Value =  1;		break;
			default:		UBRRnL_Value =  207;	break;
		}
	}
	
	UBRR1L = UBRRnL_Value;
 2f4:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1C |= 0x06;
 2f8:	ed e9       	ldi	r30, 0x9D	; 157
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	86 60       	ori	r24, 0x06	; 6
 300:	80 83       	st	Z, r24

	UCSR1B |= _BV(RXEN0);
 302:	ea e9       	ldi	r30, 0x9A	; 154
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 61       	ori	r24, 0x10	; 16
 30a:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN0);
 30c:	80 81       	ld	r24, Z
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	80 83       	st	Z, r24
 312:	08 95       	ret

00000314 <UART_receive>:
	
}

unsigned char UART_receive(void) {
	while ( !(UCSR1A & (1 << RXC0)));
 314:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 318:	88 23       	and	r24, r24
 31a:	e4 f7       	brge	.-8      	; 0x314 <UART_receive>
	return UDR1;
 31c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 320:	08 95       	ret

00000322 <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR1A & (1 << UDRE0)));
 322:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 326:	95 ff       	sbrs	r25, 5
 328:	fc cf       	rjmp	.-8      	; 0x322 <UART_transmit>
	UDR1 = data;
 32a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
