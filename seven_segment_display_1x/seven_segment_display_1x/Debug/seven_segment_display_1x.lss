
seven_segment_display_1x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000737  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>							

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int count = 0;
	DDRD = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
#include <util/delay.h>							

int main(void)
{
    uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
	DDRD = 0xFF;
	
    while (1) 
    {
		PORTD = numbers[count];
  c4:	e1 e0       	ldi	r30, 0x01	; 1
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	ec 0f       	add	r30, r28
  ca:	fd 1f       	adc	r31, r29
  cc:	e8 0f       	add	r30, r24
  ce:	f9 1f       	adc	r31, r25
  d0:	20 81       	ld	r18, Z
  d2:	2b b9       	out	0x0b, r18	; 11
		//PORTD = 0xFC;
		count = (count + 1) % 10;
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	6a e0       	ldi	r22, 0x0A	; 10
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 79 00 	call	0xf2	; 0xf2 <__divmodhi4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	33 ed       	ldi	r19, 0xD3	; 211
  e2:	40 e3       	ldi	r20, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x4e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x58>
  ee:	00 00       	nop
  f0:	e9 cf       	rjmp	.-46     	; 0xc4 <main+0x2e>

000000f2 <__divmodhi4>:
  f2:	97 fb       	bst	r25, 7
  f4:	07 2e       	mov	r0, r23
  f6:	16 f4       	brtc	.+4      	; 0xfc <__divmodhi4+0xa>
  f8:	00 94       	com	r0
  fa:	07 d0       	rcall	.+14     	; 0x10a <__divmodhi4_neg1>
  fc:	77 fd       	sbrc	r23, 7
  fe:	09 d0       	rcall	.+18     	; 0x112 <__divmodhi4_neg2>
 100:	0e 94 8d 00 	call	0x11a	; 0x11a <__udivmodhi4>
 104:	07 fc       	sbrc	r0, 7
 106:	05 d0       	rcall	.+10     	; 0x112 <__divmodhi4_neg2>
 108:	3e f4       	brtc	.+14     	; 0x118 <__divmodhi4_exit>

0000010a <__divmodhi4_neg1>:
 10a:	90 95       	com	r25
 10c:	81 95       	neg	r24
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	08 95       	ret

00000112 <__divmodhi4_neg2>:
 112:	70 95       	com	r23
 114:	61 95       	neg	r22
 116:	7f 4f       	sbci	r23, 0xFF	; 255

00000118 <__divmodhi4_exit>:
 118:	08 95       	ret

0000011a <__udivmodhi4>:
 11a:	aa 1b       	sub	r26, r26
 11c:	bb 1b       	sub	r27, r27
 11e:	51 e1       	ldi	r21, 0x11	; 17
 120:	07 c0       	rjmp	.+14     	; 0x130 <__udivmodhi4_ep>

00000122 <__udivmodhi4_loop>:
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	a6 17       	cp	r26, r22
 128:	b7 07       	cpc	r27, r23
 12a:	10 f0       	brcs	.+4      	; 0x130 <__udivmodhi4_ep>
 12c:	a6 1b       	sub	r26, r22
 12e:	b7 0b       	sbc	r27, r23

00000130 <__udivmodhi4_ep>:
 130:	88 1f       	adc	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	5a 95       	dec	r21
 136:	a9 f7       	brne	.-22     	; 0x122 <__udivmodhi4_loop>
 138:	80 95       	com	r24
 13a:	90 95       	com	r25
 13c:	bc 01       	movw	r22, r24
 13e:	cd 01       	movw	r24, r26
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
