
random_number_generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000003f8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa3  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083b  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058c  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000529  00000000  00000000  000023d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_INIT>:
#include <util/delay.h>
#include "UART.h"
#include <stdlib.h>

void ADC_INIT(unsigned char channel) {
	ADMUX |= 0x40;
  96:	ac e7       	ldi	r26, 0x7C	; 124
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	9c 91       	ld	r25, X
  9c:	90 64       	ori	r25, 0x40	; 64
  9e:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	97 60       	ori	r25, 0x07	; 7
  a8:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);
  aa:	90 81       	ld	r25, Z
  ac:	90 68       	ori	r25, 0x80	; 128
  ae:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);
  b0:	90 81       	ld	r25, Z
  b2:	90 62       	ori	r25, 0x20	; 32
  b4:	90 83       	st	Z, r25
	
	ADMUX |= ((ADMUX & 0xE0) | channel);
  b6:	9c 91       	ld	r25, X
  b8:	2c 91       	ld	r18, X
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	89 2b       	or	r24, r25
  be:	82 2b       	or	r24, r18
  c0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <read_ADC>:
}

int read_ADC(void) {
	while(!(ADCSRA & (1 << ADIF)));
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	84 ff       	sbrs	r24, 4
  d2:	fd cf       	rjmp	.-6      	; 0xce <read_ADC+0x4>
	
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <main>:


int main(void)
{
	UART_INIT();
  de:	0e 94 93 00 	call	0x126	; 0x126 <UART_INIT>
	ADC_INIT(0);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_INIT>
	srand(read_ADC());
  e8:	0e 94 65 00 	call	0xca	; 0xca <read_ADC>
  ec:	0e 94 bd 01 	call	0x37a	; 0x37a <srand>
	
	UART_printString("** Start generating random number...\n");
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 b3 00 	call	0x166	; 0x166 <UART_printString>
	
	while(1) {
		int randomNumber = rand() %100 + 1;
		
		UART_print8bitNumber(randomNumber);
  f8:	c4 e6       	ldi	r28, 0x64	; 100
  fa:	d0 e0       	ldi	r29, 0x00	; 0
	srand(read_ADC());
	
	UART_printString("** Start generating random number...\n");
	
	while(1) {
		int randomNumber = rand() %100 + 1;
  fc:	0e 94 b8 01 	call	0x370	; 0x370 <rand>
		
		UART_print8bitNumber(randomNumber);
 100:	be 01       	movw	r22, r28
 102:	0e 94 13 01 	call	0x226	; 0x226 <__divmodhi4>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	0e 94 c2 00 	call	0x184	; 0x184 <UART_print8bitNumber>
		UART_transmit('\r\n');
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 ab 00 	call	0x156	; 0x156 <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ed       	ldi	r24, 0xD3	; 211
 116:	90 e3       	ldi	r25, 0x30	; 48
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x3a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x44>
 122:	00 00       	nop
 124:	eb cf       	rjmp	.-42     	; 0xfc <main+0x1e>

00000126 <UART_INIT>:
}

unsigned char UART_receive(void) {
	while( !(UCSR0A & (1<<RXC0)));
	return UDR0;
}
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
 130:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13a:	e2 ec       	ldi	r30, 0xC2	; 194
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	86 60       	ori	r24, 0x06	; 6
 142:	80 83       	st	Z, r24
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	80 83       	st	Z, r24
 14e:	80 81       	ld	r24, Z
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <UART_transmit>:

void UART_transmit(unsigned char data) {
	while( !(UCSR0A & (1<<UDRE0)));
 156:	e0 ec       	ldi	r30, 0xC0	; 192
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	95 ff       	sbrs	r25, 5
 15e:	fd cf       	rjmp	.-6      	; 0x15a <UART_transmit+0x4>
	UDR0 = data;
 160:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 164:	08 95       	ret

00000166 <UART_printString>:
}

void UART_printString(char *str) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++) {
 16c:	88 81       	ld	r24, Y
 16e:	88 23       	and	r24, r24
 170:	31 f0       	breq	.+12     	; 0x17e <UART_printString+0x18>
 172:	21 96       	adiw	r28, 0x01	; 1
		UART_transmit(str[i]);
 174:	0e 94 ab 00 	call	0x156	; 0x156 <UART_transmit>
	while( !(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void UART_printString(char *str) {
	for(int i = 0; str[i]; i++) {
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <UART_printString+0xe>
		UART_transmit(str[i]);
	}
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no) {
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	00 d0       	rcall	.+0      	; 0x192 <UART_print8bitNumber+0xe>
 192:	00 d0       	rcall	.+0      	; 0x194 <UART_print8bitNumber+0x10>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 198:	20 e3       	ldi	r18, 0x30	; 48
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	3a 83       	std	Y+2, r19	; 0x02
 19e:	29 83       	std	Y+1, r18	; 0x01
 1a0:	1c 82       	std	Y+4, r1	; 0x04
 1a2:	1b 82       	std	Y+3, r1	; 0x03
	int i, index = 0;
	
	if(no>0) {
 1a4:	88 23       	and	r24, r24
 1a6:	19 f1       	breq	.+70     	; 0x1ee <UART_print8bitNumber+0x6a>
 1a8:	fe 01       	movw	r30, r28
 1aa:	31 96       	adiw	r30, 0x01	; 1
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0; i++ ) {
			numString[i] = no % 10 + '0';
 1b0:	4d ec       	ldi	r20, 0xCD	; 205
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <UART_print8bitNumber+0x32>
void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;
	
	if(no>0) {
		for(i = 0; no != 0; i++ ) {
 1b4:	89 01       	movw	r16, r18
			numString[i] = no % 10 + '0';
 1b6:	84 9f       	mul	r24, r20
 1b8:	91 2d       	mov	r25, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	96 95       	lsr	r25
 1be:	96 95       	lsr	r25
 1c0:	96 95       	lsr	r25
 1c2:	39 2f       	mov	r19, r25
 1c4:	33 0f       	add	r19, r19
 1c6:	23 2f       	mov	r18, r19
 1c8:	22 0f       	add	r18, r18
 1ca:	22 0f       	add	r18, r18
 1cc:	23 0f       	add	r18, r19
 1ce:	82 1b       	sub	r24, r18
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	81 93       	st	Z+, r24
			no = no /10;
 1d4:	89 2f       	mov	r24, r25
void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;
	
	if(no>0) {
		for(i = 0; no != 0; i++ ) {
 1d6:	98 01       	movw	r18, r16
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	91 11       	cpse	r25, r1
 1de:	ea cf       	rjmp	.-44     	; 0x1b4 <UART_print8bitNumber+0x30>
			numString[i] = no % 10 + '0';
			no = no /10;
		}
		numString[i] = '\0';
 1e0:	fe 01       	movw	r30, r28
 1e2:	e2 0f       	add	r30, r18
 1e4:	f3 1f       	adc	r31, r19
 1e6:	11 82       	std	Z+1, r1	; 0x01
		index = i -1;
	}
	
	for(i = index; i >= 0; i--) {
 1e8:	11 23       	and	r17, r17
 1ea:	1c f4       	brge	.+6      	; 0x1f2 <UART_print8bitNumber+0x6e>
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <UART_print8bitNumber+0x8c>
	}
}

void UART_print8bitNumber(uint8_t no) {
	char numString[4] = "0";
	int i, index = 0;
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	ce 01       	movw	r24, r28
 1f4:	80 0f       	add	r24, r16
 1f6:	91 1f       	adc	r25, r17
 1f8:	9c 01       	movw	r18, r24
 1fa:	2e 5f       	subi	r18, 0xFE	; 254
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	79 01       	movw	r14, r18
		numString[i] = '\0';
		index = i -1;
	}
	
	for(i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
 200:	f7 01       	movw	r30, r14
 202:	82 91       	ld	r24, -Z
 204:	7f 01       	movw	r14, r30
 206:	0e 94 ab 00 	call	0x156	; 0x156 <UART_transmit>
		}
		numString[i] = '\0';
		index = i -1;
	}
	
	for(i = index; i >= 0; i--) {
 20a:	01 50       	subi	r16, 0x01	; 1
 20c:	11 09       	sbc	r17, r1
 20e:	c2 f7       	brpl	.-16     	; 0x200 <UART_print8bitNumber+0x7c>
		UART_transmit(numString[i]);
	}
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <__divmodhi4>:
 226:	97 fb       	bst	r25, 7
 228:	07 2e       	mov	r0, r23
 22a:	16 f4       	brtc	.+4      	; 0x230 <__divmodhi4+0xa>
 22c:	00 94       	com	r0
 22e:	07 d0       	rcall	.+14     	; 0x23e <__divmodhi4_neg1>
 230:	77 fd       	sbrc	r23, 7
 232:	09 d0       	rcall	.+18     	; 0x246 <__divmodhi4_neg2>
 234:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__udivmodhi4>
 238:	07 fc       	sbrc	r0, 7
 23a:	05 d0       	rcall	.+10     	; 0x246 <__divmodhi4_neg2>
 23c:	3e f4       	brtc	.+14     	; 0x24c <__divmodhi4_exit>

0000023e <__divmodhi4_neg1>:
 23e:	90 95       	com	r25
 240:	81 95       	neg	r24
 242:	9f 4f       	sbci	r25, 0xFF	; 255
 244:	08 95       	ret

00000246 <__divmodhi4_neg2>:
 246:	70 95       	com	r23
 248:	61 95       	neg	r22
 24a:	7f 4f       	sbci	r23, 0xFF	; 255

0000024c <__divmodhi4_exit>:
 24c:	08 95       	ret

0000024e <__udivmodsi4>:
 24e:	a1 e2       	ldi	r26, 0x21	; 33
 250:	1a 2e       	mov	r1, r26
 252:	aa 1b       	sub	r26, r26
 254:	bb 1b       	sub	r27, r27
 256:	fd 01       	movw	r30, r26
 258:	0d c0       	rjmp	.+26     	; 0x274 <__udivmodsi4_ep>

0000025a <__udivmodsi4_loop>:
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	ee 1f       	adc	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	a2 17       	cp	r26, r18
 264:	b3 07       	cpc	r27, r19
 266:	e4 07       	cpc	r30, r20
 268:	f5 07       	cpc	r31, r21
 26a:	20 f0       	brcs	.+8      	; 0x274 <__udivmodsi4_ep>
 26c:	a2 1b       	sub	r26, r18
 26e:	b3 0b       	sbc	r27, r19
 270:	e4 0b       	sbc	r30, r20
 272:	f5 0b       	sbc	r31, r21

00000274 <__udivmodsi4_ep>:
 274:	66 1f       	adc	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	1a 94       	dec	r1
 27e:	69 f7       	brne	.-38     	; 0x25a <__udivmodsi4_loop>
 280:	60 95       	com	r22
 282:	70 95       	com	r23
 284:	80 95       	com	r24
 286:	90 95       	com	r25
 288:	9b 01       	movw	r18, r22
 28a:	ac 01       	movw	r20, r24
 28c:	bd 01       	movw	r22, r26
 28e:	cf 01       	movw	r24, r30
 290:	08 95       	ret

00000292 <__umulhisi3>:
 292:	a2 9f       	mul	r26, r18
 294:	b0 01       	movw	r22, r0
 296:	b3 9f       	mul	r27, r19
 298:	c0 01       	movw	r24, r0
 29a:	a3 9f       	mul	r26, r19
 29c:	70 0d       	add	r23, r0
 29e:	81 1d       	adc	r24, r1
 2a0:	11 24       	eor	r1, r1
 2a2:	91 1d       	adc	r25, r1
 2a4:	b2 9f       	mul	r27, r18
 2a6:	70 0d       	add	r23, r0
 2a8:	81 1d       	adc	r24, r1
 2aa:	11 24       	eor	r1, r1
 2ac:	91 1d       	adc	r25, r1
 2ae:	08 95       	ret

000002b0 <__udivmodhi4>:
 2b0:	aa 1b       	sub	r26, r26
 2b2:	bb 1b       	sub	r27, r27
 2b4:	51 e1       	ldi	r21, 0x11	; 17
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <__udivmodhi4_ep>

000002b8 <__udivmodhi4_loop>:
 2b8:	aa 1f       	adc	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	a6 17       	cp	r26, r22
 2be:	b7 07       	cpc	r27, r23
 2c0:	10 f0       	brcs	.+4      	; 0x2c6 <__udivmodhi4_ep>
 2c2:	a6 1b       	sub	r26, r22
 2c4:	b7 0b       	sbc	r27, r23

000002c6 <__udivmodhi4_ep>:
 2c6:	88 1f       	adc	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	5a 95       	dec	r21
 2cc:	a9 f7       	brne	.-22     	; 0x2b8 <__udivmodhi4_loop>
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	bc 01       	movw	r22, r24
 2d4:	cd 01       	movw	r24, r26
 2d6:	08 95       	ret

000002d8 <do_rand>:
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	af 92       	push	r10
 2de:	bf 92       	push	r11
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
 2ee:	68 81       	ld	r22, Y
 2f0:	79 81       	ldd	r23, Y+1	; 0x01
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	9b 81       	ldd	r25, Y+3	; 0x03
 2f6:	61 15       	cp	r22, r1
 2f8:	71 05       	cpc	r23, r1
 2fa:	81 05       	cpc	r24, r1
 2fc:	91 05       	cpc	r25, r1
 2fe:	21 f4       	brne	.+8      	; 0x308 <do_rand+0x30>
 300:	64 e2       	ldi	r22, 0x24	; 36
 302:	79 ed       	ldi	r23, 0xD9	; 217
 304:	8b e5       	ldi	r24, 0x5B	; 91
 306:	97 e0       	ldi	r25, 0x07	; 7
 308:	2d e1       	ldi	r18, 0x1D	; 29
 30a:	33 ef       	ldi	r19, 0xF3	; 243
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	0e 94 c8 01 	call	0x390	; 0x390 <__divmodsi4>
 314:	49 01       	movw	r8, r18
 316:	5a 01       	movw	r10, r20
 318:	9b 01       	movw	r18, r22
 31a:	ac 01       	movw	r20, r24
 31c:	a7 ea       	ldi	r26, 0xA7	; 167
 31e:	b1 e4       	ldi	r27, 0x41	; 65
 320:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__muluhisi3>
 324:	6b 01       	movw	r12, r22
 326:	7c 01       	movw	r14, r24
 328:	ac ee       	ldi	r26, 0xEC	; 236
 32a:	b4 ef       	ldi	r27, 0xF4	; 244
 32c:	a5 01       	movw	r20, r10
 32e:	94 01       	movw	r18, r8
 330:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__mulohisi3>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	8c 0d       	add	r24, r12
 33a:	9d 1d       	adc	r25, r13
 33c:	ae 1d       	adc	r26, r14
 33e:	bf 1d       	adc	r27, r15
 340:	b7 ff       	sbrs	r27, 7
 342:	03 c0       	rjmp	.+6      	; 0x34a <do_rand+0x72>
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	a1 09       	sbc	r26, r1
 348:	b0 48       	sbci	r27, 0x80	; 128
 34a:	88 83       	st	Y, r24
 34c:	99 83       	std	Y+1, r25	; 0x01
 34e:	aa 83       	std	Y+2, r26	; 0x02
 350:	bb 83       	std	Y+3, r27	; 0x03
 352:	9f 77       	andi	r25, 0x7F	; 127
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	bf 90       	pop	r11
 362:	af 90       	pop	r10
 364:	9f 90       	pop	r9
 366:	8f 90       	pop	r8
 368:	08 95       	ret

0000036a <rand_r>:
 36a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <do_rand>
 36e:	08 95       	ret

00000370 <rand>:
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <do_rand>
 378:	08 95       	ret

0000037a <srand>:
 37a:	a0 e0       	ldi	r26, 0x00	; 0
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 382:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 386:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 38a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 38e:	08 95       	ret

00000390 <__divmodsi4>:
 390:	05 2e       	mov	r0, r21
 392:	97 fb       	bst	r25, 7
 394:	1e f4       	brtc	.+6      	; 0x39c <__divmodsi4+0xc>
 396:	00 94       	com	r0
 398:	0e 94 df 01 	call	0x3be	; 0x3be <__negsi2>
 39c:	57 fd       	sbrc	r21, 7
 39e:	07 d0       	rcall	.+14     	; 0x3ae <__divmodsi4_neg2>
 3a0:	0e 94 27 01 	call	0x24e	; 0x24e <__udivmodsi4>
 3a4:	07 fc       	sbrc	r0, 7
 3a6:	03 d0       	rcall	.+6      	; 0x3ae <__divmodsi4_neg2>
 3a8:	4e f4       	brtc	.+18     	; 0x3bc <__divmodsi4_exit>
 3aa:	0c 94 df 01 	jmp	0x3be	; 0x3be <__negsi2>

000003ae <__divmodsi4_neg2>:
 3ae:	50 95       	com	r21
 3b0:	40 95       	com	r20
 3b2:	30 95       	com	r19
 3b4:	21 95       	neg	r18
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	4f 4f       	sbci	r20, 0xFF	; 255
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255

000003bc <__divmodsi4_exit>:
 3bc:	08 95       	ret

000003be <__negsi2>:
 3be:	90 95       	com	r25
 3c0:	80 95       	com	r24
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	08 95       	ret

000003ce <__muluhisi3>:
 3ce:	0e 94 49 01 	call	0x292	; 0x292 <__umulhisi3>
 3d2:	a5 9f       	mul	r26, r21
 3d4:	90 0d       	add	r25, r0
 3d6:	b4 9f       	mul	r27, r20
 3d8:	90 0d       	add	r25, r0
 3da:	a4 9f       	mul	r26, r20
 3dc:	80 0d       	add	r24, r0
 3de:	91 1d       	adc	r25, r1
 3e0:	11 24       	eor	r1, r1
 3e2:	08 95       	ret

000003e4 <__mulshisi3>:
 3e4:	b7 ff       	sbrs	r27, 7
 3e6:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__muluhisi3>

000003ea <__mulohisi3>:
 3ea:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__muluhisi3>
 3ee:	82 1b       	sub	r24, r18
 3f0:	93 0b       	sbc	r25, r19
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
