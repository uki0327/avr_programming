
rotaryencoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000879  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000321  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cd  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  9e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_PCINT0>:
	return 0;
}


void INIT_PCINT0() {
	PCICR |= (1 << PCIE0);
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
	PCMSK0 |= (1<< PCINT0) | (1<< PCINT1) | (1 << PCINT5);
  b0:	eb e6       	ldi	r30, 0x6B	; 107
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 62       	ori	r24, 0x23	; 35
  b8:	80 83       	st	Z, r24
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <main>:
void ledShift(int c);


int main(void)
{
	DDRD = 0xFF;		// LEDs
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;		// BUTTON
  c2:	14 b8       	out	0x04, r1	; 4
	
	PORTD = 0xFE;		// STARTS with the First LED ON
  c4:	9e ef       	ldi	r25, 0xFE	; 254
  c6:	9b b9       	out	0x0b, r25	; 11
	PORTB = 0xFF;		// BUTTON PULLUP
  c8:	85 b9       	out	0x05, r24	; 5
	
	//UART_INIT();
	INIT_PCINT0();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_PCINT0>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x10>

000000d0 <ledLeft>:
	}
}

void ledLeft() {
	// +1
	if (led_on == 0b01111111) {
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	8f 37       	cpi	r24, 0x7F	; 127
  da:	91 05       	cpc	r25, r1
  dc:	49 f4       	brne	.+18     	; 0xf0 <ledLeft+0x20>
		led_on = 0b11111110;
  de:	8e ef       	ldi	r24, 0xFE	; 254
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD = led_on;
  ea:	8e ef       	ldi	r24, 0xFE	; 254
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	08 95       	ret
	}
	else {
		led_on = (led_on << 1) + 1;
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	01 96       	adiw	r24, 0x01	; 1
		led_on = ~(1 << 8) & led_on;
  f6:	9e 7f       	andi	r25, 0xFE	; 254
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD = led_on;
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <ledRight>:
	//UART_printString("\nShift 1 bit to LEFT\n");

}

void ledRight() {		// -1
	if(led_on == 0b11111110) {
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	8e 3f       	cpi	r24, 0xFE	; 254
 10e:	91 05       	cpc	r25, r1
 110:	41 f4       	brne	.+16     	; 0x122 <ledRight+0x1e>
		led_on = 0b01111111;
 112:	8f e7       	ldi	r24, 0x7F	; 127
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD = led_on;
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret
	}
	else {
		led_on = 0b10000000 | (led_on >> 1);
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	80 68       	ori	r24, 0x80	; 128
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD =  led_on;
 130:	8b b9       	out	0x0b, r24	; 11
 132:	08 95       	ret

00000134 <ledShift>:
	sei();
}


void ledShift(int c) {
	if(clk == CLOCKWISE) {					// 시계방향으로 1 비트 이동
 134:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <clk>
 138:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <clk+0x1>
 13c:	21 30       	cpi	r18, 0x01	; 1
 13e:	31 05       	cpc	r19, r1
 140:	41 f4       	brne	.+16     	; 0x152 <ledShift+0x1e>
		if (c == 1) ledLeft();
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <ledShift+0x18>
 146:	0e 94 68 00 	call	0xd0	; 0xd0 <ledLeft>
 14a:	08 95       	ret
		else ledRight();
 14c:	0e 94 82 00 	call	0x104	; 0x104 <ledRight>
 150:	08 95       	ret

		} else if (clk == COUNTERCLOCKWISE) {		// 반시계방향 1비트 이동
 152:	23 2b       	or	r18, r19
 154:	39 f4       	brne	.+14     	; 0x164 <ledShift+0x30>
		if (c == 1) ledRight();
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	19 f4       	brne	.+6      	; 0x160 <ledShift+0x2c>
 15a:	0e 94 82 00 	call	0x104	; 0x104 <ledRight>
 15e:	08 95       	ret
		else ledLeft();
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <ledLeft>
 164:	08 95       	ret

00000166 <__vector_3>:
	
	//UART_printString("\nShift 1 bit to RIGHT\n");
}

ISR(PCINT0_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31

	int newA = 1 & PINB;
 190:	83 b1       	in	r24, 0x03	; 3
 192:	81 70       	andi	r24, 0x01	; 1
 194:	c8 2f       	mov	r28, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	d8 2f       	mov	r29, r24
	int newB = 1 & (PINB >> 1);
 19a:	83 b1       	in	r24, 0x03	; 3
 19c:	81 fb       	bst	r24, 1
 19e:	00 27       	eor	r16, r16
 1a0:	00 f9       	bld	r16, 0
 1a2:	10 e0       	ldi	r17, 0x00	; 0
	
	if(oldA != newA)  {									// A 가 변화
 1a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldA>
 1a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <oldA+0x1>
 1ac:	c8 17       	cp	r28, r24
 1ae:	d9 07       	cpc	r29, r25
 1b0:	e1 f0       	breq	.+56     	; 0x1ea <__vector_3+0x84>
		if(newA == 1) {
 1b2:	c1 30       	cpi	r28, 0x01	; 1
 1b4:	d1 05       	cpc	r29, r1
 1b6:	69 f4       	brne	.+26     	; 0x1d2 <__vector_3+0x6c>
			if(newB == 1) ledShift(0);
 1b8:	01 30       	cpi	r16, 0x01	; 1
 1ba:	11 05       	cpc	r17, r1
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <__vector_3+0x62>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 9a 00 	call	0x134	; 0x134 <ledShift>
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <__vector_3+0x84>
			else ledShift(1);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 9a 00 	call	0x134	; 0x134 <ledShift>
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <__vector_3+0x84>
		}
		else {
			if(newB == 1) ledShift(1);
 1d2:	01 30       	cpi	r16, 0x01	; 1
 1d4:	11 05       	cpc	r17, r1
 1d6:	29 f4       	brne	.+10     	; 0x1e2 <__vector_3+0x7c>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 9a 00 	call	0x134	; 0x134 <ledShift>
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <__vector_3+0x84>
			else ledShift(0);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 9a 00 	call	0x134	; 0x134 <ledShift>
			if(newA == 1) ledShift(0);
			else ledShift(1);
		}
	}
	
	if ((1 & (PINB >> PB5)) == 0) {
 1ea:	1d 99       	sbic	0x03, 5	; 3
 1ec:	0e c0       	rjmp	.+28     	; 0x20a <__vector_3+0xa4>
		clk = !clk;				// 엔코더 회전 방향 바꾸기
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <clk>
 1f6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <clk+0x1>
 1fa:	23 2b       	or	r18, r19
 1fc:	11 f0       	breq	.+4      	; 0x202 <__vector_3+0x9c>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <clk+0x1>
 206:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <clk>
	}
	
	oldA = newA;
 20a:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <oldA+0x1>
 20e:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <oldA>
	oldB = newB;
 212:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <__data_end+0x1>
 216:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <__data_end>
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
