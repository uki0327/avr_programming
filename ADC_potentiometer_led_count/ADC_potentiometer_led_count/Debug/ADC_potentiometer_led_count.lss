
ADC_potentiometer_led_count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000072  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_INIT>:
#include <util/delay.h>
//#include "UART.h"
//#include <stdio.h>

void ADC_INIT(unsigned char channel) {
	ADMUX |= 0x40;
  80:	ac e7       	ldi	r26, 0x7C	; 124
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	9c 91       	ld	r25, X
  86:	90 64       	ori	r25, 0x40	; 64
  88:	9c 93       	st	X, r25
	ADCSRA |= 0x07;
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	90 81       	ld	r25, Z
  90:	97 60       	ori	r25, 0x07	; 7
  92:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);
  94:	90 81       	ld	r25, Z
  96:	90 68       	ori	r25, 0x80	; 128
  98:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);
  9a:	90 81       	ld	r25, Z
  9c:	90 62       	ori	r25, 0x20	; 32
  9e:	90 83       	st	Z, r25
	ADMUX |= ((ADMUX & 0xE0) | channel);
  a0:	9c 91       	ld	r25, X
  a2:	2c 91       	ld	r18, X
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	89 2b       	or	r24, r25
  a8:	82 2b       	or	r24, r18
  aa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <read_ADC>:
}

int read_ADC(void) {
	while(!(ADCSRA & (1 << ADIF)));
  b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b8:	84 ff       	sbrs	r24, 4
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <read_ADC>
	
	return ADC;
  bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c4:	08 95       	ret

000000c6 <PORT_INIT>:

void PORT_INIT(void) {
	DDRD = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret

000000ce <main>:
int main(void)
{
	int value;
	uint8_t on_off;
	
	ADC_INIT(0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 40 00 	call	0x80	; 0x80 <ADC_INIT>
	PORT_INIT();
  d4:	0e 94 63 00 	call	0xc6	; 0xc6 <PORT_INIT>
	//UART_INIT();
	
	while (1)
	{
		value = read_ADC() >> 7;
  d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_ADC>
  dc:	bc 01       	movw	r22, r24
  de:	66 0f       	add	r22, r22
  e0:	67 2f       	mov	r22, r23
  e2:	66 1f       	adc	r22, r22
  e4:	77 0b       	sbc	r23, r23
		
		on_off = 0;
		for(int i = 0; i <= value ; i++) {
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
	
	while (1)
	{
		value = read_ADC() >> 7;
		
		on_off = 0;
  ea:	90 e0       	ldi	r25, 0x00	; 0
		for(int i = 0; i <= value ; i++) {
  ec:	0b c0       	rjmp	.+22     	; 0x104 <main+0x36>
			on_off |= (0x01 << i);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x2c>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <main+0x28>
  fe:	94 2b       	or	r25, r20
	while (1)
	{
		value = read_ADC() >> 7;
		
		on_off = 0;
		for(int i = 0; i <= value ; i++) {
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	62 17       	cp	r22, r18
 106:	73 07       	cpc	r23, r19
 108:	94 f7       	brge	.-28     	; 0xee <main+0x20>
			on_off |= (0x01 << i);
		}
		
		PORTD = ~on_off;
 10a:	90 95       	com	r25
 10c:	9b b9       	out	0x0b, r25	; 11
		//char on_off_str[10];
		//sprintf(on_off_str, "%d", on_off);
		//UART_printString("PORTD : ");
		//UART_printString(on_off_str);
		//UART_printString("\n");
	}
 10e:	e4 cf       	rjmp	.-56     	; 0xd8 <main+0xa>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
