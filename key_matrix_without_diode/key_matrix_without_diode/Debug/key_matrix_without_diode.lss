
key_matrix_without_diode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000568  000005dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000568  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000118e  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008eb  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d57  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f0  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001093  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000048eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	11 d0       	rcall	.+34     	; 0xae <main>
  8c:	6b c2       	rjmp	.+1238   	; 0x564 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <InitKeyMatrix>:

uint8_t rowPins[ROWS] = {PB1,PB0,PD7,PD6};
uint8_t colPins[COLS] = {PD5,PD4,PD3,PD2};

void InitKeyMatrix(void) {
	DDRB &= ( ~(1 << PB1) & ~(1 << PB0));
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8c 7f       	andi	r24, 0xFC	; 252
  94:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( (1 << PB1) | (1 << PB0));
  96:	85 b1       	in	r24, 0x05	; 5
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	85 b9       	out	0x05, r24	; 5
	DDRD &= ( ~(1 << PD7) & ~(1 << PD6));
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8f 73       	andi	r24, 0x3F	; 63
  a0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ( (1 << PD7) | (1 << PD6));
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	80 6c       	ori	r24, 0xC0	; 192
  a6:	8b b9       	out	0x0b, r24	; 11
	
	DDRD = 0b11000011; // cols
  a8:	83 ec       	ldi	r24, 0xC3	; 195
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <main>:
}

int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	60 97       	sbiw	r28, 0x10	; 16
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t keyPressed[ROWS][COLS];
	uint8_t row,col,count;
	
	UART_init_set(115200, 1);
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	72 ec       	ldi	r23, 0xC2	; 194
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0a d1       	rcall	.+532    	; 0x2e2 <UART_init_set>
	InitKeyMatrix();
  ce:	e0 df       	rcall	.-64     	; 0x90 <InitKeyMatrix>
  d0:	40 e0       	ldi	r20, 0x00	; 0
	
	while (1)
	{
		count = 0;
  d2:	50 e0       	ldi	r21, 0x00	; 0
		
		for (col = 0; col < COLS; col++) {
  d4:	c3 c0       	rjmp	.+390    	; 0x25c <main+0x1ae>
  d6:	aa b1       	in	r26, 0x0a	; 10
			DDRD |= (1 << colPins[col]);
  d8:	25 2f       	mov	r18, r21
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	bc 01       	movw	r22, r24
  e8:	00 80       	ld	r0, Z
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x42>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x3e>
  f4:	6a 2b       	or	r22, r26
  f6:	6a b9       	out	0x0a, r22	; 10
  f8:	7b b1       	in	r23, 0x0b	; 11
			PORTD  &= ~(1 << colPins[col]);
  fa:	dc 01       	movw	r26, r24
  fc:	00 80       	ld	r0, Z
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x56>
 100:	aa 0f       	add	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x52>
 108:	6a 2f       	mov	r22, r26
 10a:	60 95       	com	r22
 10c:	67 23       	and	r22, r23
 10e:	6b b9       	out	0x0b, r22	; 11
 110:	ef ed       	ldi	r30, 0xDF	; 223
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	fe e2       	ldi	r31, 0x2E	; 46
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x66>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x6c>
 11a:	00 00       	nop
 11c:	b3 b1       	in	r27, 0x03	; 3
			_delay_ms(3);
			
			keyPressed[0][col] = 1 - ((PINB & (1 << rowPins[0])) >> rowPins[0]);
 11e:	04 e0       	ldi	r16, 0x04	; 4
 120:	11 e0       	ldi	r17, 0x01	; 1
 122:	f8 01       	movw	r30, r16
 124:	a0 81       	ld	r26, Z
 126:	bc 01       	movw	r22, r24
 128:	0a 2e       	mov	r0, r26
 12a:	02 c0       	rjmp	.+4      	; 0x130 <main+0x82>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <main+0x7e>
 134:	eb 2f       	mov	r30, r27
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e6 23       	and	r30, r22
 13a:	f7 23       	and	r31, r23
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x94>
 13e:	f5 95       	asr	r31
 140:	e7 95       	ror	r30
 142:	aa 95       	dec	r26
 144:	e2 f7       	brpl	.-8      	; 0x13e <main+0x90>
 146:	a1 e0       	ldi	r26, 0x01	; 1
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	ac 0f       	add	r26, r28
 14c:	bd 1f       	adc	r27, r29
 14e:	a2 0f       	add	r26, r18
 150:	b3 1f       	adc	r27, r19
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	76 2f       	mov	r23, r22
 156:	7e 1b       	sub	r23, r30
 158:	7c 93       	st	X, r23
 15a:	e3 b1       	in	r30, 0x03	; 3
			keyPressed[1][col] = 1 - ((PINB & (1 << rowPins[1])) >> rowPins[1]);
 15c:	d8 01       	movw	r26, r16
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	7c 91       	ld	r23, X
 162:	dc 01       	movw	r26, r24
 164:	07 2e       	mov	r0, r23
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0xbe>
 168:	aa 0f       	add	r26, r26
 16a:	bb 1f       	adc	r27, r27
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <main+0xba>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ea 23       	and	r30, r26
 174:	fb 23       	and	r31, r27
 176:	02 c0       	rjmp	.+4      	; 0x17c <main+0xce>
 178:	f5 95       	asr	r31
 17a:	e7 95       	ror	r30
 17c:	7a 95       	dec	r23
 17e:	e2 f7       	brpl	.-8      	; 0x178 <main+0xca>
 180:	a5 e0       	ldi	r26, 0x05	; 5
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	ac 0f       	add	r26, r28
 186:	bd 1f       	adc	r27, r29
 188:	a2 0f       	add	r26, r18
 18a:	b3 1f       	adc	r27, r19
 18c:	76 2f       	mov	r23, r22
 18e:	7e 1b       	sub	r23, r30
 190:	7c 93       	st	X, r23
 192:	e9 b1       	in	r30, 0x09	; 9
			keyPressed[2][col] = 1 - ((PIND & (1 << rowPins[2])) >> rowPins[2]);
 194:	d8 01       	movw	r26, r16
 196:	12 96       	adiw	r26, 0x02	; 2
 198:	7c 91       	ld	r23, X
 19a:	dc 01       	movw	r26, r24
 19c:	07 2e       	mov	r0, r23
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0xf6>
 1a0:	aa 0f       	add	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <main+0xf2>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ea 23       	and	r30, r26
 1ac:	fb 23       	and	r31, r27
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x106>
 1b0:	f5 95       	asr	r31
 1b2:	e7 95       	ror	r30
 1b4:	7a 95       	dec	r23
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <main+0x102>
 1b8:	a9 e0       	ldi	r26, 0x09	; 9
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	ac 0f       	add	r26, r28
 1be:	bd 1f       	adc	r27, r29
 1c0:	a2 0f       	add	r26, r18
 1c2:	b3 1f       	adc	r27, r19
 1c4:	76 2f       	mov	r23, r22
 1c6:	7e 1b       	sub	r23, r30
 1c8:	7c 93       	st	X, r23
 1ca:	e9 b1       	in	r30, 0x09	; 9
			keyPressed[3][col] = 1 - ((PIND & (1 << rowPins[3])) >> rowPins[3]);
 1cc:	d8 01       	movw	r26, r16
 1ce:	13 96       	adiw	r26, 0x03	; 3
 1d0:	7c 91       	ld	r23, X
 1d2:	07 2e       	mov	r0, r23
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <main+0x12c>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <main+0x128>
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	8e 23       	and	r24, r30
 1e2:	9f 23       	and	r25, r31
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <main+0x13c>
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	7a 95       	dec	r23
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <main+0x138>
 1ee:	ed e0       	ldi	r30, 0x0D	; 13
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ec 0f       	add	r30, r28
 1f4:	fd 1f       	adc	r31, r29
 1f6:	e2 0f       	add	r30, r18
 1f8:	f3 1f       	adc	r31, r19
 1fa:	68 1b       	sub	r22, r24
 1fc:	60 83       	st	Z, r22
 1fe:	80 e0       	ldi	r24, 0x00	; 0
			
			for (row = 0; row < ROWS; row++) {
 200:	11 c0       	rjmp	.+34     	; 0x224 <main+0x176>
 202:	e8 2f       	mov	r30, r24
				count += keyPressed[row][col];
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	6c 0f       	add	r22, r28
 214:	7d 1f       	adc	r23, r29
 216:	e6 0f       	add	r30, r22
 218:	f7 1f       	adc	r31, r23
 21a:	e2 0f       	add	r30, r18
 21c:	f3 1f       	adc	r31, r19
 21e:	90 81       	ld	r25, Z
 220:	49 0f       	add	r20, r25
 222:	8f 5f       	subi	r24, 0xFF	; 255
			keyPressed[0][col] = 1 - ((PINB & (1 << rowPins[0])) >> rowPins[0]);
			keyPressed[1][col] = 1 - ((PINB & (1 << rowPins[1])) >> rowPins[1]);
			keyPressed[2][col] = 1 - ((PIND & (1 << rowPins[2])) >> rowPins[2]);
			keyPressed[3][col] = 1 - ((PIND & (1 << rowPins[3])) >> rowPins[3]);
			
			for (row = 0; row < ROWS; row++) {
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	68 f3       	brcs	.-38     	; 0x202 <main+0x154>
 228:	6b b1       	in	r22, 0x0b	; 11
				count += keyPressed[row][col];
			}
			
			PORTD |= (1 << colPins[col]);
 22a:	f9 01       	movw	r30, r18
 22c:	e0 50       	subi	r30, 0x00	; 0
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	9c 01       	movw	r18, r24
 236:	00 80       	ld	r0, Z
 238:	02 c0       	rjmp	.+4      	; 0x23e <main+0x190>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <main+0x18c>
 242:	26 2b       	or	r18, r22
 244:	2b b9       	out	0x0b, r18	; 11
 246:	2a b1       	in	r18, 0x0a	; 10
			DDRD &= ~(1 << colPins[col]);
 248:	00 80       	ld	r0, Z
 24a:	02 c0       	rjmp	.+4      	; 0x250 <main+0x1a2>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <main+0x19e>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	8a b9       	out	0x0a, r24	; 10
 25a:	5f 5f       	subi	r21, 0xFF	; 255
	
	while (1)
	{
		count = 0;
		
		for (col = 0; col < COLS; col++) {
 25c:	54 30       	cpi	r21, 0x04	; 4
 25e:	08 f4       	brcc	.+2      	; 0x262 <main+0x1b4>
 260:	3a cf       	rjmp	.-396    	; 0xd6 <main+0x28>
 262:	41 11       	cpse	r20, r1
			
			PORTD |= (1 << colPins[col]);
			DDRD &= ~(1 << colPins[col]);
		}
		
		if(count > 0) {
 264:	2f c0       	rjmp	.+94     	; 0x2c4 <main+0x216>
 266:	33 c0       	rjmp	.+102    	; 0x2ce <main+0x220>
 268:	80 2f       	mov	r24, r16
			for(row = 0; row < ROWS; row++) {
				for(col = 0; col < COLS; col++) {
					if(keyPressed[row][col])
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	21 2f       	mov	r18, r17
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	a1 e0       	ldi	r26, 0x01	; 1
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	ac 0f       	add	r26, r28
 280:	bd 1f       	adc	r27, r29
 282:	ea 0f       	add	r30, r26
 284:	fb 1f       	adc	r31, r27
 286:	e2 0f       	add	r30, r18
 288:	f3 1f       	adc	r31, r19
 28a:	40 81       	ld	r20, Z
 28c:	44 23       	and	r20, r20
 28e:	61 f0       	breq	.+24     	; 0x2a8 <main+0x1fa>
 290:	88 0f       	add	r24, r24
						UART_transmit(keys[row][col]);
 292:	99 1f       	adc	r25, r25
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 5f       	subi	r24, 0xF8	; 248
 29a:	9e 4f       	sbci	r25, 0xFE	; 254
 29c:	fc 01       	movw	r30, r24
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	80 81       	ld	r24, Z
 2a4:	43 d1       	rcall	.+646    	; 0x52c <UART_transmit>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <main+0x1fe>
					else UART_transmit('.');
 2a8:	8e e2       	ldi	r24, 0x2E	; 46
 2aa:	40 d1       	rcall	.+640    	; 0x52c <UART_transmit>
					
					UART_printString(" ");
 2ac:	88 e1       	ldi	r24, 0x18	; 24
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	44 d1       	rcall	.+648    	; 0x53a <UART_printString>
 2b2:	1f 5f       	subi	r17, 0xFF	; 255
			DDRD &= ~(1 << colPins[col]);
		}
		
		if(count > 0) {
			for(row = 0; row < ROWS; row++) {
				for(col = 0; col < COLS; col++) {
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <main+0x20a>
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	14 30       	cpi	r17, 0x04	; 4
 2ba:	b0 f2       	brcs	.-84     	; 0x268 <main+0x1ba>
						UART_transmit(keys[row][col]);
					else UART_transmit('.');
					
					UART_printString(" ");
				}
				UART_transmit('\n');
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	36 d1       	rcall	.+620    	; 0x52c <UART_transmit>
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
			PORTD |= (1 << colPins[col]);
			DDRD &= ~(1 << colPins[col]);
		}
		
		if(count > 0) {
			for(row = 0; row < ROWS; row++) {
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <main+0x218>
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	04 30       	cpi	r16, 0x04	; 4
 2c8:	b0 f3       	brcs	.-20     	; 0x2b6 <main+0x208>
					
					UART_printString(" ");
				}
				UART_transmit('\n');
			}
			UART_transmit('\n');
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	2f d1       	rcall	.+606    	; 0x52c <UART_transmit>
 2ce:	bf ef       	ldi	r27, 0xFF	; 255
 2d0:	e5 ea       	ldi	r30, 0xA5	; 165
 2d2:	fe e0       	ldi	r31, 0x0E	; 14
 2d4:	b1 50       	subi	r27, 0x01	; 1
 2d6:	e0 40       	sbci	r30, 0x00	; 0
 2d8:	f0 40       	sbci	r31, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x226>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x230>
 2de:	00 00       	nop
 2e0:	f7 ce       	rjmp	.-530    	; 0xd0 <main+0x22>

000002e2 <UART_init_set>:
 2e2:	42 30       	cpi	r20, 0x02	; 2
}

unsigned char UART_receive(void) {
	while ( !(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <UART_init_set+0x10>
 2e6:	e0 ec       	ldi	r30, 0xC0	; 192
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	30 81       	ld	r19, Z
 2ec:	32 60       	ori	r19, 0x02	; 2
 2ee:	30 83       	st	Z, r19
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <UART_init_set+0x18>
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <UART_init_set+0x18>
 2f6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2fa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	09 f0       	breq	.+2      	; 0x304 <UART_init_set+0x22>
 302:	7f c0       	rjmp	.+254    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 304:	61 15       	cp	r22, r1
 306:	26 e9       	ldi	r18, 0x96	; 150
 308:	72 07       	cpc	r23, r18
 30a:	81 05       	cpc	r24, r1
 30c:	91 05       	cpc	r25, r1
 30e:	09 f4       	brne	.+2      	; 0x312 <UART_init_set+0x30>
 310:	66 c0       	rjmp	.+204    	; 0x3de <UART_init_set+0xfc>
 312:	58 f5       	brcc	.+86     	; 0x36a <UART_init_set+0x88>
 314:	60 38       	cpi	r22, 0x80	; 128
 316:	25 e2       	ldi	r18, 0x25	; 37
 318:	72 07       	cpc	r23, r18
 31a:	81 05       	cpc	r24, r1
 31c:	91 05       	cpc	r25, r1
 31e:	09 f4       	brne	.+2      	; 0x322 <UART_init_set+0x40>
 320:	56 c0       	rjmp	.+172    	; 0x3ce <UART_init_set+0xec>
 322:	70 f4       	brcc	.+28     	; 0x340 <UART_init_set+0x5e>
 324:	60 36       	cpi	r22, 0x60	; 96
 326:	29 e0       	ldi	r18, 0x09	; 9
 328:	72 07       	cpc	r23, r18
 32a:	81 05       	cpc	r24, r1
 32c:	91 05       	cpc	r25, r1
 32e:	09 f4       	brne	.+2      	; 0x332 <UART_init_set+0x50>
 330:	4c c0       	rjmp	.+152    	; 0x3ca <UART_init_set+0xe8>
 332:	60 3c       	cpi	r22, 0xC0	; 192
 334:	72 41       	sbci	r23, 0x12	; 18
 336:	81 05       	cpc	r24, r1
 338:	91 05       	cpc	r25, r1
 33a:	09 f4       	brne	.+2      	; 0x33e <UART_init_set+0x5c>
 33c:	e4 c0       	rjmp	.+456    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 33e:	5f c0       	rjmp	.+190    	; 0x3fe <UART_init_set+0x11c>
 340:	61 15       	cp	r22, r1
 342:	2b e4       	ldi	r18, 0x4B	; 75
 344:	72 07       	cpc	r23, r18
 346:	81 05       	cpc	r24, r1
 348:	91 05       	cpc	r25, r1
 34a:	09 f4       	brne	.+2      	; 0x34e <UART_init_set+0x6c>
 34c:	44 c0       	rjmp	.+136    	; 0x3d6 <UART_init_set+0xf4>
 34e:	60 38       	cpi	r22, 0x80	; 128
 350:	20 e7       	ldi	r18, 0x70	; 112
 352:	72 07       	cpc	r23, r18
 354:	81 05       	cpc	r24, r1
 356:	91 05       	cpc	r25, r1
 358:	09 f4       	brne	.+2      	; 0x35c <UART_init_set+0x7a>
 35a:	3f c0       	rjmp	.+126    	; 0x3da <UART_init_set+0xf8>
 35c:	60 34       	cpi	r22, 0x40	; 64
 35e:	78 43       	sbci	r23, 0x38	; 56
 360:	81 05       	cpc	r24, r1
 362:	91 05       	cpc	r25, r1
 364:	09 f0       	breq	.+2      	; 0x368 <UART_init_set+0x86>
 366:	4b c0       	rjmp	.+150    	; 0x3fe <UART_init_set+0x11c>
 368:	34 c0       	rjmp	.+104    	; 0x3d2 <UART_init_set+0xf0>
 36a:	61 15       	cp	r22, r1
 36c:	24 e8       	ldi	r18, 0x84	; 132
 36e:	72 07       	cpc	r23, r18
 370:	23 e0       	ldi	r18, 0x03	; 3
 372:	82 07       	cpc	r24, r18
 374:	91 05       	cpc	r25, r1
 376:	d9 f1       	breq	.+118    	; 0x3ee <UART_init_set+0x10c>
 378:	a0 f4       	brcc	.+40     	; 0x3a2 <UART_init_set+0xc0>
 37a:	61 15       	cp	r22, r1
 37c:	2c e2       	ldi	r18, 0x2C	; 44
 37e:	72 07       	cpc	r23, r18
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	82 07       	cpc	r24, r18
 384:	91 05       	cpc	r25, r1
 386:	79 f1       	breq	.+94     	; 0x3e6 <UART_init_set+0x104>
 388:	61 15       	cp	r22, r1
 38a:	22 ec       	ldi	r18, 0xC2	; 194
 38c:	72 07       	cpc	r23, r18
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	82 07       	cpc	r24, r18
 392:	91 05       	cpc	r25, r1
 394:	51 f1       	breq	.+84     	; 0x3ea <UART_init_set+0x108>
 396:	61 15       	cp	r22, r1
 398:	71 4e       	sbci	r23, 0xE1	; 225
 39a:	81 05       	cpc	r24, r1
 39c:	91 05       	cpc	r25, r1
 39e:	79 f5       	brne	.+94     	; 0x3fe <UART_init_set+0x11c>
 3a0:	20 c0       	rjmp	.+64     	; 0x3e2 <UART_init_set+0x100>
 3a2:	60 32       	cpi	r22, 0x20	; 32
 3a4:	21 ea       	ldi	r18, 0xA1	; 161
 3a6:	72 07       	cpc	r23, r18
 3a8:	27 e0       	ldi	r18, 0x07	; 7
 3aa:	82 07       	cpc	r24, r18
 3ac:	91 05       	cpc	r25, r1
 3ae:	19 f1       	breq	.+70     	; 0x3f6 <UART_init_set+0x114>
 3b0:	60 34       	cpi	r22, 0x40	; 64
 3b2:	22 e4       	ldi	r18, 0x42	; 66
 3b4:	72 07       	cpc	r23, r18
 3b6:	2f e0       	ldi	r18, 0x0F	; 15
 3b8:	82 07       	cpc	r24, r18
 3ba:	91 05       	cpc	r25, r1
 3bc:	f1 f0       	breq	.+60     	; 0x3fa <UART_init_set+0x118>
 3be:	60 39       	cpi	r22, 0x90	; 144
 3c0:	70 4d       	sbci	r23, 0xD0	; 208
 3c2:	83 40       	sbci	r24, 0x03	; 3
 3c4:	91 05       	cpc	r25, r1
 3c6:	d9 f4       	brne	.+54     	; 0x3fe <UART_init_set+0x11c>
 3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <UART_init_set+0x110>
 3ca:	20 ea       	ldi	r18, 0xA0	; 160
 3cc:	9f c0       	rjmp	.+318    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3ce:	27 e6       	ldi	r18, 0x67	; 103
 3d0:	9d c0       	rjmp	.+314    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3d2:	24 e4       	ldi	r18, 0x44	; 68
 3d4:	9b c0       	rjmp	.+310    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3d6:	23 e3       	ldi	r18, 0x33	; 51
 3d8:	99 c0       	rjmp	.+306    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3da:	22 e2       	ldi	r18, 0x22	; 34
 3dc:	97 c0       	rjmp	.+302    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3de:	29 e1       	ldi	r18, 0x19	; 25
 3e0:	95 c0       	rjmp	.+298    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3e2:	20 e1       	ldi	r18, 0x10	; 16
 3e4:	93 c0       	rjmp	.+294    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3e6:	2c e0       	ldi	r18, 0x0C	; 12
 3e8:	91 c0       	rjmp	.+290    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3ea:	28 e0       	ldi	r18, 0x08	; 8
 3ec:	8f c0       	rjmp	.+286    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3ee:	23 e0       	ldi	r18, 0x03	; 3
 3f0:	8d c0       	rjmp	.+282    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3f2:	23 e0       	ldi	r18, 0x03	; 3
 3f4:	8b c0       	rjmp	.+278    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	89 c0       	rjmp	.+274    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	87 c0       	rjmp	.+270    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 3fe:	27 e6       	ldi	r18, 0x67	; 103
 400:	85 c0       	rjmp	.+266    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 402:	42 30       	cpi	r20, 0x02	; 2
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	82 c0       	rjmp	.+260    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 408:	61 15       	cp	r22, r1
 40a:	26 e9       	ldi	r18, 0x96	; 150
 40c:	72 07       	cpc	r23, r18
 40e:	81 05       	cpc	r24, r1
 410:	91 05       	cpc	r25, r1
 412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	66 c0       	rjmp	.+204    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 416:	58 f5       	brcc	.+86     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 418:	60 38       	cpi	r22, 0x80	; 128
 41a:	25 e2       	ldi	r18, 0x25	; 37
 41c:	72 07       	cpc	r23, r18
 41e:	81 05       	cpc	r24, r1
 420:	91 05       	cpc	r25, r1
 422:	09 f4       	brne	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	56 c0       	rjmp	.+172    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 426:	70 f4       	brcc	.+28     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 428:	60 36       	cpi	r22, 0x60	; 96
 42a:	29 e0       	ldi	r18, 0x09	; 9
 42c:	72 07       	cpc	r23, r18
 42e:	81 05       	cpc	r24, r1
 430:	91 05       	cpc	r25, r1
 432:	09 f4       	brne	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 434:	4c c0       	rjmp	.+152    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 436:	60 3c       	cpi	r22, 0xC0	; 192
 438:	72 41       	sbci	r23, 0x12	; 18
 43a:	81 05       	cpc	r24, r1
 43c:	91 05       	cpc	r25, r1
 43e:	09 f4       	brne	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	64 c0       	rjmp	.+200    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 442:	5f c0       	rjmp	.+190    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 444:	61 15       	cp	r22, r1
 446:	2b e4       	ldi	r18, 0x4B	; 75
 448:	72 07       	cpc	r23, r18
 44a:	81 05       	cpc	r24, r1
 44c:	91 05       	cpc	r25, r1
 44e:	09 f4       	brne	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	44 c0       	rjmp	.+136    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 452:	60 38       	cpi	r22, 0x80	; 128
 454:	20 e7       	ldi	r18, 0x70	; 112
 456:	72 07       	cpc	r23, r18
 458:	81 05       	cpc	r24, r1
 45a:	91 05       	cpc	r25, r1
 45c:	09 f4       	brne	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45e:	3f c0       	rjmp	.+126    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 460:	60 34       	cpi	r22, 0x40	; 64
 462:	78 43       	sbci	r23, 0x38	; 56
 464:	81 05       	cpc	r24, r1
 466:	91 05       	cpc	r25, r1
 468:	09 f0       	breq	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46a:	4b c0       	rjmp	.+150    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 46c:	34 c0       	rjmp	.+104    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 46e:	61 15       	cp	r22, r1
 470:	24 e8       	ldi	r18, 0x84	; 132
 472:	72 07       	cpc	r23, r18
 474:	23 e0       	ldi	r18, 0x03	; 3
 476:	82 07       	cpc	r24, r18
 478:	91 05       	cpc	r25, r1
 47a:	d9 f1       	breq	.+118    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 47c:	a0 f4       	brcc	.+40     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 47e:	61 15       	cp	r22, r1
 480:	2c e2       	ldi	r18, 0x2C	; 44
 482:	72 07       	cpc	r23, r18
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	82 07       	cpc	r24, r18
 488:	91 05       	cpc	r25, r1
 48a:	79 f1       	breq	.+94     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 48c:	61 15       	cp	r22, r1
 48e:	22 ec       	ldi	r18, 0xC2	; 194
 490:	72 07       	cpc	r23, r18
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	82 07       	cpc	r24, r18
 496:	91 05       	cpc	r25, r1
 498:	51 f1       	breq	.+84     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 49a:	61 15       	cp	r22, r1
 49c:	71 4e       	sbci	r23, 0xE1	; 225
 49e:	81 05       	cpc	r24, r1
 4a0:	91 05       	cpc	r25, r1
 4a2:	79 f5       	brne	.+94     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4a4:	20 c0       	rjmp	.+64     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4a6:	60 32       	cpi	r22, 0x20	; 32
 4a8:	21 ea       	ldi	r18, 0xA1	; 161
 4aa:	72 07       	cpc	r23, r18
 4ac:	27 e0       	ldi	r18, 0x07	; 7
 4ae:	82 07       	cpc	r24, r18
 4b0:	91 05       	cpc	r25, r1
 4b2:	19 f1       	breq	.+70     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4b4:	60 34       	cpi	r22, 0x40	; 64
 4b6:	22 e4       	ldi	r18, 0x42	; 66
 4b8:	72 07       	cpc	r23, r18
 4ba:	2f e0       	ldi	r18, 0x0F	; 15
 4bc:	82 07       	cpc	r24, r18
 4be:	91 05       	cpc	r25, r1
 4c0:	f1 f0       	breq	.+60     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4c2:	60 39       	cpi	r22, 0x90	; 144
 4c4:	70 4d       	sbci	r23, 0xD0	; 208
 4c6:	83 40       	sbci	r24, 0x03	; 3
 4c8:	91 05       	cpc	r25, r1
 4ca:	d9 f4       	brne	.+54     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4cc:	14 c0       	rjmp	.+40     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4ce:	20 e4       	ldi	r18, 0x40	; 64
 4d0:	1d c0       	rjmp	.+58     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4d2:	2f ec       	ldi	r18, 0xCF	; 207
 4d4:	1b c0       	rjmp	.+54     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4d6:	2a e8       	ldi	r18, 0x8A	; 138
 4d8:	19 c0       	rjmp	.+50     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4da:	27 e6       	ldi	r18, 0x67	; 103
 4dc:	17 c0       	rjmp	.+46     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4de:	24 e4       	ldi	r18, 0x44	; 68
 4e0:	15 c0       	rjmp	.+42     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4e2:	23 e3       	ldi	r18, 0x33	; 51
 4e4:	13 c0       	rjmp	.+38     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4e6:	22 e2       	ldi	r18, 0x22	; 34
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4ea:	29 e1       	ldi	r18, 0x19	; 25
 4ec:	0f c0       	rjmp	.+30     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4ee:	20 e1       	ldi	r18, 0x10	; 16
 4f0:	0d c0       	rjmp	.+26     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4f2:	28 e0       	ldi	r18, 0x08	; 8
 4f4:	0b c0       	rjmp	.+22     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4f6:	27 e0       	ldi	r18, 0x07	; 7
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4fa:	23 e0       	ldi	r18, 0x03	; 3
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	05 c0       	rjmp	.+10     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 502:	2f ec       	ldi	r18, 0xCF	; 207
 504:	03 c0       	rjmp	.+6      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 506:	2f ec       	ldi	r18, 0xCF	; 207
 508:	01 c0       	rjmp	.+2      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50a:	20 ea       	ldi	r18, 0xA0	; 160
 50c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 510:	e2 ec       	ldi	r30, 0xC2	; 194
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	86 60       	ori	r24, 0x06	; 6
 518:	80 83       	st	Z, r24
 51a:	e1 ec       	ldi	r30, 0xC1	; 193
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	80 61       	ori	r24, 0x10	; 16
 522:	80 83       	st	Z, r24
 524:	80 81       	ld	r24, Z
 526:	88 60       	ori	r24, 0x08	; 8
 528:	80 83       	st	Z, r24
 52a:	08 95       	ret

0000052c <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR0A & (1 << UDRE0)));
 52c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 530:	95 ff       	sbrs	r25, 5
 532:	fc cf       	rjmp	.-8      	; 0x52c <UART_transmit>
	UDR0 = data;
 534:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 538:	08 95       	ret

0000053a <UART_printString>:
}

void UART_printString(char *str) {
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++) {
 544:	c0 e0       	ldi	r28, 0x00	; 0
 546:	d0 e0       	ldi	r29, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <UART_printString+0x14>
		UART_transmit(str[i]);
 54a:	f0 df       	rcall	.-32     	; 0x52c <UART_transmit>
	while ( !(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void UART_printString(char *str) {
	for (int i = 0; str[i]; i++) {
 54c:	21 96       	adiw	r28, 0x01	; 1
 54e:	f8 01       	movw	r30, r16
 550:	ec 0f       	add	r30, r28
 552:	fd 1f       	adc	r31, r29
 554:	80 81       	ld	r24, Z
 556:	81 11       	cpse	r24, r1
 558:	f8 cf       	rjmp	.-16     	; 0x54a <UART_printString+0x10>
		UART_transmit(str[i]);
	}
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
