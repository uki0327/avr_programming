
Atmega128_20201218_Test_Q2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002dc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011d7  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fe  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bb3  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000646  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ebf  00000000  00000000  000035a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0f d0       	rcall	.+30     	; 0xd2 <main>
  b4:	11 c1       	rjmp	.+546    	; 0x2d8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <shiftLed>:
#include "UART_USE_1.h"

char ledState = 0xFE;

void shiftLed() {
	if(ledState == 0b01111111) {
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	8f 37       	cpi	r24, 0x7F	; 127
  be:	21 f4       	brne	.+8      	; 0xc8 <shiftLed+0x10>
		ledState = 0b11111110;
  c0:	8e ef       	ldi	r24, 0xFE	; 254
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	08 95       	ret
	} else {
		ledState = (ledState << 1) + 1;
  c8:	88 0f       	add	r24, r24
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	08 95       	ret

000000d2 <main>:
	}
}

int main(void)
{
	UART_INIT(9600,2);
  d2:	42 e0       	ldi	r20, 0x02	; 2
  d4:	60 e8       	ldi	r22, 0x80	; 128
  d6:	75 e2       	ldi	r23, 0x25	; 37
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	16 d0       	rcall	.+44     	; 0x10a <UART_INIT>
	
    DDRC = 0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
  e2:	85 bb       	out	0x15, r24	; 21
	
    while (1) 
    {
		UART_print8bitBinaryInc0f(ledState);
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	62 d0       	rcall	.+196    	; 0x1ae <UART_print8bitBinaryInc0f>
		UART_transmit('\n');
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	44 d0       	rcall	.+136    	; 0x176 <UART_transmit>
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTC = ledState;
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	2f e3       	ldi	r18, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x28>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x32>
 104:	00 00       	nop
		_delay_ms(5000);
		shiftLed();
 106:	d8 df       	rcall	.-80     	; 0xb8 <shiftLed>
 108:	ed cf       	rjmp	.-38     	; 0xe4 <main+0x12>

0000010a <UART_INIT>:
 10a:	42 30       	cpi	r20, 0x02	; 2
	
	index = 7;
	for (i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
	}
}
 10c:	31 f4       	brne	.+12     	; 0x11a <UART_INIT+0x10>
 10e:	eb e9       	ldi	r30, 0x9B	; 155
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	20 81       	ld	r18, Z
 114:	22 60       	ori	r18, 0x02	; 2
 116:	20 83       	st	Z, r18
 118:	04 c0       	rjmp	.+8      	; 0x122 <UART_INIT+0x18>
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	11 f4       	brne	.+4      	; 0x122 <UART_INIT+0x18>
 11e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 122:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	29 f0       	breq	.+10     	; 0x134 <UART_INIT+0x2a>
 12a:	42 30       	cpi	r20, 0x02	; 2
 12c:	31 f4       	brne	.+12     	; 0x13a <UART_INIT+0x30>
 12e:	a8 e0       	ldi	r26, 0x08	; 8
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	05 c0       	rjmp	.+10     	; 0x13e <UART_INIT+0x34>
 134:	a0 e1       	ldi	r26, 0x10	; 16
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <UART_INIT+0x34>
 13a:	a2 e0       	ldi	r26, 0x02	; 2
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	9b 01       	movw	r18, r22
 140:	ac 01       	movw	r20, r24
 142:	ba d0       	rcall	.+372    	; 0x2b8 <__mulshisi3>
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	74 e2       	ldi	r23, 0x24	; 36
 14c:	84 ef       	ldi	r24, 0xF4	; 244
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	82 d0       	rcall	.+260    	; 0x256 <__udivmodsi4>
 152:	21 50       	subi	r18, 0x01	; 1
 154:	31 09       	sbc	r19, r1
 156:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 15a:	ed e9       	ldi	r30, 0x9D	; 157
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	86 60       	ori	r24, 0x06	; 6
 162:	80 83       	st	Z, r24
 164:	ea e9       	ldi	r30, 0x9A	; 154
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <UART_transmit>:
 176:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 17a:	95 ff       	sbrs	r25, 5
 17c:	fc cf       	rjmp	.-8      	; 0x176 <UART_transmit>
 17e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 182:	08 95       	ret

00000184 <UART_printString>:
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	8c 01       	movw	r16, r24
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <UART_printString+0x14>
 194:	f0 df       	rcall	.-32     	; 0x176 <UART_transmit>
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	f8 01       	movw	r30, r16
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	80 81       	ld	r24, Z
 1a0:	81 11       	cpse	r24, r1
 1a2:	f8 cf       	rjmp	.-16     	; 0x194 <UART_printString+0x10>
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <UART_print8bitBinaryInc0f>:

void UART_print8bitBinaryInc0f(uint8_t no) {
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	28 97       	sbiw	r28, 0x08	; 8
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
	char numString[8] = "0";
 1c6:	20 e3       	ldi	r18, 0x30	; 48
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	3a 83       	std	Y+2, r19	; 0x02
 1cc:	29 83       	std	Y+1, r18	; 0x01
 1ce:	fe 01       	movw	r30, r28
 1d0:	33 96       	adiw	r30, 0x03	; 3
 1d2:	96 e0       	ldi	r25, 0x06	; 6
 1d4:	df 01       	movw	r26, r30
 1d6:	1d 92       	st	X+, r1
 1d8:	9a 95       	dec	r25
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <UART_print8bitBinaryInc0f+0x28>
	int i, index = 0;

	for (i = 0; i<8; i++ ) {
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <UART_print8bitBinaryInc0f+0x4e>
		numString[i] = no % 2 + '0';
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	98 2f       	mov	r25, r24
 1f0:	91 70       	andi	r25, 0x01	; 1
 1f2:	90 5d       	subi	r25, 0xD0	; 208
 1f4:	90 83       	st	Z, r25
		no = no / 2;
 1f6:	86 95       	lsr	r24

void UART_print8bitBinaryInc0f(uint8_t no) {
	char numString[8] = "0";
	int i, index = 0;

	for (i = 0; i<8; i++ ) {
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	28 30       	cpi	r18, 0x08	; 8
 1fe:	31 05       	cpc	r19, r1
 200:	84 f3       	brlt	.-32     	; 0x1e2 <UART_print8bitBinaryInc0f+0x34>
		numString[i] = no % 2 + '0';
		no = no / 2;
	}
	numString[i] = '\0';
 202:	e1 e0       	ldi	r30, 0x01	; 1
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	e2 0f       	add	r30, r18
 20c:	f3 1f       	adc	r31, r19
 20e:	10 82       	st	Z, r1
	
	index = 7;
	
	UART_printString("0b ");
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	b7 df       	rcall	.-146    	; 0x184 <UART_printString>
	for (i = index; i >= 0; i--) {
 216:	07 e0       	ldi	r16, 0x07	; 7
 218:	10 e0       	ldi	r17, 0x00	; 0
 21a:	10 c0       	rjmp	.+32     	; 0x23c <UART_print8bitBinaryInc0f+0x8e>
		UART_transmit(numString[i]);
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	e0 0f       	add	r30, r16
 226:	f1 1f       	adc	r31, r17
 228:	80 81       	ld	r24, Z
 22a:	a5 df       	rcall	.-182    	; 0x176 <UART_transmit>
		if(i == 4) UART_printString(" ");
 22c:	04 30       	cpi	r16, 0x04	; 4
 22e:	11 05       	cpc	r17, r1
 230:	19 f4       	brne	.+6      	; 0x238 <UART_print8bitBinaryInc0f+0x8a>
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	a6 df       	rcall	.-180    	; 0x184 <UART_printString>
	numString[i] = '\0';
	
	index = 7;
	
	UART_printString("0b ");
	for (i = index; i >= 0; i--) {
 238:	01 50       	subi	r16, 0x01	; 1
 23a:	11 09       	sbc	r17, r1
 23c:	11 23       	and	r17, r17
 23e:	74 f7       	brge	.-36     	; 0x21c <UART_print8bitBinaryInc0f+0x6e>
		UART_transmit(numString[i]);
		if(i == 4) UART_printString(" ");
	}
}
 240:	28 96       	adiw	r28, 0x08	; 8
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <__udivmodsi4>:
 256:	a1 e2       	ldi	r26, 0x21	; 33
 258:	1a 2e       	mov	r1, r26
 25a:	aa 1b       	sub	r26, r26
 25c:	bb 1b       	sub	r27, r27
 25e:	fd 01       	movw	r30, r26
 260:	0d c0       	rjmp	.+26     	; 0x27c <__udivmodsi4_ep>

00000262 <__udivmodsi4_loop>:
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	ee 1f       	adc	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	a2 17       	cp	r26, r18
 26c:	b3 07       	cpc	r27, r19
 26e:	e4 07       	cpc	r30, r20
 270:	f5 07       	cpc	r31, r21
 272:	20 f0       	brcs	.+8      	; 0x27c <__udivmodsi4_ep>
 274:	a2 1b       	sub	r26, r18
 276:	b3 0b       	sbc	r27, r19
 278:	e4 0b       	sbc	r30, r20
 27a:	f5 0b       	sbc	r31, r21

0000027c <__udivmodsi4_ep>:
 27c:	66 1f       	adc	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	1a 94       	dec	r1
 286:	69 f7       	brne	.-38     	; 0x262 <__udivmodsi4_loop>
 288:	60 95       	com	r22
 28a:	70 95       	com	r23
 28c:	80 95       	com	r24
 28e:	90 95       	com	r25
 290:	9b 01       	movw	r18, r22
 292:	ac 01       	movw	r20, r24
 294:	bd 01       	movw	r22, r26
 296:	cf 01       	movw	r24, r30
 298:	08 95       	ret

0000029a <__umulhisi3>:
 29a:	a2 9f       	mul	r26, r18
 29c:	b0 01       	movw	r22, r0
 29e:	b3 9f       	mul	r27, r19
 2a0:	c0 01       	movw	r24, r0
 2a2:	a3 9f       	mul	r26, r19
 2a4:	70 0d       	add	r23, r0
 2a6:	81 1d       	adc	r24, r1
 2a8:	11 24       	eor	r1, r1
 2aa:	91 1d       	adc	r25, r1
 2ac:	b2 9f       	mul	r27, r18
 2ae:	70 0d       	add	r23, r0
 2b0:	81 1d       	adc	r24, r1
 2b2:	11 24       	eor	r1, r1
 2b4:	91 1d       	adc	r25, r1
 2b6:	08 95       	ret

000002b8 <__mulshisi3>:
 2b8:	b7 ff       	sbrs	r27, 7
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <__muluhisi3>

000002bc <__mulohisi3>:
 2bc:	03 d0       	rcall	.+6      	; 0x2c4 <__muluhisi3>
 2be:	82 1b       	sub	r24, r18
 2c0:	93 0b       	sbc	r25, r19
 2c2:	08 95       	ret

000002c4 <__muluhisi3>:
 2c4:	ea df       	rcall	.-44     	; 0x29a <__umulhisi3>
 2c6:	a5 9f       	mul	r26, r21
 2c8:	90 0d       	add	r25, r0
 2ca:	b4 9f       	mul	r27, r20
 2cc:	90 0d       	add	r25, r0
 2ce:	a4 9f       	mul	r26, r20
 2d0:	80 0d       	add	r24, r0
 2d2:	91 1d       	adc	r25, r1
 2d4:	11 24       	eor	r1, r1
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
