
Atmega128A_Uart_Test_for_malloc_array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000008dc  00000970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800128  00800128  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d62  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a2  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006df  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d8  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 32       	cpi	r26, 0x2C	; 44
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	09 c4       	rjmp	.+2066   	; 0x8d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "UART_malloc.h"


int main(void)
{
    UART_INIT(9600, 2);
  c8:	42 e0       	ldi	r20, 0x02	; 2
  ca:	60 e8       	ldi	r22, 0x80	; 128
  cc:	75 e2       	ldi	r23, 0x25	; 37
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	1f d0       	rcall	.+62     	; 0x112 <UART_INIT>
    while (1) 
    {
		unsigned long a = 728961;
		UART_printNumber(a,10,0,0);
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	4a e0       	ldi	r20, 0x0A	; 10
  da:	61 e8       	ldi	r22, 0x81	; 129
  dc:	7f e1       	ldi	r23, 0x1F	; 31
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	67 d1       	rcall	.+718    	; 0x3b2 <UART_printNumber>
		UART_printString("  ");
  e4:	86 e1       	ldi	r24, 0x16	; 22
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	37 d1       	rcall	.+622    	; 0x358 <UART_printString>
		UART_printNumber(a, 16, 1, 1);
  ea:	01 e0       	ldi	r16, 0x01	; 1
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	40 e1       	ldi	r20, 0x10	; 16
  f0:	61 e8       	ldi	r22, 0x81	; 129
  f2:	7f e1       	ldi	r23, 0x1F	; 31
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	90 e0       	ldi	r25, 0x00	; 0
		UART_transmit('\n');
  f8:	5c d1       	rcall	.+696    	; 0x3b2 <UART_printNumber>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	29 d1       	rcall	.+594    	; 0x350 <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x3c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x46>
 10e:	00 00       	nop
 110:	e1 cf       	rjmp	.-62     	; 0xd4 <main+0xc>

00000112 <UART_INIT>:
}

unsigned char UART_receive(void) {
	while ( !(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 112:	42 30       	cpi	r20, 0x02	; 2
 114:	21 f4       	brne	.+8      	; 0x11e <UART_INIT+0xc>
 116:	3b b1       	in	r19, 0x0b	; 11
 118:	32 60       	ori	r19, 0x02	; 2
 11a:	3b b9       	out	0x0b, r19	; 11
 11c:	03 c0       	rjmp	.+6      	; 0x124 <UART_INIT+0x12>
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	09 f4       	brne	.+2      	; 0x124 <UART_INIT+0x12>
 122:	1b b8       	out	0x0b, r1	; 11
 124:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	09 f0       	breq	.+2      	; 0x12e <UART_INIT+0x1c>
 12c:	7f c0       	rjmp	.+254    	; 0x22c <UART_INIT+0x11a>
 12e:	61 15       	cp	r22, r1
 130:	26 e9       	ldi	r18, 0x96	; 150
 132:	72 07       	cpc	r23, r18
 134:	81 05       	cpc	r24, r1
 136:	91 05       	cpc	r25, r1
 138:	09 f4       	brne	.+2      	; 0x13c <UART_INIT+0x2a>
 13a:	66 c0       	rjmp	.+204    	; 0x208 <UART_INIT+0xf6>
 13c:	58 f5       	brcc	.+86     	; 0x194 <UART_INIT+0x82>
 13e:	60 38       	cpi	r22, 0x80	; 128
 140:	25 e2       	ldi	r18, 0x25	; 37
 142:	72 07       	cpc	r23, r18
 144:	81 05       	cpc	r24, r1
 146:	91 05       	cpc	r25, r1
 148:	09 f4       	brne	.+2      	; 0x14c <UART_INIT+0x3a>
 14a:	56 c0       	rjmp	.+172    	; 0x1f8 <UART_INIT+0xe6>
 14c:	70 f4       	brcc	.+28     	; 0x16a <UART_INIT+0x58>
 14e:	60 36       	cpi	r22, 0x60	; 96
 150:	29 e0       	ldi	r18, 0x09	; 9
 152:	72 07       	cpc	r23, r18
 154:	81 05       	cpc	r24, r1
 156:	91 05       	cpc	r25, r1
 158:	09 f4       	brne	.+2      	; 0x15c <UART_INIT+0x4a>
 15a:	4c c0       	rjmp	.+152    	; 0x1f4 <UART_INIT+0xe2>
 15c:	60 3c       	cpi	r22, 0xC0	; 192
 15e:	72 41       	sbci	r23, 0x12	; 18
 160:	81 05       	cpc	r24, r1
 162:	91 05       	cpc	r25, r1
 164:	09 f4       	brne	.+2      	; 0x168 <UART_INIT+0x56>
 166:	e4 c0       	rjmp	.+456    	; 0x330 <UART_INIT+0x21e>
 168:	5f c0       	rjmp	.+190    	; 0x228 <UART_INIT+0x116>
 16a:	61 15       	cp	r22, r1
 16c:	2b e4       	ldi	r18, 0x4B	; 75
 16e:	72 07       	cpc	r23, r18
 170:	81 05       	cpc	r24, r1
 172:	91 05       	cpc	r25, r1
 174:	09 f4       	brne	.+2      	; 0x178 <UART_INIT+0x66>
 176:	44 c0       	rjmp	.+136    	; 0x200 <UART_INIT+0xee>
 178:	60 38       	cpi	r22, 0x80	; 128
 17a:	20 e7       	ldi	r18, 0x70	; 112
 17c:	72 07       	cpc	r23, r18
 17e:	81 05       	cpc	r24, r1
 180:	91 05       	cpc	r25, r1
 182:	09 f4       	brne	.+2      	; 0x186 <UART_INIT+0x74>
 184:	3f c0       	rjmp	.+126    	; 0x204 <UART_INIT+0xf2>
 186:	60 34       	cpi	r22, 0x40	; 64
 188:	78 43       	sbci	r23, 0x38	; 56
 18a:	81 05       	cpc	r24, r1
 18c:	91 05       	cpc	r25, r1
 18e:	09 f0       	breq	.+2      	; 0x192 <UART_INIT+0x80>
 190:	4b c0       	rjmp	.+150    	; 0x228 <UART_INIT+0x116>
 192:	34 c0       	rjmp	.+104    	; 0x1fc <UART_INIT+0xea>
 194:	61 15       	cp	r22, r1
 196:	24 e8       	ldi	r18, 0x84	; 132
 198:	72 07       	cpc	r23, r18
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	82 07       	cpc	r24, r18
 19e:	91 05       	cpc	r25, r1
 1a0:	d9 f1       	breq	.+118    	; 0x218 <UART_INIT+0x106>
 1a2:	a0 f4       	brcc	.+40     	; 0x1cc <UART_INIT+0xba>
 1a4:	61 15       	cp	r22, r1
 1a6:	2c e2       	ldi	r18, 0x2C	; 44
 1a8:	72 07       	cpc	r23, r18
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	82 07       	cpc	r24, r18
 1ae:	91 05       	cpc	r25, r1
 1b0:	79 f1       	breq	.+94     	; 0x210 <UART_INIT+0xfe>
 1b2:	61 15       	cp	r22, r1
 1b4:	22 ec       	ldi	r18, 0xC2	; 194
 1b6:	72 07       	cpc	r23, r18
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	82 07       	cpc	r24, r18
 1bc:	91 05       	cpc	r25, r1
 1be:	51 f1       	breq	.+84     	; 0x214 <UART_INIT+0x102>
 1c0:	61 15       	cp	r22, r1
 1c2:	71 4e       	sbci	r23, 0xE1	; 225
 1c4:	81 05       	cpc	r24, r1
 1c6:	91 05       	cpc	r25, r1
 1c8:	79 f5       	brne	.+94     	; 0x228 <UART_INIT+0x116>
 1ca:	20 c0       	rjmp	.+64     	; 0x20c <UART_INIT+0xfa>
 1cc:	60 32       	cpi	r22, 0x20	; 32
 1ce:	21 ea       	ldi	r18, 0xA1	; 161
 1d0:	72 07       	cpc	r23, r18
 1d2:	27 e0       	ldi	r18, 0x07	; 7
 1d4:	82 07       	cpc	r24, r18
 1d6:	91 05       	cpc	r25, r1
 1d8:	19 f1       	breq	.+70     	; 0x220 <UART_INIT+0x10e>
 1da:	60 34       	cpi	r22, 0x40	; 64
 1dc:	22 e4       	ldi	r18, 0x42	; 66
 1de:	72 07       	cpc	r23, r18
 1e0:	2f e0       	ldi	r18, 0x0F	; 15
 1e2:	82 07       	cpc	r24, r18
 1e4:	91 05       	cpc	r25, r1
 1e6:	f1 f0       	breq	.+60     	; 0x224 <UART_INIT+0x112>
 1e8:	60 39       	cpi	r22, 0x90	; 144
 1ea:	70 4d       	sbci	r23, 0xD0	; 208
 1ec:	83 40       	sbci	r24, 0x03	; 3
 1ee:	91 05       	cpc	r25, r1
 1f0:	d9 f4       	brne	.+54     	; 0x228 <UART_INIT+0x116>
 1f2:	14 c0       	rjmp	.+40     	; 0x21c <UART_INIT+0x10a>
 1f4:	20 ea       	ldi	r18, 0xA0	; 160
 1f6:	9f c0       	rjmp	.+318    	; 0x336 <UART_INIT+0x224>
 1f8:	27 e6       	ldi	r18, 0x67	; 103
 1fa:	9d c0       	rjmp	.+314    	; 0x336 <UART_INIT+0x224>
 1fc:	24 e4       	ldi	r18, 0x44	; 68
 1fe:	9b c0       	rjmp	.+310    	; 0x336 <UART_INIT+0x224>
 200:	23 e3       	ldi	r18, 0x33	; 51
 202:	99 c0       	rjmp	.+306    	; 0x336 <UART_INIT+0x224>
 204:	22 e2       	ldi	r18, 0x22	; 34
 206:	97 c0       	rjmp	.+302    	; 0x336 <UART_INIT+0x224>
 208:	29 e1       	ldi	r18, 0x19	; 25
 20a:	95 c0       	rjmp	.+298    	; 0x336 <UART_INIT+0x224>
 20c:	20 e1       	ldi	r18, 0x10	; 16
 20e:	93 c0       	rjmp	.+294    	; 0x336 <UART_INIT+0x224>
 210:	2c e0       	ldi	r18, 0x0C	; 12
 212:	91 c0       	rjmp	.+290    	; 0x336 <UART_INIT+0x224>
 214:	28 e0       	ldi	r18, 0x08	; 8
 216:	8f c0       	rjmp	.+286    	; 0x336 <UART_INIT+0x224>
 218:	23 e0       	ldi	r18, 0x03	; 3
 21a:	8d c0       	rjmp	.+282    	; 0x336 <UART_INIT+0x224>
 21c:	23 e0       	ldi	r18, 0x03	; 3
 21e:	8b c0       	rjmp	.+278    	; 0x336 <UART_INIT+0x224>
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	89 c0       	rjmp	.+274    	; 0x336 <UART_INIT+0x224>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	87 c0       	rjmp	.+270    	; 0x336 <UART_INIT+0x224>
 228:	27 e6       	ldi	r18, 0x67	; 103
 22a:	85 c0       	rjmp	.+266    	; 0x336 <UART_INIT+0x224>
 22c:	42 30       	cpi	r20, 0x02	; 2
 22e:	09 f0       	breq	.+2      	; 0x232 <UART_INIT+0x120>
 230:	82 c0       	rjmp	.+260    	; 0x336 <UART_INIT+0x224>
 232:	61 15       	cp	r22, r1
 234:	26 e9       	ldi	r18, 0x96	; 150
 236:	72 07       	cpc	r23, r18
 238:	81 05       	cpc	r24, r1
 23a:	91 05       	cpc	r25, r1
 23c:	09 f4       	brne	.+2      	; 0x240 <UART_INIT+0x12e>
 23e:	66 c0       	rjmp	.+204    	; 0x30c <UART_INIT+0x1fa>
 240:	58 f5       	brcc	.+86     	; 0x298 <UART_INIT+0x186>
 242:	60 38       	cpi	r22, 0x80	; 128
 244:	25 e2       	ldi	r18, 0x25	; 37
 246:	72 07       	cpc	r23, r18
 248:	81 05       	cpc	r24, r1
 24a:	91 05       	cpc	r25, r1
 24c:	09 f4       	brne	.+2      	; 0x250 <UART_INIT+0x13e>
 24e:	56 c0       	rjmp	.+172    	; 0x2fc <UART_INIT+0x1ea>
 250:	70 f4       	brcc	.+28     	; 0x26e <UART_INIT+0x15c>
 252:	60 36       	cpi	r22, 0x60	; 96
 254:	29 e0       	ldi	r18, 0x09	; 9
 256:	72 07       	cpc	r23, r18
 258:	81 05       	cpc	r24, r1
 25a:	91 05       	cpc	r25, r1
 25c:	09 f4       	brne	.+2      	; 0x260 <UART_INIT+0x14e>
 25e:	4c c0       	rjmp	.+152    	; 0x2f8 <UART_INIT+0x1e6>
 260:	60 3c       	cpi	r22, 0xC0	; 192
 262:	72 41       	sbci	r23, 0x12	; 18
 264:	81 05       	cpc	r24, r1
 266:	91 05       	cpc	r25, r1
 268:	09 f4       	brne	.+2      	; 0x26c <UART_INIT+0x15a>
 26a:	64 c0       	rjmp	.+200    	; 0x334 <UART_INIT+0x222>
 26c:	5f c0       	rjmp	.+190    	; 0x32c <UART_INIT+0x21a>
 26e:	61 15       	cp	r22, r1
 270:	2b e4       	ldi	r18, 0x4B	; 75
 272:	72 07       	cpc	r23, r18
 274:	81 05       	cpc	r24, r1
 276:	91 05       	cpc	r25, r1
 278:	09 f4       	brne	.+2      	; 0x27c <UART_INIT+0x16a>
 27a:	44 c0       	rjmp	.+136    	; 0x304 <UART_INIT+0x1f2>
 27c:	60 38       	cpi	r22, 0x80	; 128
 27e:	20 e7       	ldi	r18, 0x70	; 112
 280:	72 07       	cpc	r23, r18
 282:	81 05       	cpc	r24, r1
 284:	91 05       	cpc	r25, r1
 286:	09 f4       	brne	.+2      	; 0x28a <UART_INIT+0x178>
 288:	3f c0       	rjmp	.+126    	; 0x308 <UART_INIT+0x1f6>
 28a:	60 34       	cpi	r22, 0x40	; 64
 28c:	78 43       	sbci	r23, 0x38	; 56
 28e:	81 05       	cpc	r24, r1
 290:	91 05       	cpc	r25, r1
 292:	09 f0       	breq	.+2      	; 0x296 <UART_INIT+0x184>
 294:	4b c0       	rjmp	.+150    	; 0x32c <UART_INIT+0x21a>
 296:	34 c0       	rjmp	.+104    	; 0x300 <UART_INIT+0x1ee>
 298:	61 15       	cp	r22, r1
 29a:	24 e8       	ldi	r18, 0x84	; 132
 29c:	72 07       	cpc	r23, r18
 29e:	23 e0       	ldi	r18, 0x03	; 3
 2a0:	82 07       	cpc	r24, r18
 2a2:	91 05       	cpc	r25, r1
 2a4:	d9 f1       	breq	.+118    	; 0x31c <UART_INIT+0x20a>
 2a6:	a0 f4       	brcc	.+40     	; 0x2d0 <UART_INIT+0x1be>
 2a8:	61 15       	cp	r22, r1
 2aa:	2c e2       	ldi	r18, 0x2C	; 44
 2ac:	72 07       	cpc	r23, r18
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	82 07       	cpc	r24, r18
 2b2:	91 05       	cpc	r25, r1
 2b4:	79 f1       	breq	.+94     	; 0x314 <UART_INIT+0x202>
 2b6:	61 15       	cp	r22, r1
 2b8:	22 ec       	ldi	r18, 0xC2	; 194
 2ba:	72 07       	cpc	r23, r18
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	82 07       	cpc	r24, r18
 2c0:	91 05       	cpc	r25, r1
 2c2:	51 f1       	breq	.+84     	; 0x318 <UART_INIT+0x206>
 2c4:	61 15       	cp	r22, r1
 2c6:	71 4e       	sbci	r23, 0xE1	; 225
 2c8:	81 05       	cpc	r24, r1
 2ca:	91 05       	cpc	r25, r1
 2cc:	79 f5       	brne	.+94     	; 0x32c <UART_INIT+0x21a>
 2ce:	20 c0       	rjmp	.+64     	; 0x310 <UART_INIT+0x1fe>
 2d0:	60 32       	cpi	r22, 0x20	; 32
 2d2:	21 ea       	ldi	r18, 0xA1	; 161
 2d4:	72 07       	cpc	r23, r18
 2d6:	27 e0       	ldi	r18, 0x07	; 7
 2d8:	82 07       	cpc	r24, r18
 2da:	91 05       	cpc	r25, r1
 2dc:	19 f1       	breq	.+70     	; 0x324 <UART_INIT+0x212>
 2de:	60 34       	cpi	r22, 0x40	; 64
 2e0:	22 e4       	ldi	r18, 0x42	; 66
 2e2:	72 07       	cpc	r23, r18
 2e4:	2f e0       	ldi	r18, 0x0F	; 15
 2e6:	82 07       	cpc	r24, r18
 2e8:	91 05       	cpc	r25, r1
 2ea:	f1 f0       	breq	.+60     	; 0x328 <UART_INIT+0x216>
 2ec:	60 39       	cpi	r22, 0x90	; 144
 2ee:	70 4d       	sbci	r23, 0xD0	; 208
 2f0:	83 40       	sbci	r24, 0x03	; 3
 2f2:	91 05       	cpc	r25, r1
 2f4:	d9 f4       	brne	.+54     	; 0x32c <UART_INIT+0x21a>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <UART_INIT+0x20e>
 2f8:	20 e4       	ldi	r18, 0x40	; 64
 2fa:	1d c0       	rjmp	.+58     	; 0x336 <UART_INIT+0x224>
 2fc:	2f ec       	ldi	r18, 0xCF	; 207
 2fe:	1b c0       	rjmp	.+54     	; 0x336 <UART_INIT+0x224>
 300:	2a e8       	ldi	r18, 0x8A	; 138
 302:	19 c0       	rjmp	.+50     	; 0x336 <UART_INIT+0x224>
 304:	27 e6       	ldi	r18, 0x67	; 103
 306:	17 c0       	rjmp	.+46     	; 0x336 <UART_INIT+0x224>
 308:	24 e4       	ldi	r18, 0x44	; 68
 30a:	15 c0       	rjmp	.+42     	; 0x336 <UART_INIT+0x224>
 30c:	23 e3       	ldi	r18, 0x33	; 51
 30e:	13 c0       	rjmp	.+38     	; 0x336 <UART_INIT+0x224>
 310:	22 e2       	ldi	r18, 0x22	; 34
 312:	11 c0       	rjmp	.+34     	; 0x336 <UART_INIT+0x224>
 314:	29 e1       	ldi	r18, 0x19	; 25
 316:	0f c0       	rjmp	.+30     	; 0x336 <UART_INIT+0x224>
 318:	20 e1       	ldi	r18, 0x10	; 16
 31a:	0d c0       	rjmp	.+26     	; 0x336 <UART_INIT+0x224>
 31c:	28 e0       	ldi	r18, 0x08	; 8
 31e:	0b c0       	rjmp	.+22     	; 0x336 <UART_INIT+0x224>
 320:	27 e0       	ldi	r18, 0x07	; 7
 322:	09 c0       	rjmp	.+18     	; 0x336 <UART_INIT+0x224>
 324:	23 e0       	ldi	r18, 0x03	; 3
 326:	07 c0       	rjmp	.+14     	; 0x336 <UART_INIT+0x224>
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	05 c0       	rjmp	.+10     	; 0x336 <UART_INIT+0x224>
 32c:	2f ec       	ldi	r18, 0xCF	; 207
 32e:	03 c0       	rjmp	.+6      	; 0x336 <UART_INIT+0x224>
 330:	2f ec       	ldi	r18, 0xCF	; 207
 332:	01 c0       	rjmp	.+2      	; 0x336 <UART_INIT+0x224>
 334:	20 ea       	ldi	r18, 0xA0	; 160
 336:	29 b9       	out	0x09, r18	; 9
 338:	e5 e9       	ldi	r30, 0x95	; 149
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	86 60       	ori	r24, 0x06	; 6
 340:	80 83       	st	Z, r24
 342:	8a b1       	in	r24, 0x0a	; 10
 344:	80 61       	ori	r24, 0x10	; 16
 346:	8a b9       	out	0x0a, r24	; 10
 348:	8a b1       	in	r24, 0x0a	; 10
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	8a b9       	out	0x0a, r24	; 10
 34e:	08 95       	ret

00000350 <UART_transmit>:

void UART_transmit(unsigned char data) {
	while ( !(UCSR0A & (1 << UDRE0)));
 350:	5d 9b       	sbis	0x0b, 5	; 11
 352:	fe cf       	rjmp	.-4      	; 0x350 <UART_transmit>
	UDR0 = data;
 354:	8c b9       	out	0x0c, r24	; 12
 356:	08 95       	ret

00000358 <UART_printString>:
}

void UART_printString(char *str) {
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++) {
 362:	c0 e0       	ldi	r28, 0x00	; 0
 364:	d0 e0       	ldi	r29, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <UART_printString+0x14>
		UART_transmit(str[i]);
 368:	f3 df       	rcall	.-26     	; 0x350 <UART_transmit>
	while ( !(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void UART_printString(char *str) {
	for (int i = 0; str[i]; i++) {
 36a:	21 96       	adiw	r28, 0x01	; 1
 36c:	f8 01       	movw	r30, r16
 36e:	ec 0f       	add	r30, r28
 370:	fd 1f       	adc	r31, r29
 372:	80 81       	ld	r24, Z
 374:	81 11       	cpse	r24, r1
 376:	f8 cf       	rjmp	.-16     	; 0x368 <UART_printString+0x10>
		UART_transmit(str[i]);
	}
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <getStringArrayNum>:
		}
	}
	free(numString);
}

unsigned char getStringArrayNum(unsigned long num, char numeral) {
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	d4 2f       	mov	r29, r20
	char n = 0;

	for(n=0;;n++) {
 388:	c0 e0       	ldi	r28, 0x00	; 0
		if(num < numeral) return n+1;
 38a:	2d 2f       	mov	r18, r29
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	62 17       	cp	r22, r18
 394:	73 07       	cpc	r23, r19
 396:	84 07       	cpc	r24, r20
 398:	95 07       	cpc	r25, r21
 39a:	18 f4       	brcc	.+6      	; 0x3a2 <getStringArrayNum+0x20>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	8c 0f       	add	r24, r28
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <getStringArrayNum+0x2a>
		num = num / numeral;
 3a2:	43 d1       	rcall	.+646    	; 0x62a <__udivmodsi4>
 3a4:	ca 01       	movw	r24, r20
 3a6:	b9 01       	movw	r22, r18
}

unsigned char getStringArrayNum(unsigned long num, char numeral) {
	char n = 0;

	for(n=0;;n++) {
 3a8:	cf 5f       	subi	r28, 0xFF	; 255
		if(num < numeral) return n+1;
		num = num / numeral;
	}
 3aa:	ef cf       	rjmp	.-34     	; 0x38a <getStringArrayNum+0x8>
	
	return 0;	
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <UART_printNumber>:
	for (int i = 0; str[i]; i++) {
		UART_transmit(str[i]);
	}
}

void UART_printNumber(unsigned long num, char numeral, char zero, char format) {
 3b2:	7f 92       	push	r7
 3b4:	8f 92       	push	r8
 3b6:	9f 92       	push	r9
 3b8:	af 92       	push	r10
 3ba:	bf 92       	push	r11
 3bc:	cf 92       	push	r12
 3be:	df 92       	push	r13
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	60 97       	sbiw	r28, 0x10	; 16
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	6b 01       	movw	r12, r22
 3de:	7c 01       	movw	r14, r24
 3e0:	94 2e       	mov	r9, r20
 3e2:	b2 2e       	mov	r11, r18
 3e4:	80 2e       	mov	r8, r16
	
	char san = getStringArrayNum(num, numeral); // String Array Number(자리수)
 3e6:	cd df       	rcall	.-102    	; 0x382 <getStringArrayNum>
 3e8:	18 2f       	mov	r17, r24
	UART_printNumber((unsigned long)san, 10, 0, 0);
 3ea:	68 2f       	mov	r22, r24
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	00 e0       	ldi	r16, 0x00	; 0
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	dc df       	rcall	.-72     	; 0x3b2 <UART_printNumber>
	UART_printString("  ");
 3fa:	86 e1       	ldi	r24, 0x16	; 22
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	ac df       	rcall	.-168    	; 0x358 <UART_printString>
	
	char zeroIndex = 0;
	if (zero == 1) {
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	b8 12       	cpse	r11, r24
 404:	25 c0       	rjmp	.+74     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		if (numeral == 2) zeroIndex = 4 - (san % 4);
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	99 12       	cpse	r9, r25
 40a:	06 c0       	rjmp	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	81 2f       	mov	r24, r17
 40e:	83 70       	andi	r24, 0x03	; 3
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	79 2e       	mov	r7, r25
 414:	78 1a       	sub	r7, r24
 416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	
	char san = getStringArrayNum(num, numeral); // String Array Number(자리수)
	UART_printNumber((unsigned long)san, 10, 0, 0);
	UART_printString("  ");
	
	char zeroIndex = 0;
 418:	71 2c       	mov	r7, r1
	if (zero == 1) {
		if (numeral == 2) zeroIndex = 4 - (san % 4);
		if (numeral == 8) zeroIndex = 3 - (san % 3);
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	98 12       	cpse	r9, r24
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	8b ea       	ldi	r24, 0xAB	; 171
 422:	18 9f       	mul	r17, r24
 424:	81 2d       	mov	r24, r1
 426:	11 24       	eor	r1, r1
 428:	86 95       	lsr	r24
 42a:	98 2f       	mov	r25, r24
 42c:	99 0f       	add	r25, r25
 42e:	89 0f       	add	r24, r25
 430:	91 2f       	mov	r25, r17
 432:	98 1b       	sub	r25, r24
 434:	89 2f       	mov	r24, r25
 436:	93 e0       	ldi	r25, 0x03	; 3
 438:	79 2e       	mov	r7, r25
 43a:	78 1a       	sub	r7, r24
		if (numeral == 16) zeroIndex = 2 - (san % 2);
 43c:	80 e1       	ldi	r24, 0x10	; 16
 43e:	98 12       	cpse	r9, r24
 440:	05 c0       	rjmp	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	81 2f       	mov	r24, r17
 444:	81 70       	andi	r24, 0x01	; 1
 446:	92 e0       	ldi	r25, 0x02	; 2
 448:	79 2e       	mov	r7, r25
 44a:	78 1a       	sub	r7, r24
		
		san += zeroIndex;
 44c:	17 0d       	add	r17, r7
 44e:	01 c0       	rjmp	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	
	char san = getStringArrayNum(num, numeral); // String Array Number(자리수)
	UART_printNumber((unsigned long)san, 10, 0, 0);
	UART_printString("  ");
	
	char zeroIndex = 0;
 450:	71 2c       	mov	r7, r1
		if (numeral == 16) zeroIndex = 2 - (san % 2);
		
		san += zeroIndex;
	}
	
	char *numString = (char *)malloc(san); // 배열 동적할당
 452:	01 2f       	mov	r16, r17
 454:	10 e0       	ldi	r17, 0x00	; 0
 456:	c8 01       	movw	r24, r16
 458:	1e d1       	rcall	.+572    	; 0x696 <malloc>
 45a:	5c 01       	movw	r10, r24
	int i, index = 0;
	char charTemp[16] = {'0', '1', '2', '3', '4', '5', '6',
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	e6 e0       	ldi	r30, 0x06	; 6
 460:	f1 e0       	ldi	r31, 0x01	; 1
 462:	de 01       	movw	r26, r28
 464:	11 96       	adiw	r26, 0x01	; 1
 466:	01 90       	ld	r0, Z+
 468:	0d 92       	st	X+, r0
 46a:	8a 95       	dec	r24
 46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	'7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
	
	numString[san] = "0";
 46e:	f5 01       	movw	r30, r10
 470:	e0 0f       	add	r30, r16
 472:	f1 1f       	adc	r31, r17
 474:	89 e1       	ldi	r24, 0x19	; 25
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	80 83       	st	Z, r24
	
	// 연산부
	if (num > 0) {
 47a:	c1 14       	cp	r12, r1
 47c:	d1 04       	cpc	r13, r1
 47e:	e1 04       	cpc	r14, r1
 480:	f1 04       	cpc	r15, r1
 482:	61 f5       	brne	.+88     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		
		san += zeroIndex;
	}
	
	char *numString = (char *)malloc(san); // 배열 동적할당
	int i, index = 0;
 484:	c1 2c       	mov	r12, r1
 486:	d1 2c       	mov	r13, r1
 488:	38 c0       	rjmp	.+112    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	numString[san] = "0";
	
	// 연산부
	if (num > 0) {
		for (i = 0; num != 0; i++ ) {
			if(i<zeroIndex) numString[i] = charTemp[0];
 48a:	87 2d       	mov	r24, r7
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	08 17       	cp	r16, r24
 490:	19 07       	cpc	r17, r25
 492:	34 f4       	brge	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 494:	80 e3       	ldi	r24, 0x30	; 48
 496:	f5 01       	movw	r30, r10
 498:	e0 0f       	add	r30, r16
 49a:	f1 1f       	adc	r31, r17
 49c:	80 83       	st	Z, r24
 49e:	12 c0       	rjmp	.+36     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			else numString[i] = charTemp[(num % numeral)];
 4a0:	29 2d       	mov	r18, r9
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	c7 01       	movw	r24, r14
 4aa:	b6 01       	movw	r22, r12
 4ac:	be d0       	rcall	.+380    	; 0x62a <__udivmodsi4>
 4ae:	e1 e0       	ldi	r30, 0x01	; 1
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	ec 0f       	add	r30, r28
 4b4:	fd 1f       	adc	r31, r29
 4b6:	e6 0f       	add	r30, r22
 4b8:	f7 1f       	adc	r31, r23
 4ba:	80 81       	ld	r24, Z
 4bc:	f5 01       	movw	r30, r10
 4be:	e0 0f       	add	r30, r16
 4c0:	f1 1f       	adc	r31, r17
 4c2:	80 83       	st	Z, r24
			
			num = num / numeral;
 4c4:	29 2d       	mov	r18, r9
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	c7 01       	movw	r24, r14
 4ce:	b6 01       	movw	r22, r12
 4d0:	ac d0       	rcall	.+344    	; 0x62a <__udivmodsi4>
 4d2:	69 01       	movw	r12, r18
 4d4:	7a 01       	movw	r14, r20
	
	numString[san] = "0";
	
	// 연산부
	if (num > 0) {
		for (i = 0; num != 0; i++ ) {
 4d6:	0f 5f       	subi	r16, 0xFF	; 255
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4dc:	00 e0       	ldi	r16, 0x00	; 0
 4de:	10 e0       	ldi	r17, 0x00	; 0
 4e0:	c1 14       	cp	r12, r1
 4e2:	d1 04       	cpc	r13, r1
 4e4:	e1 04       	cpc	r14, r1
 4e6:	f1 04       	cpc	r15, r1
 4e8:	81 f6       	brne	.-96     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
			if(i<zeroIndex) numString[i] = charTemp[0];
			else numString[i] = charTemp[(num % numeral)];
			
			num = num / numeral;
		}
		numString[i] = '\0';
 4ea:	f5 01       	movw	r30, r10
 4ec:	e0 0f       	add	r30, r16
 4ee:	f1 1f       	adc	r31, r17
 4f0:	10 82       	st	Z, r1
		index = i - 1;
 4f2:	68 01       	movw	r12, r16
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	c9 1a       	sub	r12, r25
 4f8:	d1 08       	sbc	r13, r1
	}

	// 출력부

	if (format == 1) {
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	88 12       	cpse	r8, r24
		if (numeral == 2) UART_printString("0b ");
 4fe:	12 c0       	rjmp	.+36     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 500:	92 e0       	ldi	r25, 0x02	; 2
 502:	99 12       	cpse	r9, r25
 504:	03 c0       	rjmp	.+6      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 506:	8b e1       	ldi	r24, 0x1B	; 27
 508:	91 e0       	ldi	r25, 0x01	; 1
		if (numeral == 8) UART_printString("0 ");
 50a:	26 df       	rcall	.-436    	; 0x358 <UART_printString>
 50c:	88 e0       	ldi	r24, 0x08	; 8
 50e:	98 12       	cpse	r9, r24
 510:	03 c0       	rjmp	.+6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 512:	8f e1       	ldi	r24, 0x1F	; 31
 514:	91 e0       	ldi	r25, 0x01	; 1
		if (numeral == 16) UART_printString("0x ");
 516:	20 df       	rcall	.-448    	; 0x358 <UART_printString>
 518:	90 e1       	ldi	r25, 0x10	; 16
 51a:	99 12       	cpse	r9, r25
 51c:	03 c0       	rjmp	.+6      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 51e:	82 e2       	ldi	r24, 0x22	; 34
 520:	91 e0       	ldi	r25, 0x01	; 1
		
		san += zeroIndex;
	}
	
	char *numString = (char *)malloc(san); // 배열 동적할당
	int i, index = 0;
 522:	1a df       	rcall	.-460    	; 0x358 <UART_printString>
 524:	86 01       	movw	r16, r12
		if (numeral == 8) UART_printString("0 ");
		if (numeral == 16) UART_printString("0x ");
	}
	
	for (i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
 526:	55 c0       	rjmp	.+170    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 528:	78 01       	movw	r14, r16
 52a:	f5 01       	movw	r30, r10
 52c:	e0 0f       	add	r30, r16
 52e:	f1 1f       	adc	r31, r17
 530:	80 81       	ld	r24, Z
 532:	0e df       	rcall	.-484    	; 0x350 <UART_transmit>
		if(format == 1) {
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	88 12       	cpse	r8, r24
 538:	4a c0       	rjmp	.+148    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
			switch(numeral) {
 53a:	98 e0       	ldi	r25, 0x08	; 8
 53c:	99 16       	cp	r9, r25
 53e:	e1 f0       	breq	.+56     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 540:	99 15       	cp	r25, r9
 542:	20 f0       	brcs	.+8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	98 16       	cp	r9, r24
 548:	41 f0       	breq	.+16     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 54a:	41 c0       	rjmp	.+130    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 54c:	9a e0       	ldi	r25, 0x0A	; 10
 54e:	99 16       	cp	r9, r25
 550:	19 f1       	breq	.+70     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 552:	80 e1       	ldi	r24, 0x10	; 16
 554:	98 16       	cp	r9, r24
 556:	81 f1       	breq	.+96     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 558:	3a c0       	rjmp	.+116    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
				case 2:
				if((i % 4 ) == 0 && i > 0 && i < index) UART_printString(" ");
 55a:	93 e0       	ldi	r25, 0x03	; 3
 55c:	e9 22       	and	r14, r25
 55e:	ff 24       	eor	r15, r15
 560:	ef 28       	or	r14, r15
 562:	a9 f5       	brne	.+106    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 564:	10 16       	cp	r1, r16
 566:	11 06       	cpc	r1, r17
 568:	94 f5       	brge	.+100    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 56a:	0c 15       	cp	r16, r12
 56c:	1d 05       	cpc	r17, r13
 56e:	7c f5       	brge	.+94     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 570:	87 e1       	ldi	r24, 0x17	; 23
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	f1 de       	rcall	.-542    	; 0x358 <UART_printString>
				break;
				case 8:
				if((i % 3 ) == 0 && i > 0 && i < index) UART_printString(" ");
 576:	2b c0       	rjmp	.+86     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 578:	c8 01       	movw	r24, r16
 57a:	63 e0       	ldi	r22, 0x03	; 3
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	42 d0       	rcall	.+132    	; 0x604 <__divmodhi4>
 580:	89 2b       	or	r24, r25
 582:	29 f5       	brne	.+74     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 584:	10 16       	cp	r1, r16
 586:	11 06       	cpc	r1, r17
 588:	14 f5       	brge	.+68     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 58a:	0c 15       	cp	r16, r12
 58c:	1d 05       	cpc	r17, r13
 58e:	fc f4       	brge	.+62     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 590:	87 e1       	ldi	r24, 0x17	; 23
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	e1 de       	rcall	.-574    	; 0x358 <UART_printString>
				break;
				case 10:
				if((i % 3 ) == 0 && i > 0 && i < index) UART_printString(",");
 596:	1b c0       	rjmp	.+54     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 598:	c8 01       	movw	r24, r16
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	32 d0       	rcall	.+100    	; 0x604 <__divmodhi4>
 5a0:	89 2b       	or	r24, r25
 5a2:	a9 f4       	brne	.+42     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5a4:	10 16       	cp	r1, r16
 5a6:	11 06       	cpc	r1, r17
 5a8:	94 f4       	brge	.+36     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5aa:	0c 15       	cp	r16, r12
 5ac:	1d 05       	cpc	r17, r13
 5ae:	7c f4       	brge	.+30     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5b0:	86 e2       	ldi	r24, 0x26	; 38
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	d1 de       	rcall	.-606    	; 0x358 <UART_printString>
				break;
				case 16:
				if((i % 2 ) == 0 && i > 0 && i < index) UART_printString(" ");
 5b6:	0b c0       	rjmp	.+22     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5b8:	00 fd       	sbrc	r16, 0
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5bc:	10 16       	cp	r1, r16
 5be:	11 06       	cpc	r1, r17
 5c0:	34 f4       	brge	.+12     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c2:	0c 15       	cp	r16, r12
 5c4:	1d 05       	cpc	r17, r13
 5c6:	1c f4       	brge	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c8:	87 e1       	ldi	r24, 0x17	; 23
 5ca:	91 e0       	ldi	r25, 0x01	; 1
		if (numeral == 2) UART_printString("0b ");
		if (numeral == 8) UART_printString("0 ");
		if (numeral == 16) UART_printString("0x ");
	}
	
	for (i = index; i >= 0; i--) {
 5cc:	c5 de       	rcall	.-630    	; 0x358 <UART_printString>
 5ce:	01 50       	subi	r16, 0x01	; 1
 5d0:	11 09       	sbc	r17, r1
 5d2:	11 23       	and	r17, r17
 5d4:	0c f0       	brlt	.+2      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
				if((i % 2 ) == 0 && i > 0 && i < index) UART_printString(" ");
				break;
			}
		}
	}
	free(numString);
 5d6:	a8 cf       	rjmp	.-176    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 5d8:	c5 01       	movw	r24, r10
 5da:	f5 d0       	rcall	.+490    	; 0x7c6 <free>
}
 5dc:	60 96       	adiw	r28, 0x10	; 16
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	bf 90       	pop	r11
 5fa:	af 90       	pop	r10
 5fc:	9f 90       	pop	r9
 5fe:	8f 90       	pop	r8
 600:	7f 90       	pop	r7
 602:	08 95       	ret

00000604 <__divmodhi4>:
 604:	97 fb       	bst	r25, 7
 606:	07 2e       	mov	r0, r23
 608:	16 f4       	brtc	.+4      	; 0x60e <__divmodhi4+0xa>
 60a:	00 94       	com	r0
 60c:	06 d0       	rcall	.+12     	; 0x61a <__divmodhi4_neg1>
 60e:	77 fd       	sbrc	r23, 7
 610:	08 d0       	rcall	.+16     	; 0x622 <__divmodhi4_neg2>
 612:	2d d0       	rcall	.+90     	; 0x66e <__udivmodhi4>
 614:	07 fc       	sbrc	r0, 7
 616:	05 d0       	rcall	.+10     	; 0x622 <__divmodhi4_neg2>
 618:	3e f4       	brtc	.+14     	; 0x628 <__divmodhi4_exit>

0000061a <__divmodhi4_neg1>:
 61a:	90 95       	com	r25
 61c:	81 95       	neg	r24
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <__divmodhi4_neg2>:
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255

00000628 <__divmodhi4_exit>:
 628:	08 95       	ret

0000062a <__udivmodsi4>:
 62a:	a1 e2       	ldi	r26, 0x21	; 33
 62c:	1a 2e       	mov	r1, r26
 62e:	aa 1b       	sub	r26, r26
 630:	bb 1b       	sub	r27, r27
 632:	fd 01       	movw	r30, r26
 634:	0d c0       	rjmp	.+26     	; 0x650 <__udivmodsi4_ep>

00000636 <__udivmodsi4_loop>:
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	ee 1f       	adc	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	a2 17       	cp	r26, r18
 640:	b3 07       	cpc	r27, r19
 642:	e4 07       	cpc	r30, r20
 644:	f5 07       	cpc	r31, r21
 646:	20 f0       	brcs	.+8      	; 0x650 <__udivmodsi4_ep>
 648:	a2 1b       	sub	r26, r18
 64a:	b3 0b       	sbc	r27, r19
 64c:	e4 0b       	sbc	r30, r20
 64e:	f5 0b       	sbc	r31, r21

00000650 <__udivmodsi4_ep>:
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	1a 94       	dec	r1
 65a:	69 f7       	brne	.-38     	; 0x636 <__udivmodsi4_loop>
 65c:	60 95       	com	r22
 65e:	70 95       	com	r23
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	bd 01       	movw	r22, r26
 66a:	cf 01       	movw	r24, r30
 66c:	08 95       	ret

0000066e <__udivmodhi4>:
 66e:	aa 1b       	sub	r26, r26
 670:	bb 1b       	sub	r27, r27
 672:	51 e1       	ldi	r21, 0x11	; 17
 674:	07 c0       	rjmp	.+14     	; 0x684 <__udivmodhi4_ep>

00000676 <__udivmodhi4_loop>:
 676:	aa 1f       	adc	r26, r26
 678:	bb 1f       	adc	r27, r27
 67a:	a6 17       	cp	r26, r22
 67c:	b7 07       	cpc	r27, r23
 67e:	10 f0       	brcs	.+4      	; 0x684 <__udivmodhi4_ep>
 680:	a6 1b       	sub	r26, r22
 682:	b7 0b       	sbc	r27, r23

00000684 <__udivmodhi4_ep>:
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	5a 95       	dec	r21
 68a:	a9 f7       	brne	.-22     	; 0x676 <__udivmodhi4_loop>
 68c:	80 95       	com	r24
 68e:	90 95       	com	r25
 690:	bc 01       	movw	r22, r24
 692:	cd 01       	movw	r24, r26
 694:	08 95       	ret

00000696 <malloc>:
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	91 05       	cpc	r25, r1
 6a2:	10 f4       	brcc	.+4      	; 0x6a8 <malloc+0x12>
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__flp>
 6ac:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__flp+0x1>
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	a0 e0       	ldi	r26, 0x00	; 0
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	30 97       	sbiw	r30, 0x00	; 0
 6ba:	19 f1       	breq	.+70     	; 0x702 <malloc+0x6c>
 6bc:	40 81       	ld	r20, Z
 6be:	51 81       	ldd	r21, Z+1	; 0x01
 6c0:	02 81       	ldd	r16, Z+2	; 0x02
 6c2:	13 81       	ldd	r17, Z+3	; 0x03
 6c4:	48 17       	cp	r20, r24
 6c6:	59 07       	cpc	r21, r25
 6c8:	c8 f0       	brcs	.+50     	; 0x6fc <malloc+0x66>
 6ca:	84 17       	cp	r24, r20
 6cc:	95 07       	cpc	r25, r21
 6ce:	69 f4       	brne	.+26     	; 0x6ea <malloc+0x54>
 6d0:	10 97       	sbiw	r26, 0x00	; 0
 6d2:	31 f0       	breq	.+12     	; 0x6e0 <malloc+0x4a>
 6d4:	12 96       	adiw	r26, 0x02	; 2
 6d6:	0c 93       	st	X, r16
 6d8:	12 97       	sbiw	r26, 0x02	; 2
 6da:	13 96       	adiw	r26, 0x03	; 3
 6dc:	1c 93       	st	X, r17
 6de:	27 c0       	rjmp	.+78     	; 0x72e <malloc+0x98>
 6e0:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <__flp>
 6e4:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <__flp+0x1>
 6e8:	22 c0       	rjmp	.+68     	; 0x72e <malloc+0x98>
 6ea:	21 15       	cp	r18, r1
 6ec:	31 05       	cpc	r19, r1
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <malloc+0x60>
 6f0:	42 17       	cp	r20, r18
 6f2:	53 07       	cpc	r21, r19
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <malloc+0x66>
 6f6:	9a 01       	movw	r18, r20
 6f8:	bd 01       	movw	r22, r26
 6fa:	ef 01       	movw	r28, r30
 6fc:	df 01       	movw	r26, r30
 6fe:	f8 01       	movw	r30, r16
 700:	db cf       	rjmp	.-74     	; 0x6b8 <malloc+0x22>
 702:	21 15       	cp	r18, r1
 704:	31 05       	cpc	r19, r1
 706:	f9 f0       	breq	.+62     	; 0x746 <malloc+0xb0>
 708:	28 1b       	sub	r18, r24
 70a:	39 0b       	sbc	r19, r25
 70c:	24 30       	cpi	r18, 0x04	; 4
 70e:	31 05       	cpc	r19, r1
 710:	80 f4       	brcc	.+32     	; 0x732 <malloc+0x9c>
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	9b 81       	ldd	r25, Y+3	; 0x03
 716:	61 15       	cp	r22, r1
 718:	71 05       	cpc	r23, r1
 71a:	21 f0       	breq	.+8      	; 0x724 <malloc+0x8e>
 71c:	fb 01       	movw	r30, r22
 71e:	93 83       	std	Z+3, r25	; 0x03
 720:	82 83       	std	Z+2, r24	; 0x02
 722:	04 c0       	rjmp	.+8      	; 0x72c <malloc+0x96>
 724:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__flp+0x1>
 728:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__flp>
 72c:	fe 01       	movw	r30, r28
 72e:	32 96       	adiw	r30, 0x02	; 2
 730:	44 c0       	rjmp	.+136    	; 0x7ba <malloc+0x124>
 732:	fe 01       	movw	r30, r28
 734:	e2 0f       	add	r30, r18
 736:	f3 1f       	adc	r31, r19
 738:	81 93       	st	Z+, r24
 73a:	91 93       	st	Z+, r25
 73c:	22 50       	subi	r18, 0x02	; 2
 73e:	31 09       	sbc	r19, r1
 740:	39 83       	std	Y+1, r19	; 0x01
 742:	28 83       	st	Y, r18
 744:	3a c0       	rjmp	.+116    	; 0x7ba <malloc+0x124>
 746:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__data_end>
 74a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__data_end+0x1>
 74e:	23 2b       	or	r18, r19
 750:	41 f4       	brne	.+16     	; 0x762 <malloc+0xcc>
 752:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 756:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 75a:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__data_end+0x1>
 75e:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__data_end>
 762:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 766:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 76a:	21 15       	cp	r18, r1
 76c:	31 05       	cpc	r19, r1
 76e:	41 f4       	brne	.+16     	; 0x780 <malloc+0xea>
 770:	2d b7       	in	r18, 0x3d	; 61
 772:	3e b7       	in	r19, 0x3e	; 62
 774:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 778:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 77c:	24 1b       	sub	r18, r20
 77e:	35 0b       	sbc	r19, r21
 780:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <__data_end>
 784:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <__data_end+0x1>
 788:	e2 17       	cp	r30, r18
 78a:	f3 07       	cpc	r31, r19
 78c:	a0 f4       	brcc	.+40     	; 0x7b6 <malloc+0x120>
 78e:	2e 1b       	sub	r18, r30
 790:	3f 0b       	sbc	r19, r31
 792:	28 17       	cp	r18, r24
 794:	39 07       	cpc	r19, r25
 796:	78 f0       	brcs	.+30     	; 0x7b6 <malloc+0x120>
 798:	ac 01       	movw	r20, r24
 79a:	4e 5f       	subi	r20, 0xFE	; 254
 79c:	5f 4f       	sbci	r21, 0xFF	; 255
 79e:	24 17       	cp	r18, r20
 7a0:	35 07       	cpc	r19, r21
 7a2:	48 f0       	brcs	.+18     	; 0x7b6 <malloc+0x120>
 7a4:	4e 0f       	add	r20, r30
 7a6:	5f 1f       	adc	r21, r31
 7a8:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__data_end+0x1>
 7ac:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__data_end>
 7b0:	81 93       	st	Z+, r24
 7b2:	91 93       	st	Z+, r25
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <malloc+0x124>
 7b6:	e0 e0       	ldi	r30, 0x00	; 0
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	cf 01       	movw	r24, r30
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	08 95       	ret

000007c6 <free>:
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	00 97       	sbiw	r24, 0x00	; 0
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <free+0xa>
 7ce:	81 c0       	rjmp	.+258    	; 0x8d2 <free+0x10c>
 7d0:	fc 01       	movw	r30, r24
 7d2:	32 97       	sbiw	r30, 0x02	; 2
 7d4:	13 82       	std	Z+3, r1	; 0x03
 7d6:	12 82       	std	Z+2, r1	; 0x02
 7d8:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__flp>
 7dc:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__flp+0x1>
 7e0:	10 97       	sbiw	r26, 0x00	; 0
 7e2:	81 f4       	brne	.+32     	; 0x804 <free+0x3e>
 7e4:	20 81       	ld	r18, Z
 7e6:	31 81       	ldd	r19, Z+1	; 0x01
 7e8:	82 0f       	add	r24, r18
 7ea:	93 1f       	adc	r25, r19
 7ec:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__data_end>
 7f0:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__data_end+0x1>
 7f4:	28 17       	cp	r18, r24
 7f6:	39 07       	cpc	r19, r25
 7f8:	51 f5       	brne	.+84     	; 0x84e <free+0x88>
 7fa:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <__data_end+0x1>
 7fe:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <__data_end>
 802:	67 c0       	rjmp	.+206    	; 0x8d2 <free+0x10c>
 804:	ed 01       	movw	r28, r26
 806:	20 e0       	ldi	r18, 0x00	; 0
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	ce 17       	cp	r28, r30
 80c:	df 07       	cpc	r29, r31
 80e:	40 f4       	brcc	.+16     	; 0x820 <free+0x5a>
 810:	4a 81       	ldd	r20, Y+2	; 0x02
 812:	5b 81       	ldd	r21, Y+3	; 0x03
 814:	9e 01       	movw	r18, r28
 816:	41 15       	cp	r20, r1
 818:	51 05       	cpc	r21, r1
 81a:	f1 f0       	breq	.+60     	; 0x858 <free+0x92>
 81c:	ea 01       	movw	r28, r20
 81e:	f5 cf       	rjmp	.-22     	; 0x80a <free+0x44>
 820:	d3 83       	std	Z+3, r29	; 0x03
 822:	c2 83       	std	Z+2, r28	; 0x02
 824:	40 81       	ld	r20, Z
 826:	51 81       	ldd	r21, Z+1	; 0x01
 828:	84 0f       	add	r24, r20
 82a:	95 1f       	adc	r25, r21
 82c:	c8 17       	cp	r28, r24
 82e:	d9 07       	cpc	r29, r25
 830:	59 f4       	brne	.+22     	; 0x848 <free+0x82>
 832:	88 81       	ld	r24, Y
 834:	99 81       	ldd	r25, Y+1	; 0x01
 836:	84 0f       	add	r24, r20
 838:	95 1f       	adc	r25, r21
 83a:	02 96       	adiw	r24, 0x02	; 2
 83c:	91 83       	std	Z+1, r25	; 0x01
 83e:	80 83       	st	Z, r24
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	9b 81       	ldd	r25, Y+3	; 0x03
 844:	93 83       	std	Z+3, r25	; 0x03
 846:	82 83       	std	Z+2, r24	; 0x02
 848:	21 15       	cp	r18, r1
 84a:	31 05       	cpc	r19, r1
 84c:	29 f4       	brne	.+10     	; 0x858 <free+0x92>
 84e:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__flp+0x1>
 852:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__flp>
 856:	3d c0       	rjmp	.+122    	; 0x8d2 <free+0x10c>
 858:	e9 01       	movw	r28, r18
 85a:	fb 83       	std	Y+3, r31	; 0x03
 85c:	ea 83       	std	Y+2, r30	; 0x02
 85e:	49 91       	ld	r20, Y+
 860:	59 91       	ld	r21, Y+
 862:	c4 0f       	add	r28, r20
 864:	d5 1f       	adc	r29, r21
 866:	ec 17       	cp	r30, r28
 868:	fd 07       	cpc	r31, r29
 86a:	61 f4       	brne	.+24     	; 0x884 <free+0xbe>
 86c:	80 81       	ld	r24, Z
 86e:	91 81       	ldd	r25, Z+1	; 0x01
 870:	84 0f       	add	r24, r20
 872:	95 1f       	adc	r25, r21
 874:	02 96       	adiw	r24, 0x02	; 2
 876:	e9 01       	movw	r28, r18
 878:	99 83       	std	Y+1, r25	; 0x01
 87a:	88 83       	st	Y, r24
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	93 81       	ldd	r25, Z+3	; 0x03
 880:	9b 83       	std	Y+3, r25	; 0x03
 882:	8a 83       	std	Y+2, r24	; 0x02
 884:	e0 e0       	ldi	r30, 0x00	; 0
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	12 96       	adiw	r26, 0x02	; 2
 88a:	8d 91       	ld	r24, X+
 88c:	9c 91       	ld	r25, X
 88e:	13 97       	sbiw	r26, 0x03	; 3
 890:	00 97       	sbiw	r24, 0x00	; 0
 892:	19 f0       	breq	.+6      	; 0x89a <free+0xd4>
 894:	fd 01       	movw	r30, r26
 896:	dc 01       	movw	r26, r24
 898:	f7 cf       	rjmp	.-18     	; 0x888 <free+0xc2>
 89a:	8d 91       	ld	r24, X+
 89c:	9c 91       	ld	r25, X
 89e:	11 97       	sbiw	r26, 0x01	; 1
 8a0:	9d 01       	movw	r18, r26
 8a2:	2e 5f       	subi	r18, 0xFE	; 254
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	82 0f       	add	r24, r18
 8a8:	93 1f       	adc	r25, r19
 8aa:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__data_end>
 8ae:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__data_end+0x1>
 8b2:	28 17       	cp	r18, r24
 8b4:	39 07       	cpc	r19, r25
 8b6:	69 f4       	brne	.+26     	; 0x8d2 <free+0x10c>
 8b8:	30 97       	sbiw	r30, 0x00	; 0
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <free+0x100>
 8bc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__flp+0x1>
 8c0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__flp>
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <free+0x104>
 8c6:	13 82       	std	Z+3, r1	; 0x03
 8c8:	12 82       	std	Z+2, r1	; 0x02
 8ca:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x1>
 8ce:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end>
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <_exit>:
 8d8:	f8 94       	cli

000008da <__stop_program>:
 8da:	ff cf       	rjmp	.-2      	; 0x8da <__stop_program>
