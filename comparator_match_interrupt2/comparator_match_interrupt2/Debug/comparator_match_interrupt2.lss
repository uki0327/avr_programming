
comparator_match_interrupt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024a  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000389  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#define F_CPU 16000000L

volatile int count = 0;
int state = 0;

ISR(TIMER0_COMPA_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	count++;
  9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
  ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
	TCNT0 = 0;
  b0:	16 bc       	out	0x26, r1	; 38
	
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void)
{
	DDRD = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
  c4:	8b b9       	out	0x0b, r24	; 11
	
	TCCR0B |= (1 << CS02) | (1 << CS00);
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	85 60       	ori	r24, 0x05	; 5
  ca:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
  d0:	ee e6       	ldi	r30, 0x6E	; 110
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
	sei();
  da:	78 94       	sei
	
	while (1)
	{
		if(count==1) {
			count = 0;
			state = !state;
  dc:	51 e0       	ldi	r21, 0x01	; 1
  de:	40 e0       	ldi	r20, 0x00	; 0
			if(state) PORTD = 0x00;
			else PORTD = 0xFF;
  e0:	6f ef       	ldi	r22, 0xFF	; 255
	TIMSK0 |= (1 << OCIE0A);
	sei();
	
	while (1)
	{
		if(count==1) {
  e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	d1 f7       	brne	.-12     	; 0xe2 <main+0x22>
			count = 0;
  ee:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
  f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
			state = !state;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  fe:	35 2f       	mov	r19, r21
 100:	24 2f       	mov	r18, r20
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	11 f0       	breq	.+4      	; 0x10a <main+0x4a>
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <_edata>
 10e:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <_edata+0x1>
			if(state) PORTD = 0x00;
 112:	89 2b       	or	r24, r25
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x5a>
 116:	1b b8       	out	0x0b, r1	; 11
 118:	e4 cf       	rjmp	.-56     	; 0xe2 <main+0x22>
			else PORTD = 0xFF;
 11a:	6b b9       	out	0x0b, r22	; 11
 11c:	e2 cf       	rjmp	.-60     	; 0xe2 <main+0x22>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
