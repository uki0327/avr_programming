
seven_segment_display_4x_interrupt_millis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090c  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000707  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000363  00000000  00000000  00001433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040f  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9e:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#define MICROS_INCREMENT_PER_OVERFLOW ( MICROSECONDS_PER_TIMER0_OVERFLOW % 1000 )

volatile unsigned long timer0_millis = 0;
volatile int timer0_micros = 0;

ISR(TIMER0_OVF_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
	unsigned long m = timer0_millis;
  c8:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <timer0_millis>
  cc:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <timer0_millis+0x1>
  d0:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <timer0_millis+0x2>
  d4:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <timer0_millis+0x3>
	int f = timer0_micros;
  d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  dc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
	
	m += MILLIS_INCREMENT_PER_OVERFLOW;
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	2f 4f       	sbci	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
	f += MICROS_INCREMENT_PER_OVERFLOW;
  e8:	48 96       	adiw	r24, 0x18	; 24
	
	int micro_to_millis = f / 1000;
  ea:	68 ee       	ldi	r22, 0xE8	; 232
  ec:	73 e0       	ldi	r23, 0x03	; 3
  ee:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
  f2:	ac 01       	movw	r20, r24
	m += micro_to_millis;
  f4:	cb 01       	movw	r24, r22
  f6:	77 0f       	add	r23, r23
  f8:	aa 0b       	sbc	r26, r26
  fa:	bb 0b       	sbc	r27, r27
  fc:	08 0f       	add	r16, r24
  fe:	19 1f       	adc	r17, r25
 100:	2a 1f       	adc	r18, r26
 102:	3b 1f       	adc	r19, r27
	f = f % 1000;
	
	timer0_millis = m;
 104:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <timer0_millis>
 108:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <timer0_millis+0x1>
 10c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <timer0_millis+0x2>
 110:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <timer0_millis+0x3>
	timer0_micros = f;
 114:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <__data_end+0x1>
 118:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <__data_end>
}
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <millis>:

unsigned long millis() {
	unsigned long m;
	uint8_t oldSREG = SREG;
 13e:	2f b7       	in	r18, 0x3f	; 63
	
	cli();
 140:	f8 94       	cli
	
	m = timer0_millis;
 142:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <timer0_millis>
 146:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <timer0_millis+0x1>
 14a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer0_millis+0x2>
 14e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer0_millis+0x3>
	
	SREG = oldSREG;
 152:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
 154:	08 95       	ret

00000156 <main>:

int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	2a 97       	sbiw	r28, 0x0a	; 10
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
    uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	de 01       	movw	r26, r28
 172:	11 96       	adiw	r26, 0x01	; 1
 174:	01 90       	ld	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	8a 95       	dec	r24
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x1e>
	int count = 1000;
	int thousands, hundreds, tens, ones;
	
	TCCR0B |= (1 << CS01) | (1 << CS00);
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
 182:	ee e6       	ldi	r30, 0x6E	; 110
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
	sei();
 18c:	78 94       	sei
	
	unsigned long time_previous, time_current;
	time_previous = millis();
 18e:	0e 94 9f 00 	call	0x13e	; 0x13e <millis>
 192:	4b 01       	movw	r8, r22
 194:	5c 01       	movw	r10, r24
	
	DDRD = 0xFF;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	84 b9       	out	0x04, r24	; 4
}

int main(void)
{
    uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 1000;
 19e:	0f 2e       	mov	r0, r31
 1a0:	f8 ee       	ldi	r31, 0xE8	; 232
 1a2:	cf 2e       	mov	r12, r31
 1a4:	f3 e0       	ldi	r31, 0x03	; 3
 1a6:	df 2e       	mov	r13, r31
 1a8:	f0 2d       	mov	r31, r0
	DDRD = 0xFF;
	DDRB = 0x0F;
	
    while (1) 
    {
		thousands = count / 1000;
 1aa:	c6 01       	movw	r24, r12
 1ac:	68 ee       	ldi	r22, 0xE8	; 232
 1ae:	73 e0       	ldi	r23, 0x03	; 3
 1b0:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
 1b4:	8b 01       	movw	r16, r22
		hundreds = count / 100 % 10;
 1b6:	c6 01       	movw	r24, r12
 1b8:	64 e6       	ldi	r22, 0x64	; 100
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
 1c0:	cb 01       	movw	r24, r22
 1c2:	0f 2e       	mov	r0, r31
 1c4:	fa e0       	ldi	r31, 0x0A	; 10
 1c6:	ef 2e       	mov	r14, r31
 1c8:	f1 2c       	mov	r15, r1
 1ca:	f0 2d       	mov	r31, r0
 1cc:	b7 01       	movw	r22, r14
 1ce:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
 1d2:	fc 01       	movw	r30, r24
		tens = count / 10 % 10;
 1d4:	c6 01       	movw	r24, r12
 1d6:	b7 01       	movw	r22, r14
 1d8:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
 1dc:	9c 01       	movw	r18, r24
 1de:	cb 01       	movw	r24, r22
 1e0:	b7 01       	movw	r22, r14
 1e2:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
		ones = count % 10;
		
		PORTB = 0x0E;
 1e6:	4e e0       	ldi	r20, 0x0E	; 14
 1e8:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[thousands];
 1ea:	a1 e0       	ldi	r26, 0x01	; 1
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	ac 0f       	add	r26, r28
 1f0:	bd 1f       	adc	r27, r29
 1f2:	a0 0f       	add	r26, r16
 1f4:	b1 1f       	adc	r27, r17
 1f6:	4c 91       	ld	r20, X
 1f8:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	af e1       	ldi	r26, 0x1F	; 31
 1fc:	be e4       	ldi	r27, 0x4E	; 78
 1fe:	11 97       	sbiw	r26, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0xa8>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0xae>
 204:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0D;
 206:	4d e0       	ldi	r20, 0x0D	; 13
 208:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[hundreds];
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	4c 0f       	add	r20, r28
 210:	5d 1f       	adc	r21, r29
 212:	e4 0f       	add	r30, r20
 214:	f5 1f       	adc	r31, r21
 216:	40 81       	ld	r20, Z
 218:	4b b9       	out	0x0b, r20	; 11
 21a:	af e1       	ldi	r26, 0x1F	; 31
 21c:	be e4       	ldi	r27, 0x4E	; 78
 21e:	11 97       	sbiw	r26, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0xc8>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0xce>
 224:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0B;
 226:	4b e0       	ldi	r20, 0x0B	; 11
 228:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[tens];
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	80 81       	ld	r24, Z
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	ef e1       	ldi	r30, 0x1F	; 31
 23c:	fe e4       	ldi	r31, 0x4E	; 78
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0xe8>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0xee>
 244:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x07;
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	85 b9       	out	0x05, r24	; 5
		PORTD = numbers[ones];
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ec 0f       	add	r30, r28
 250:	fd 1f       	adc	r31, r29
 252:	e2 0f       	add	r30, r18
 254:	f3 1f       	adc	r31, r19
 256:	80 81       	ld	r24, Z
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	8f e1       	ldi	r24, 0x1F	; 31
 25c:	9e e4       	ldi	r25, 0x4E	; 78
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x108>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x10e>
 264:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		time_current = millis();
 266:	0e 94 9f 00 	call	0x13e	; 0x13e <millis>
		
		if(time_current - time_previous > 100) {
 26a:	8b 01       	movw	r16, r22
 26c:	9c 01       	movw	r18, r24
 26e:	08 19       	sub	r16, r8
 270:	19 09       	sbc	r17, r9
 272:	2a 09       	sbc	r18, r10
 274:	3b 09       	sbc	r19, r11
 276:	05 36       	cpi	r16, 0x65	; 101
 278:	11 05       	cpc	r17, r1
 27a:	21 05       	cpc	r18, r1
 27c:	31 05       	cpc	r19, r1
 27e:	08 f4       	brcc	.+2      	; 0x282 <main+0x12c>
 280:	94 cf       	rjmp	.-216    	; 0x1aa <main+0x54>
			time_previous = time_current;
			count++;
 282:	af ef       	ldi	r26, 0xFF	; 255
 284:	ca 1a       	sub	r12, r26
 286:	da 0a       	sbc	r13, r26
		_delay_ms(SEGMENT_DELAY);
		
		time_current = millis();
		
		if(time_current - time_previous > 100) {
			time_previous = time_current;
 288:	4b 01       	movw	r8, r22
 28a:	5c 01       	movw	r10, r24
 28c:	8e cf       	rjmp	.-228    	; 0x1aa <main+0x54>

0000028e <__divmodhi4>:
 28e:	97 fb       	bst	r25, 7
 290:	07 2e       	mov	r0, r23
 292:	16 f4       	brtc	.+4      	; 0x298 <__divmodhi4+0xa>
 294:	00 94       	com	r0
 296:	07 d0       	rcall	.+14     	; 0x2a6 <__divmodhi4_neg1>
 298:	77 fd       	sbrc	r23, 7
 29a:	09 d0       	rcall	.+18     	; 0x2ae <__divmodhi4_neg2>
 29c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__udivmodhi4>
 2a0:	07 fc       	sbrc	r0, 7
 2a2:	05 d0       	rcall	.+10     	; 0x2ae <__divmodhi4_neg2>
 2a4:	3e f4       	brtc	.+14     	; 0x2b4 <__divmodhi4_exit>

000002a6 <__divmodhi4_neg1>:
 2a6:	90 95       	com	r25
 2a8:	81 95       	neg	r24
 2aa:	9f 4f       	sbci	r25, 0xFF	; 255
 2ac:	08 95       	ret

000002ae <__divmodhi4_neg2>:
 2ae:	70 95       	com	r23
 2b0:	61 95       	neg	r22
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255

000002b4 <__divmodhi4_exit>:
 2b4:	08 95       	ret

000002b6 <__udivmodhi4>:
 2b6:	aa 1b       	sub	r26, r26
 2b8:	bb 1b       	sub	r27, r27
 2ba:	51 e1       	ldi	r21, 0x11	; 17
 2bc:	07 c0       	rjmp	.+14     	; 0x2cc <__udivmodhi4_ep>

000002be <__udivmodhi4_loop>:
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	a6 17       	cp	r26, r22
 2c4:	b7 07       	cpc	r27, r23
 2c6:	10 f0       	brcs	.+4      	; 0x2cc <__udivmodhi4_ep>
 2c8:	a6 1b       	sub	r26, r22
 2ca:	b7 0b       	sbc	r27, r23

000002cc <__udivmodhi4_ep>:
 2cc:	88 1f       	adc	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	5a 95       	dec	r21
 2d2:	a9 f7       	brne	.-22     	; 0x2be <__udivmodhi4_loop>
 2d4:	80 95       	com	r24
 2d6:	90 95       	com	r25
 2d8:	bc 01       	movw	r22, r24
 2da:	cd 01       	movw	r24, r26
 2dc:	08 95       	ret

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
