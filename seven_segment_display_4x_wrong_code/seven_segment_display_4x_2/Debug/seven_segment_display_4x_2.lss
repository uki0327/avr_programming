
seven_segment_display_4x_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000200  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000855  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d1  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d6  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <util/delay.h>

#define SEGMENT_DELAY 5

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int count = 1000;
	int thousands, hundreds, tens, ones;
	
	DDRD = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 b9       	out	0x04, r24	; 4
#define SEGMENT_DELAY 5

int main(void)
{
    uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 1000;
  c4:	28 ee       	ldi	r18, 0xE8	; 232
  c6:	33 e0       	ldi	r19, 0x03	; 3
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x38>
		_delay_ms(SEGMENT_DELAY);
		
		_delay_ms(100);
		
		count++;
		if(count == 10000) count = 1000;
  ca:	28 ee       	ldi	r18, 0xE8	; 232
  cc:	33 e0       	ldi	r19, 0x03	; 3
	DDRD = 0xFF;
	DDRB = 0x0F;
	
    while (1) 
    {
		thousands = count / 1000;
  ce:	c9 01       	movw	r24, r18
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
  d8:	7b 01       	movw	r14, r22
		hundreds = count / 100 % 10;
  da:	c9 01       	movw	r24, r18
  dc:	64 e6       	ldi	r22, 0x64	; 100
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
  e4:	cb 01       	movw	r24, r22
  e6:	0f 2e       	mov	r0, r31
  e8:	fa e0       	ldi	r31, 0x0A	; 10
  ea:	cf 2e       	mov	r12, r31
  ec:	d1 2c       	mov	r13, r1
  ee:	f0 2d       	mov	r31, r0
  f0:	b6 01       	movw	r22, r12
  f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
  f6:	8c 01       	movw	r16, r24
		tens = count / 10 % 10;
  f8:	c9 01       	movw	r24, r18
  fa:	b6 01       	movw	r22, r12
  fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
 100:	fc 01       	movw	r30, r24
 102:	cb 01       	movw	r24, r22
 104:	b6 01       	movw	r22, r12
 106:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__divmodhi4>
		ones = count % 10;
		
		PORTB = 0x0E;
 10a:	4e e0       	ldi	r20, 0x0E	; 14
 10c:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[thousands];
 10e:	a1 e0       	ldi	r26, 0x01	; 1
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ac 0f       	add	r26, r28
 114:	bd 1f       	adc	r27, r29
 116:	ae 0d       	add	r26, r14
 118:	bf 1d       	adc	r27, r15
 11a:	4c 91       	ld	r20, X
 11c:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	af e1       	ldi	r26, 0x1F	; 31
 120:	be e4       	ldi	r27, 0x4E	; 78
 122:	11 97       	sbiw	r26, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x8c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x92>
 128:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0D;
 12a:	4d e0       	ldi	r20, 0x0D	; 13
 12c:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[hundreds];
 12e:	a1 e0       	ldi	r26, 0x01	; 1
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	ac 0f       	add	r26, r28
 134:	bd 1f       	adc	r27, r29
 136:	a0 0f       	add	r26, r16
 138:	b1 1f       	adc	r27, r17
 13a:	4c 91       	ld	r20, X
 13c:	4b b9       	out	0x0b, r20	; 11
 13e:	af e1       	ldi	r26, 0x1F	; 31
 140:	be e4       	ldi	r27, 0x4E	; 78
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xac>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xb2>
 148:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x0B;
 14a:	4b e0       	ldi	r20, 0x0B	; 11
 14c:	45 b9       	out	0x05, r20	; 5
		PORTD = numbers[tens];
 14e:	a1 e0       	ldi	r26, 0x01	; 1
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	ac 0f       	add	r26, r28
 154:	bd 1f       	adc	r27, r29
 156:	a8 0f       	add	r26, r24
 158:	b9 1f       	adc	r27, r25
 15a:	8c 91       	ld	r24, X
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	8f e1       	ldi	r24, 0x1F	; 31
 160:	9e e4       	ldi	r25, 0x4E	; 78
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0xcc>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xd2>
 168:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		PORTB = 0x07;
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	85 b9       	out	0x05, r24	; 5
		PORTD = numbers[ones];
 16e:	a1 e0       	ldi	r26, 0x01	; 1
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	ac 0f       	add	r26, r28
 174:	bd 1f       	adc	r27, r29
 176:	ea 0f       	add	r30, r26
 178:	fb 1f       	adc	r31, r27
 17a:	80 81       	ld	r24, Z
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8f e1       	ldi	r24, 0x1F	; 31
 180:	9e e4       	ldi	r25, 0x4E	; 78
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xec>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xf2>
 188:	00 00       	nop
 18a:	9f ef       	ldi	r25, 0xFF	; 255
 18c:	a1 ee       	ldi	r26, 0xE1	; 225
 18e:	b4 e0       	ldi	r27, 0x04	; 4
 190:	91 50       	subi	r25, 0x01	; 1
 192:	a0 40       	sbci	r26, 0x00	; 0
 194:	b0 40       	sbci	r27, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xfa>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x104>
 19a:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		
		_delay_ms(100);
		
		count++;
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(count == 10000) count = 1000;
 1a0:	20 31       	cpi	r18, 0x10	; 16
 1a2:	47 e2       	ldi	r20, 0x27	; 39
 1a4:	34 07       	cpc	r19, r20
 1a6:	09 f0       	breq	.+2      	; 0x1aa <main+0x114>
 1a8:	92 cf       	rjmp	.-220    	; 0xce <main+0x38>
 1aa:	8f cf       	rjmp	.-226    	; 0xca <main+0x34>

000001ac <__divmodhi4>:
 1ac:	97 fb       	bst	r25, 7
 1ae:	07 2e       	mov	r0, r23
 1b0:	16 f4       	brtc	.+4      	; 0x1b6 <__divmodhi4+0xa>
 1b2:	00 94       	com	r0
 1b4:	07 d0       	rcall	.+14     	; 0x1c4 <__divmodhi4_neg1>
 1b6:	77 fd       	sbrc	r23, 7
 1b8:	09 d0       	rcall	.+18     	; 0x1cc <__divmodhi4_neg2>
 1ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__udivmodhi4>
 1be:	07 fc       	sbrc	r0, 7
 1c0:	05 d0       	rcall	.+10     	; 0x1cc <__divmodhi4_neg2>
 1c2:	3e f4       	brtc	.+14     	; 0x1d2 <__divmodhi4_exit>

000001c4 <__divmodhi4_neg1>:
 1c4:	90 95       	com	r25
 1c6:	81 95       	neg	r24
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	08 95       	ret

000001cc <__divmodhi4_neg2>:
 1cc:	70 95       	com	r23
 1ce:	61 95       	neg	r22
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255

000001d2 <__divmodhi4_exit>:
 1d2:	08 95       	ret

000001d4 <__udivmodhi4>:
 1d4:	aa 1b       	sub	r26, r26
 1d6:	bb 1b       	sub	r27, r27
 1d8:	51 e1       	ldi	r21, 0x11	; 17
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <__udivmodhi4_ep>

000001dc <__udivmodhi4_loop>:
 1dc:	aa 1f       	adc	r26, r26
 1de:	bb 1f       	adc	r27, r27
 1e0:	a6 17       	cp	r26, r22
 1e2:	b7 07       	cpc	r27, r23
 1e4:	10 f0       	brcs	.+4      	; 0x1ea <__udivmodhi4_ep>
 1e6:	a6 1b       	sub	r26, r22
 1e8:	b7 0b       	sbc	r27, r23

000001ea <__udivmodhi4_ep>:
 1ea:	88 1f       	adc	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	5a 95       	dec	r21
 1f0:	a9 f7       	brne	.-22     	; 0x1dc <__udivmodhi4_loop>
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	bc 01       	movw	r22, r24
 1f8:	cd 01       	movw	r24, r26
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
