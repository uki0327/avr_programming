
debouncing_when_full_pressed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2a  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000560  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000435  00000000  00000000  00001fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000023ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_PORT>:
#define F_CPU  16000000L
#define bit_is_set(sfr, bit) (_SFR_BYTE(sfr) & _BV(bit)))
#define bit_is_clear(sfr, bit) (!(_SFR_BYTE(sfr) & _BV(bit)))

void INIT_PORT(void) {
	DDRB = 0x20;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  84:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04;
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	08 95       	ret

0000008e <button_pressed>:
}

unsigned char button_pressed(void) {
	if(bit_is_clear(PIND, PIND2)) { // 첫번째 검사
  8e:	99 b1       	in	r25, 0x09	; 9
  90:	89 2f       	mov	r24, r25
  92:	84 70       	andi	r24, 0x04	; 4
  94:	92 fd       	sbrc	r25, 2
  96:	0a c0       	rjmp	.+20     	; 0xac <button_pressed+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	e3 ec       	ldi	r30, 0xC3	; 195
  9a:	f9 e0       	ldi	r31, 0x09	; 9
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <button_pressed+0xe>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <button_pressed+0x14>
  a2:	00 00       	nop
		_delay_ms(10);
		if(bit_is_clear(PIND, PIND2)) { // 두번째 검사
  a4:	4a 99       	sbic	0x09, 2	; 9
  a6:	03 c0       	rjmp	.+6      	; 0xae <button_pressed+0x20>
			return 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	08 95       	ret
		}
	}
	return 0;
  ac:	80 e0       	ldi	r24, 0x00	; 0
}
  ae:	08 95       	ret

000000b0 <main>:



int main(void)
{
	UART_INIT();
  b0:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_INIT>
	INIT_PORT();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <INIT_PORT>
	int state = 0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1)
	{
		if(button_pressed()) {
  bc:	0e 94 47 00 	call	0x8e	; 0x8e <button_pressed>
  c0:	88 23       	and	r24, r24
  c2:	51 f0       	breq	.+20     	; 0xd8 <main+0x28>
			if(state == 0) UART_transmit('*');
  c4:	cd 2b       	or	r28, r29
  c6:	19 f4       	brne	.+6      	; 0xce <main+0x1e>
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	0e 94 88 00 	call	0x110	; 0x110 <UART_transmit>
			state = 1;
			PORTB = 0x20;
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	85 b9       	out	0x05, r24	; 5
	
	while (1)
	{
		if(button_pressed()) {
			if(state == 0) UART_transmit('*');
			state = 1;
  d2:	c1 e0       	ldi	r28, 0x01	; 1
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	f2 cf       	rjmp	.-28     	; 0xbc <main+0xc>
			PORTB = 0x20;
			} else {
			state = 0;
			PORTB = 0x00;
  d8:	15 b8       	out	0x05, r1	; 5
		if(button_pressed()) {
			if(state == 0) UART_transmit('*');
			state = 1;
			PORTB = 0x20;
			} else {
			state = 0;
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	ee cf       	rjmp	.-36     	; 0xbc <main+0xc>

000000e0 <UART_INIT>:
}

unsigned char UART_receive(void) {
	while( !(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
  ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 60       	ori	r24, 0x06	; 6
  fc:	80 83       	st	Z, r24
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 61       	ori	r24, 0x10	; 16
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <UART_transmit>:

void UART_transmit(unsigned char data) {
	while( !(UCSR0A & (1<<UDRE0)));
 110:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 114:	95 ff       	sbrs	r25, 5
 116:	fc cf       	rjmp	.-8      	; 0x110 <UART_transmit>
	UDR0 = data;
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
