
pwm_using_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <turn_on_LED_in_PWM_manner>:
#define LED_TIME 20

void turn_on_LED_in_PWM_manner(int dim) {
	int i;
	
	PORTB = 0xFF;
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	25 b9       	out	0x05, r18	; 5
	
	for (i = 0; i<256; i++) {
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	0a c0       	rjmp	.+20     	; 0x9e <turn_on_LED_in_PWM_manner+0x1e>
		if(i>dim) PORTB = 0x00;
  8a:	82 17       	cp	r24, r18
  8c:	93 07       	cpc	r25, r19
  8e:	0c f4       	brge	.+2      	; 0x92 <turn_on_LED_in_PWM_manner+0x12>
  90:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	4a e6       	ldi	r20, 0x6A	; 106
  94:	4a 95       	dec	r20
  96:	f1 f7       	brne	.-4      	; 0x94 <turn_on_LED_in_PWM_manner+0x14>
  98:	00 c0       	rjmp	.+0      	; 0x9a <turn_on_LED_in_PWM_manner+0x1a>
void turn_on_LED_in_PWM_manner(int dim) {
	int i;
	
	PORTB = 0xFF;
	
	for (i = 0; i<256; i++) {
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	2f 3f       	cpi	r18, 0xFF	; 255
  a0:	31 05       	cpc	r19, r1
  a2:	99 f3       	breq	.-26     	; 0x8a <turn_on_LED_in_PWM_manner+0xa>
  a4:	94 f3       	brlt	.-28     	; 0x8a <turn_on_LED_in_PWM_manner+0xa>
		if(i>dim) PORTB = 0x00;
		_delay_us(LED_TIME);
	}
}
  a6:	08 95       	ret

000000a8 <main>:

int main(void)
{
	
	DDRB = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	
	int dim = 0;
	int direction = 1;
  ac:	01 e0       	ldi	r16, 0x01	; 1
  ae:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	
	DDRB = 0xFF;
	
	int dim = 0;
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
	int direction = 1;
	
	while (1)
	{
		if(dim == 0) direction = 1;
  b4:	20 97       	sbiw	r28, 0x00	; 0
  b6:	11 f4       	brne	.+4      	; 0xbc <main+0x14>
  b8:	01 e0       	ldi	r16, 0x01	; 1
  ba:	10 e0       	ldi	r17, 0x00	; 0
		if(dim == 255) direction = -1;
  bc:	cf 3f       	cpi	r28, 0xFF	; 255
  be:	d1 05       	cpc	r29, r1
  c0:	11 f4       	brne	.+4      	; 0xc6 <main+0x1e>
  c2:	0f ef       	ldi	r16, 0xFF	; 255
  c4:	1f ef       	ldi	r17, 0xFF	; 255
		
		dim += direction;
  c6:	c0 0f       	add	r28, r16
  c8:	d1 1f       	adc	r29, r17
		
		turn_on_LED_in_PWM_manner(dim);
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 40 00 	call	0x80	; 0x80 <turn_on_LED_in_PWM_manner>
	}
  d0:	f1 cf       	rjmp	.-30     	; 0xb4 <main+0xc>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
