
led_matrix_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0a  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b0  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000587  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	c5 d0       	rcall	.+394    	; 0x224 <main>
  9a:	f2 c0       	rjmp	.+484    	; 0x280 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <LEDMatrix_init>:
#include <avr/io.h>
#include "LEDMatrix.h"

void LEDMatrix_init(void) {
	// 해당 column 핀을 출력으로 설정
	MATRIX_COL1_DDR |= (1 << MATRIX_COL1_PIN);
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL2_DDR |= (1 << MATRIX_COL2_PIN);
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL3_DDR |= (1 << MATRIX_COL3_PIN);
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL4_DDR |= (1 << MATRIX_COL4_PIN);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL5_DDR |= (1 << MATRIX_COL5_PIN);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL6_DDR |= (1 << MATRIX_COL6_PIN);
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL7_DDR |= (1 << MATRIX_COL7_PIN);	
  c2:	84 b3       	in	r24, 0x14	; 20
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	84 bb       	out	0x14, r24	; 20
	MATRIX_COL8_DDR |= (1 << MATRIX_COL8_PIN);
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	84 bb       	out	0x14, r24	; 20
	
	// 해당 row 핀을 출력으로 설정
	MATRIX_ROW1_DDR |= (1 << MATRIX_ROW1_PIN);
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW2_DDR |= (1 << MATRIX_ROW2_PIN);
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW3_DDR |= (1 << MATRIX_ROW3_PIN);
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW4_DDR |= (1 << MATRIX_ROW4_PIN);
  e0:	8a b3       	in	r24, 0x1a	; 26
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW5_DDR |= (1 << MATRIX_ROW5_PIN);
  e6:	8a b3       	in	r24, 0x1a	; 26
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW6_DDR |= (1 << MATRIX_ROW6_PIN);
  ec:	8a b3       	in	r24, 0x1a	; 26
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW7_DDR |= (1 << MATRIX_ROW7_PIN);
  f2:	8a b3       	in	r24, 0x1a	; 26
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	8a bb       	out	0x1a, r24	; 26
	MATRIX_ROW8_DDR |= (1 << MATRIX_ROW8_PIN);
  f8:	8a b3       	in	r24, 0x1a	; 26
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret

00000100 <LEDMatrix_writeColumn>:
}

void LEDMatrix_writeColumn(uint8_t col_data) { // column 데이터 출력
	if(col_data & (1 << 0))	MATRIX_COL1_PORT |= (1 << MATRIX_COL1_PIN);
 100:	80 ff       	sbrs	r24, 0
 102:	04 c0       	rjmp	.+8      	; 0x10c <LEDMatrix_writeColumn+0xc>
 104:	95 b3       	in	r25, 0x15	; 21
 106:	91 60       	ori	r25, 0x01	; 1
 108:	95 bb       	out	0x15, r25	; 21
 10a:	03 c0       	rjmp	.+6      	; 0x112 <LEDMatrix_writeColumn+0x12>
	else MATRIX_COL1_PORT &= ~(1 << MATRIX_COL1_PIN);
 10c:	95 b3       	in	r25, 0x15	; 21
 10e:	9e 7f       	andi	r25, 0xFE	; 254
 110:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 1))	MATRIX_COL2_PORT |= (1 << MATRIX_COL2_PIN);
 112:	81 ff       	sbrs	r24, 1
 114:	04 c0       	rjmp	.+8      	; 0x11e <LEDMatrix_writeColumn+0x1e>
 116:	95 b3       	in	r25, 0x15	; 21
 118:	92 60       	ori	r25, 0x02	; 2
 11a:	95 bb       	out	0x15, r25	; 21
 11c:	03 c0       	rjmp	.+6      	; 0x124 <LEDMatrix_writeColumn+0x24>
	else MATRIX_COL2_PORT &= ~(1 << MATRIX_COL2_PIN);
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	9d 7f       	andi	r25, 0xFD	; 253
 122:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 2))	MATRIX_COL3_PORT |= (1 << MATRIX_COL3_PIN);
 124:	82 ff       	sbrs	r24, 2
 126:	04 c0       	rjmp	.+8      	; 0x130 <LEDMatrix_writeColumn+0x30>
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	94 60       	ori	r25, 0x04	; 4
 12c:	95 bb       	out	0x15, r25	; 21
 12e:	03 c0       	rjmp	.+6      	; 0x136 <LEDMatrix_writeColumn+0x36>
	else MATRIX_COL3_PORT &= ~(1 << MATRIX_COL3_PIN);
 130:	95 b3       	in	r25, 0x15	; 21
 132:	9b 7f       	andi	r25, 0xFB	; 251
 134:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 3))	MATRIX_COL4_PORT |= (1 << MATRIX_COL4_PIN);
 136:	83 ff       	sbrs	r24, 3
 138:	04 c0       	rjmp	.+8      	; 0x142 <LEDMatrix_writeColumn+0x42>
 13a:	95 b3       	in	r25, 0x15	; 21
 13c:	98 60       	ori	r25, 0x08	; 8
 13e:	95 bb       	out	0x15, r25	; 21
 140:	03 c0       	rjmp	.+6      	; 0x148 <LEDMatrix_writeColumn+0x48>
	else MATRIX_COL4_PORT &= ~(1 << MATRIX_COL4_PIN);
 142:	95 b3       	in	r25, 0x15	; 21
 144:	97 7f       	andi	r25, 0xF7	; 247
 146:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 4))	MATRIX_COL5_PORT |= (1 << MATRIX_COL5_PIN);
 148:	84 ff       	sbrs	r24, 4
 14a:	04 c0       	rjmp	.+8      	; 0x154 <LEDMatrix_writeColumn+0x54>
 14c:	95 b3       	in	r25, 0x15	; 21
 14e:	90 61       	ori	r25, 0x10	; 16
 150:	95 bb       	out	0x15, r25	; 21
 152:	03 c0       	rjmp	.+6      	; 0x15a <LEDMatrix_writeColumn+0x5a>
	else MATRIX_COL5_PORT &= ~(1 << MATRIX_COL5_PIN);
 154:	95 b3       	in	r25, 0x15	; 21
 156:	9f 7e       	andi	r25, 0xEF	; 239
 158:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 5))	MATRIX_COL6_PORT |= (1 << MATRIX_COL6_PIN);
 15a:	85 ff       	sbrs	r24, 5
 15c:	04 c0       	rjmp	.+8      	; 0x166 <LEDMatrix_writeColumn+0x66>
 15e:	95 b3       	in	r25, 0x15	; 21
 160:	90 62       	ori	r25, 0x20	; 32
 162:	95 bb       	out	0x15, r25	; 21
 164:	03 c0       	rjmp	.+6      	; 0x16c <LEDMatrix_writeColumn+0x6c>
	else MATRIX_COL6_PORT &= ~(1 << MATRIX_COL6_PIN);
 166:	95 b3       	in	r25, 0x15	; 21
 168:	9f 7d       	andi	r25, 0xDF	; 223
 16a:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 6))	MATRIX_COL7_PORT |= (1 << MATRIX_COL7_PIN);
 16c:	86 ff       	sbrs	r24, 6
 16e:	04 c0       	rjmp	.+8      	; 0x178 <LEDMatrix_writeColumn+0x78>
 170:	95 b3       	in	r25, 0x15	; 21
 172:	90 64       	ori	r25, 0x40	; 64
 174:	95 bb       	out	0x15, r25	; 21
 176:	03 c0       	rjmp	.+6      	; 0x17e <LEDMatrix_writeColumn+0x7e>
	else MATRIX_COL7_PORT &= ~(1 << MATRIX_COL7_PIN);
 178:	95 b3       	in	r25, 0x15	; 21
 17a:	9f 7b       	andi	r25, 0xBF	; 191
 17c:	95 bb       	out	0x15, r25	; 21
	if(col_data & (1 << 7))	MATRIX_COL8_PORT |= (1 << MATRIX_COL8_PIN);
 17e:	88 23       	and	r24, r24
 180:	24 f4       	brge	.+8      	; 0x18a <LEDMatrix_writeColumn+0x8a>
 182:	85 b3       	in	r24, 0x15	; 21
 184:	80 68       	ori	r24, 0x80	; 128
 186:	85 bb       	out	0x15, r24	; 21
 188:	08 95       	ret
	else MATRIX_COL8_PORT &= ~(1 << MATRIX_COL8_PIN);
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	85 bb       	out	0x15, r24	; 21
 190:	08 95       	ret

00000192 <LEDMatrix_writeRow>:
}

void LEDMatrix_writeRow(uint8_t row_data) { // row 데이터 출력
	if(row_data & (1 << 0))	MATRIX_ROW1_PORT |= (1 << MATRIX_ROW1_PIN);
 192:	80 ff       	sbrs	r24, 0
 194:	04 c0       	rjmp	.+8      	; 0x19e <LEDMatrix_writeRow+0xc>
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	91 60       	ori	r25, 0x01	; 1
 19a:	9b bb       	out	0x1b, r25	; 27
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <LEDMatrix_writeRow+0x12>
	else MATRIX_ROW1_PORT &= ~(1 << MATRIX_ROW1_PIN);
 19e:	9b b3       	in	r25, 0x1b	; 27
 1a0:	9e 7f       	andi	r25, 0xFE	; 254
 1a2:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 1))	MATRIX_ROW2_PORT |= (1 << MATRIX_ROW2_PIN);
 1a4:	81 ff       	sbrs	r24, 1
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <LEDMatrix_writeRow+0x1e>
 1a8:	9b b3       	in	r25, 0x1b	; 27
 1aa:	92 60       	ori	r25, 0x02	; 2
 1ac:	9b bb       	out	0x1b, r25	; 27
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <LEDMatrix_writeRow+0x24>
	else MATRIX_ROW2_PORT &= ~(1 << MATRIX_ROW2_PIN);
 1b0:	9b b3       	in	r25, 0x1b	; 27
 1b2:	9d 7f       	andi	r25, 0xFD	; 253
 1b4:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 2))	MATRIX_ROW3_PORT |= (1 << MATRIX_ROW3_PIN);
 1b6:	82 ff       	sbrs	r24, 2
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <LEDMatrix_writeRow+0x30>
 1ba:	9b b3       	in	r25, 0x1b	; 27
 1bc:	94 60       	ori	r25, 0x04	; 4
 1be:	9b bb       	out	0x1b, r25	; 27
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <LEDMatrix_writeRow+0x36>
	else MATRIX_ROW3_PORT &= ~(1 << MATRIX_ROW3_PIN);
 1c2:	9b b3       	in	r25, 0x1b	; 27
 1c4:	9b 7f       	andi	r25, 0xFB	; 251
 1c6:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 3))	MATRIX_ROW4_PORT |= (1 << MATRIX_ROW4_PIN);
 1c8:	83 ff       	sbrs	r24, 3
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <LEDMatrix_writeRow+0x42>
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	98 60       	ori	r25, 0x08	; 8
 1d0:	9b bb       	out	0x1b, r25	; 27
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <LEDMatrix_writeRow+0x48>
	else MATRIX_ROW4_PORT &= ~(1 << MATRIX_ROW4_PIN);
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	97 7f       	andi	r25, 0xF7	; 247
 1d8:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 4))	MATRIX_ROW5_PORT |= (1 << MATRIX_ROW5_PIN);
 1da:	84 ff       	sbrs	r24, 4
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <LEDMatrix_writeRow+0x54>
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	90 61       	ori	r25, 0x10	; 16
 1e2:	9b bb       	out	0x1b, r25	; 27
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <LEDMatrix_writeRow+0x5a>
	else MATRIX_ROW5_PORT &= ~(1 << MATRIX_ROW5_PIN);
 1e6:	9b b3       	in	r25, 0x1b	; 27
 1e8:	9f 7e       	andi	r25, 0xEF	; 239
 1ea:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 5))	MATRIX_ROW6_PORT |= (1 << MATRIX_ROW6_PIN);
 1ec:	85 ff       	sbrs	r24, 5
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <LEDMatrix_writeRow+0x66>
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	90 62       	ori	r25, 0x20	; 32
 1f4:	9b bb       	out	0x1b, r25	; 27
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <LEDMatrix_writeRow+0x6c>
	else MATRIX_ROW6_PORT &= ~(1 << MATRIX_ROW6_PIN);
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	9f 7d       	andi	r25, 0xDF	; 223
 1fc:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 6))	MATRIX_ROW7_PORT |= (1 << MATRIX_ROW7_PIN);
 1fe:	86 ff       	sbrs	r24, 6
 200:	04 c0       	rjmp	.+8      	; 0x20a <LEDMatrix_writeRow+0x78>
 202:	9b b3       	in	r25, 0x1b	; 27
 204:	90 64       	ori	r25, 0x40	; 64
 206:	9b bb       	out	0x1b, r25	; 27
 208:	03 c0       	rjmp	.+6      	; 0x210 <LEDMatrix_writeRow+0x7e>
	else MATRIX_ROW7_PORT &= ~(1 << MATRIX_ROW7_PIN);
 20a:	9b b3       	in	r25, 0x1b	; 27
 20c:	9f 7b       	andi	r25, 0xBF	; 191
 20e:	9b bb       	out	0x1b, r25	; 27
	if(row_data & (1 << 7))	MATRIX_ROW8_PORT |= (1 << MATRIX_ROW8_PIN);
 210:	88 23       	and	r24, r24
 212:	24 f4       	brge	.+8      	; 0x21c <LEDMatrix_writeRow+0x8a>
 214:	8b b3       	in	r24, 0x1b	; 27
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	08 95       	ret
	else MATRIX_ROW8_PORT &= ~(1 << MATRIX_ROW8_PIN);
 21c:	8b b3       	in	r24, 0x1b	; 27
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret

00000224 <main>:
#include "LEDMatrix.h"


int main(void)
{
	LEDMatrix_init();
 224:	3c df       	rcall	.-392    	; 0x9e <LEDMatrix_init>
    
    while (1) 
    {
		for(int i = 0; i < 8; i++) {
 226:	00 e0       	ldi	r16, 0x00	; 0
 228:	10 e0       	ldi	r17, 0x00	; 0
 22a:	26 c0       	rjmp	.+76     	; 0x278 <main+0x54>
			uint8_t col_data = ~(1 << i);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	00 2e       	mov	r0, r16
 232:	02 c0       	rjmp	.+4      	; 0x238 <main+0x14>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <main+0x10>
			LEDMatrix_writeColumn(col_data);
 23c:	80 95       	com	r24
 23e:	60 df       	rcall	.-320    	; 0x100 <LEDMatrix_writeColumn>
			
			for(int j = 0; j < 8; j++) {
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	14 c0       	rjmp	.+40     	; 0x26e <main+0x4a>
				uint8_t row_data = 1 << (7 - j);
 246:	27 e0       	ldi	r18, 0x07	; 7
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	2c 1b       	sub	r18, r28
 24c:	3d 0b       	sbc	r19, r29
				LEDMatrix_writeRow(row_data);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	01 c0       	rjmp	.+2      	; 0x254 <main+0x30>
 252:	88 0f       	add	r24, r24
 254:	2a 95       	dec	r18
 256:	ea f7       	brpl	.-6      	; 0x252 <main+0x2e>
 258:	9c df       	rcall	.-200    	; 0x192 <LEDMatrix_writeRow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	81 ee       	ldi	r24, 0xE1	; 225
 25e:	94 e0       	ldi	r25, 0x04	; 4
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x3c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x46>
 26a:	00 00       	nop
    {
		for(int i = 0; i < 8; i++) {
			uint8_t col_data = ~(1 << i);
			LEDMatrix_writeColumn(col_data);
			
			for(int j = 0; j < 8; j++) {
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	c8 30       	cpi	r28, 0x08	; 8
 270:	d1 05       	cpc	r29, r1
 272:	4c f3       	brlt	.-46     	; 0x246 <main+0x22>
{
	LEDMatrix_init();
    
    while (1) 
    {
		for(int i = 0; i < 8; i++) {
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	1f 4f       	sbci	r17, 0xFF	; 255
 278:	08 30       	cpi	r16, 0x08	; 8
 27a:	11 05       	cpc	r17, r1
 27c:	bc f2       	brlt	.-82     	; 0x22c <main+0x8>
 27e:	d3 cf       	rjmp	.-90     	; 0x226 <main+0x2>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
