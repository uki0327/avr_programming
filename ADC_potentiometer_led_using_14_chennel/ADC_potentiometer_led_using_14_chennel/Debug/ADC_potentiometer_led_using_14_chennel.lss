
ADC_potentiometer_led_using_14_chennel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000318  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7d  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081e  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057e  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000569  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000280b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_INIT>:
#include <util/delay.h>
#include "UART.h"
#include <stdio.h>

void ADC_INIT(unsigned char channel) {
	ADMUX |= 0x40;
  96:	ac e7       	ldi	r26, 0x7C	; 124
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	9c 91       	ld	r25, X
  9c:	90 64       	ori	r25, 0x40	; 64
  9e:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	97 60       	ori	r25, 0x07	; 7
  a8:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);
  aa:	90 81       	ld	r25, Z
  ac:	90 68       	ori	r25, 0x80	; 128
  ae:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);
  b0:	90 81       	ld	r25, Z
  b2:	90 62       	ori	r25, 0x20	; 32
  b4:	90 83       	st	Z, r25
	
	ADMUX |= ((ADMUX & 0xE0) | channel);
  b6:	9c 91       	ld	r25, X
  b8:	2c 91       	ld	r18, X
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	89 2b       	or	r24, r25
  be:	82 2b       	or	r24, r18
  c0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <read_ADC>:
}

int read_ADC(void) {
	while(!(ADCSRA & (1 << ADIF)));
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	84 ff       	sbrs	r24, 4
  d2:	fd cf       	rjmp	.-6      	; 0xce <read_ADC+0x4>
	
	return ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
	int read, alctualVCC;
	
	ADC_INIT(14);
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_INIT>
	UART_INIT();
  e4:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_INIT>
	{
		read = read_ADC();
		alctualVCC = 1125300L / read;
		
		UART_printString("actualVCC = ");
		UART_print16bitNumber(alctualVCC);
  e8:	0f 2e       	mov	r0, r31
  ea:	f4 eb       	ldi	r31, 0xB4	; 180
  ec:	cf 2e       	mov	r12, r31
  ee:	fb e2       	ldi	r31, 0x2B	; 43
  f0:	df 2e       	mov	r13, r31
  f2:	f1 e1       	ldi	r31, 0x11	; 17
  f4:	ef 2e       	mov	r14, r31
  f6:	f1 2c       	mov	r15, r1
  f8:	f0 2d       	mov	r31, r0
	ADC_INIT(14);
	UART_INIT();
	
	while (1)
	{
		read = read_ADC();
  fa:	0e 94 65 00 	call	0xca	; 0xca <read_ADC>
  fe:	ec 01       	movw	r28, r24
		alctualVCC = 1125300L / read;
		
		UART_printString("actualVCC = ");
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_printString>
		UART_print16bitNumber(alctualVCC);
 108:	9e 01       	movw	r18, r28
 10a:	dd 0f       	add	r29, r29
 10c:	44 0b       	sbc	r20, r20
 10e:	55 0b       	sbc	r21, r21
 110:	c7 01       	movw	r24, r14
 112:	b6 01       	movw	r22, r12
 114:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__divmodsi4>
 118:	c9 01       	movw	r24, r18
 11a:	0e 94 cc 00 	call	0x198	; 0x198 <UART_print16bitNumber>
		UART_printString("\n");
 11e:	8d e0       	ldi	r24, 0x0D	; 13
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x4e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x58>
 136:	00 00       	nop
 138:	e0 cf       	rjmp	.-64     	; 0xfa <main+0x1c>

0000013a <UART_INIT>:
	}
	
	for(i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
	}
}
 13a:	e0 ec       	ldi	r30, 0xC0	; 192
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
 144:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 148:	8f ec       	ldi	r24, 0xCF	; 207
 14a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 14e:	e2 ec       	ldi	r30, 0xC2	; 194
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	86 60       	ori	r24, 0x06	; 6
 156:	80 83       	st	Z, r24
 158:	e1 ec       	ldi	r30, 0xC1	; 193
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 61       	ori	r24, 0x10	; 16
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <UART_transmit>:
 16a:	e0 ec       	ldi	r30, 0xC0	; 192
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	95 ff       	sbrs	r25, 5
 172:	fd cf       	rjmp	.-6      	; 0x16e <UART_transmit+0x4>
 174:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 178:	08 95       	ret

0000017a <UART_printString>:
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
 180:	88 81       	ld	r24, Y
 182:	88 23       	and	r24, r24
 184:	31 f0       	breq	.+12     	; 0x192 <UART_printString+0x18>
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_transmit>
 18c:	89 91       	ld	r24, Y+
 18e:	81 11       	cpse	r24, r1
 190:	fb cf       	rjmp	.-10     	; 0x188 <UART_printString+0xe>
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <UART_print16bitNumber>:

void UART_print16bitNumber(uint16_t no) {
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <UART_print16bitNumber+0xe>
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <UART_print16bitNumber+0x10>
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <UART_print16bitNumber+0x12>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	ac 01       	movw	r20, r24
	char numString[6] = "0";
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	fe 01       	movw	r30, r28
 1ba:	33 96       	adiw	r30, 0x03	; 3
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	df 01       	movw	r26, r30
 1c0:	1d 92       	st	X+, r1
 1c2:	8a 95       	dec	r24
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <UART_print16bitNumber+0x28>
	int i, index = 0;
	
	if(no>0) {
 1c6:	41 15       	cp	r20, r1
 1c8:	51 05       	cpc	r21, r1
 1ca:	b9 f1       	breq	.+110    	; 0x23a <UART_print16bitNumber+0xa2>
 1cc:	32 97       	sbiw	r30, 0x02	; 2
 1ce:	00 e0       	ldi	r16, 0x00	; 0
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <UART_print16bitNumber+0x3e>
		for(i = 0; no != 0; i++ ) {
 1d4:	8c 01       	movw	r16, r24
			numString[i] = no % 10 + '0';
 1d6:	9a 01       	movw	r18, r20
 1d8:	ad ec       	ldi	r26, 0xCD	; 205
 1da:	bc ec       	ldi	r27, 0xCC	; 204
 1dc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__umulhisi3>
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	9c 01       	movw	r18, r24
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	9a 01       	movw	r18, r20
 204:	28 1b       	sub	r18, r24
 206:	39 0b       	sbc	r19, r25
 208:	c9 01       	movw	r24, r18
 20a:	80 5d       	subi	r24, 0xD0	; 208
 20c:	81 93       	st	Z+, r24
			no = no /10;
 20e:	9a 01       	movw	r18, r20
 210:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__umulhisi3>
 214:	ac 01       	movw	r20, r24
 216:	56 95       	lsr	r21
 218:	47 95       	ror	r20
 21a:	56 95       	lsr	r21
 21c:	47 95       	ror	r20
 21e:	56 95       	lsr	r21
 220:	47 95       	ror	r20
void UART_print16bitNumber(uint16_t no) {
	char numString[6] = "0";
	int i, index = 0;
	
	if(no>0) {
		for(i = 0; no != 0; i++ ) {
 222:	c8 01       	movw	r24, r16
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	41 15       	cp	r20, r1
 228:	51 05       	cpc	r21, r1
 22a:	a1 f6       	brne	.-88     	; 0x1d4 <UART_print16bitNumber+0x3c>
			numString[i] = no % 10 + '0';
			no = no /10;
		}
		numString[i] = '\0';
 22c:	fe 01       	movw	r30, r28
 22e:	e8 0f       	add	r30, r24
 230:	f9 1f       	adc	r31, r25
 232:	11 82       	std	Z+1, r1	; 0x01
		index = i -1;
	}
	
	for(i = index; i >= 0; i--) {
 234:	11 23       	and	r17, r17
 236:	1c f4       	brge	.+6      	; 0x23e <UART_print16bitNumber+0xa6>
 238:	10 c0       	rjmp	.+32     	; 0x25a <UART_print16bitNumber+0xc2>
	}
}

void UART_print16bitNumber(uint16_t no) {
	char numString[6] = "0";
	int i, index = 0;
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	ce 01       	movw	r24, r28
 240:	80 0f       	add	r24, r16
 242:	91 1f       	adc	r25, r17
 244:	dc 01       	movw	r26, r24
 246:	12 96       	adiw	r26, 0x02	; 2
 248:	7d 01       	movw	r14, r26
		numString[i] = '\0';
		index = i -1;
	}
	
	for(i = index; i >= 0; i--) {
		UART_transmit(numString[i]);
 24a:	f7 01       	movw	r30, r14
 24c:	82 91       	ld	r24, -Z
 24e:	7f 01       	movw	r14, r30
 250:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_transmit>
		}
		numString[i] = '\0';
		index = i -1;
	}
	
	for(i = index; i >= 0; i--) {
 254:	01 50       	subi	r16, 0x01	; 1
 256:	11 09       	sbc	r17, r1
 258:	c2 f7       	brpl	.-16     	; 0x24a <UART_print16bitNumber+0xb2>
		UART_transmit(numString[i]);
	}
}
 25a:	26 96       	adiw	r28, 0x06	; 6
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

00000274 <__udivmodsi4>:
 274:	a1 e2       	ldi	r26, 0x21	; 33
 276:	1a 2e       	mov	r1, r26
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	fd 01       	movw	r30, r26
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__udivmodsi4_ep>

00000280 <__udivmodsi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	ee 1f       	adc	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	a2 17       	cp	r26, r18
 28a:	b3 07       	cpc	r27, r19
 28c:	e4 07       	cpc	r30, r20
 28e:	f5 07       	cpc	r31, r21
 290:	20 f0       	brcs	.+8      	; 0x29a <__udivmodsi4_ep>
 292:	a2 1b       	sub	r26, r18
 294:	b3 0b       	sbc	r27, r19
 296:	e4 0b       	sbc	r30, r20
 298:	f5 0b       	sbc	r31, r21

0000029a <__udivmodsi4_ep>:
 29a:	66 1f       	adc	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	1a 94       	dec	r1
 2a4:	69 f7       	brne	.-38     	; 0x280 <__udivmodsi4_loop>
 2a6:	60 95       	com	r22
 2a8:	70 95       	com	r23
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	bd 01       	movw	r22, r26
 2b4:	cf 01       	movw	r24, r30
 2b6:	08 95       	ret

000002b8 <__divmodsi4>:
 2b8:	05 2e       	mov	r0, r21
 2ba:	97 fb       	bst	r25, 7
 2bc:	1e f4       	brtc	.+6      	; 0x2c4 <__divmodsi4+0xc>
 2be:	00 94       	com	r0
 2c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__negsi2>
 2c4:	57 fd       	sbrc	r21, 7
 2c6:	07 d0       	rcall	.+14     	; 0x2d6 <__divmodsi4_neg2>
 2c8:	0e 94 3a 01 	call	0x274	; 0x274 <__udivmodsi4>
 2cc:	07 fc       	sbrc	r0, 7
 2ce:	03 d0       	rcall	.+6      	; 0x2d6 <__divmodsi4_neg2>
 2d0:	4e f4       	brtc	.+18     	; 0x2e4 <__divmodsi4_exit>
 2d2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__negsi2>

000002d6 <__divmodsi4_neg2>:
 2d6:	50 95       	com	r21
 2d8:	40 95       	com	r20
 2da:	30 95       	com	r19
 2dc:	21 95       	neg	r18
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	4f 4f       	sbci	r20, 0xFF	; 255
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255

000002e4 <__divmodsi4_exit>:
 2e4:	08 95       	ret

000002e6 <__negsi2>:
 2e6:	90 95       	com	r25
 2e8:	80 95       	com	r24
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	08 95       	ret

000002f6 <__umulhisi3>:
 2f6:	a2 9f       	mul	r26, r18
 2f8:	b0 01       	movw	r22, r0
 2fa:	b3 9f       	mul	r27, r19
 2fc:	c0 01       	movw	r24, r0
 2fe:	a3 9f       	mul	r26, r19
 300:	70 0d       	add	r23, r0
 302:	81 1d       	adc	r24, r1
 304:	11 24       	eor	r1, r1
 306:	91 1d       	adc	r25, r1
 308:	b2 9f       	mul	r27, r18
 30a:	70 0d       	add	r23, r0
 30c:	81 1d       	adc	r24, r1
 30e:	11 24       	eor	r1, r1
 310:	91 1d       	adc	r25, r1
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
