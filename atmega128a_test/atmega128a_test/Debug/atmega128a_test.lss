
atmega128a_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000518  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000518  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000112c  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba3  00000000  00000000  000020a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058d  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e11  00000000  00000000  000034f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000430a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	02 d0       	rcall	.+4      	; 0x90 <main>
  8c:	43 c2       	rjmp	.+1158   	; 0x514 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>
#include "UART.h"

int main(void)
{
    UART_INIT(115200);
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	72 ec       	ldi	r23, 0xC2	; 194
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	29 d0       	rcall	.+82     	; 0xec <UART_INIT>
	
    while (1) 
    {
		UART_printString("바이너리 8비트: ");
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	d1 d0       	rcall	.+418    	; 0x242 <UART_printString>
		UART_print8bitBinaryInc0f((unsigned int)1);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	e4 d0       	rcall	.+456    	; 0x26c <UART_print8bitBinaryInc0f>
		UART_transmit('\n');
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	c6 d0       	rcall	.+396    	; 0x234 <UART_transmit>
		UART_printString("바이너리 16비트: ");
  a8:	87 e2       	ldi	r24, 0x27	; 39
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	ca d0       	rcall	.+404    	; 0x242 <UART_printString>
		UART_print16bitBinaryInc0f((uint16_t)0b0000000000000001);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	30 d1       	rcall	.+608    	; 0x314 <UART_print16bitBinaryInc0f>
		UART_transmit('\n');
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	be d0       	rcall	.+380    	; 0x234 <UART_transmit>
		UART_printString("헥스 8비트: ");
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	c2 d0       	rcall	.+388    	; 0x242 <UART_printString>
		UART_print8bitHexInc0f((unsigned int)0x0D);
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	84 d1       	rcall	.+776    	; 0x3ca <UART_print8bitHexInc0f>
		UART_transmit('\n');
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	b7 d0       	rcall	.+366    	; 0x234 <UART_transmit>
		UART_printString("헥스 16비트: ");
  c6:	80 e5       	ldi	r24, 0x50	; 80
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	bb d0       	rcall	.+374    	; 0x242 <UART_printString>
  cc:	8a ea       	ldi	r24, 0xAA	; 170
		UART_print16bitHexInc0f((uint16_t)0x0AAA);
  ce:	9a e0       	ldi	r25, 0x0A	; 10
  d0:	c8 d1       	rcall	.+912    	; 0x462 <UART_print16bitHexInc0f>
  d2:	82 e6       	ldi	r24, 0x62	; 98
  d4:	91 e0       	ldi	r25, 0x01	; 1
		UART_printString("\n\n");		
  d6:	b5 d0       	rcall	.+362    	; 0x242 <UART_printString>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	83 ed       	ldi	r24, 0xD3	; 211
  dc:	90 e3       	ldi	r25, 0x30	; 48
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x4e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x58>
  e8:	00 00       	nop
  ea:	d7 cf       	rjmp	.-82     	; 0x9a <main+0xa>

000000ec <UART_INIT>:
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	20 81       	ld	r18, Z
	numString[4] = '\0';
	
	for (i = 3; i >= 0; i--) {
		UART_transmit(numString[i]);
	}
}
  f2:	22 60       	ori	r18, 0x02	; 2
  f4:	20 83       	st	Z, r18
  f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  fa:	60 38       	cpi	r22, 0x80	; 128
  fc:	20 e7       	ldi	r18, 0x70	; 112
  fe:	72 07       	cpc	r23, r18
 100:	81 05       	cpc	r24, r1
 102:	91 05       	cpc	r25, r1
 104:	09 f4       	brne	.+2      	; 0x108 <UART_INIT+0x1c>
 106:	6d c0       	rjmp	.+218    	; 0x1e2 <UART_INIT+0xf6>
 108:	58 f5       	brcc	.+86     	; 0x160 <UART_INIT+0x74>
 10a:	60 3c       	cpi	r22, 0xC0	; 192
 10c:	22 e1       	ldi	r18, 0x12	; 18
 10e:	72 07       	cpc	r23, r18
 110:	81 05       	cpc	r24, r1
 112:	91 05       	cpc	r25, r1
 114:	09 f4       	brne	.+2      	; 0x118 <UART_INIT+0x2c>
 116:	55 c0       	rjmp	.+170    	; 0x1c2 <UART_INIT+0xd6>
 118:	70 f4       	brcc	.+28     	; 0x136 <UART_INIT+0x4a>
 11a:	60 3b       	cpi	r22, 0xB0	; 176
 11c:	24 e0       	ldi	r18, 0x04	; 4
 11e:	72 07       	cpc	r23, r18
 120:	81 05       	cpc	r24, r1
 122:	91 05       	cpc	r25, r1
 124:	09 f4       	brne	.+2      	; 0x128 <UART_INIT+0x3c>
 126:	45 c0       	rjmp	.+138    	; 0x1b2 <UART_INIT+0xc6>
 128:	60 36       	cpi	r22, 0x60	; 96
 12a:	79 40       	sbci	r23, 0x09	; 9
 12c:	81 05       	cpc	r24, r1
 12e:	91 05       	cpc	r25, r1
 130:	09 f4       	brne	.+2      	; 0x134 <UART_INIT+0x48>
 132:	43 c0       	rjmp	.+134    	; 0x1ba <UART_INIT+0xce>
 134:	71 c0       	rjmp	.+226    	; 0x218 <UART_INIT+0x12c>
 136:	60 34       	cpi	r22, 0x40	; 64
 138:	28 e3       	ldi	r18, 0x38	; 56
 13a:	72 07       	cpc	r23, r18
 13c:	81 05       	cpc	r24, r1
 13e:	91 05       	cpc	r25, r1
 140:	09 f4       	brne	.+2      	; 0x144 <UART_INIT+0x58>
 142:	47 c0       	rjmp	.+142    	; 0x1d2 <UART_INIT+0xe6>
 144:	61 15       	cp	r22, r1
 146:	2b e4       	ldi	r18, 0x4B	; 75
 148:	72 07       	cpc	r23, r18
 14a:	81 05       	cpc	r24, r1
 14c:	91 05       	cpc	r25, r1
 14e:	09 f4       	brne	.+2      	; 0x152 <UART_INIT+0x66>
 150:	44 c0       	rjmp	.+136    	; 0x1da <UART_INIT+0xee>
 152:	60 38       	cpi	r22, 0x80	; 128
 154:	75 42       	sbci	r23, 0x25	; 37
 156:	81 05       	cpc	r24, r1
 158:	91 05       	cpc	r25, r1
 15a:	09 f0       	breq	.+2      	; 0x15e <UART_INIT+0x72>
 15c:	5d c0       	rjmp	.+186    	; 0x218 <UART_INIT+0x12c>
 15e:	35 c0       	rjmp	.+106    	; 0x1ca <UART_INIT+0xde>
 160:	61 15       	cp	r22, r1
 162:	22 ec       	ldi	r18, 0xC2	; 194
 164:	72 07       	cpc	r23, r18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	82 07       	cpc	r24, r18
 16a:	91 05       	cpc	r25, r1
 16c:	09 f4       	brne	.+2      	; 0x170 <UART_INIT+0x84>
 16e:	45 c0       	rjmp	.+138    	; 0x1fa <UART_INIT+0x10e>
 170:	60 f4       	brcc	.+24     	; 0x18a <UART_INIT+0x9e>
 172:	61 15       	cp	r22, r1
 174:	26 e9       	ldi	r18, 0x96	; 150
 176:	72 07       	cpc	r23, r18
 178:	81 05       	cpc	r24, r1
 17a:	91 05       	cpc	r25, r1
 17c:	b1 f1       	breq	.+108    	; 0x1ea <UART_INIT+0xfe>
 17e:	61 15       	cp	r22, r1
 180:	71 4e       	sbci	r23, 0xE1	; 225
 182:	81 05       	cpc	r24, r1
 184:	91 05       	cpc	r25, r1
 186:	a9 f1       	breq	.+106    	; 0x1f2 <UART_INIT+0x106>
 188:	47 c0       	rjmp	.+142    	; 0x218 <UART_INIT+0x12c>
 18a:	60 39       	cpi	r22, 0x90	; 144
 18c:	20 ed       	ldi	r18, 0xD0	; 208
 18e:	72 07       	cpc	r23, r18
 190:	23 e0       	ldi	r18, 0x03	; 3
 192:	82 07       	cpc	r24, r18
 194:	91 05       	cpc	r25, r1
 196:	c9 f1       	breq	.+114    	; 0x20a <UART_INIT+0x11e>
 198:	60 34       	cpi	r22, 0x40	; 64
 19a:	22 e4       	ldi	r18, 0x42	; 66
 19c:	72 07       	cpc	r23, r18
 19e:	2f e0       	ldi	r18, 0x0F	; 15
 1a0:	82 07       	cpc	r24, r18
 1a2:	91 05       	cpc	r25, r1
 1a4:	b1 f1       	breq	.+108    	; 0x212 <UART_INIT+0x126>
 1a6:	61 15       	cp	r22, r1
 1a8:	74 48       	sbci	r23, 0x84	; 132
 1aa:	83 40       	sbci	r24, 0x03	; 3
 1ac:	91 05       	cpc	r25, r1
 1ae:	a1 f5       	brne	.+104    	; 0x218 <UART_INIT+0x12c>
 1b0:	28 c0       	rjmp	.+80     	; 0x202 <UART_INIT+0x116>
 1b2:	82 e8       	ldi	r24, 0x82	; 130
 1b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1b8:	2f c0       	rjmp	.+94     	; 0x218 <UART_INIT+0x12c>
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1c0:	2b c0       	rjmp	.+86     	; 0x218 <UART_INIT+0x12c>
 1c2:	80 ea       	ldi	r24, 0xA0	; 160
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1c8:	27 c0       	rjmp	.+78     	; 0x218 <UART_INIT+0x12c>
 1ca:	8f ec       	ldi	r24, 0xCF	; 207
 1cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <UART_INIT+0x12c>
 1d2:	8a e8       	ldi	r24, 0x8A	; 138
 1d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1d8:	1f c0       	rjmp	.+62     	; 0x218 <UART_INIT+0x12c>
 1da:	87 e6       	ldi	r24, 0x67	; 103
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <UART_INIT+0x12c>
 1e2:	84 e4       	ldi	r24, 0x44	; 68
 1e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <UART_INIT+0x12c>
 1ea:	83 e3       	ldi	r24, 0x33	; 51
 1ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1f0:	13 c0       	rjmp	.+38     	; 0x218 <UART_INIT+0x12c>
 1f2:	82 e2       	ldi	r24, 0x22	; 34
 1f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <UART_INIT+0x12c>
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 200:	0b c0       	rjmp	.+22     	; 0x218 <UART_INIT+0x12c>
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 208:	07 c0       	rjmp	.+14     	; 0x218 <UART_INIT+0x12c>
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 210:	03 c0       	rjmp	.+6      	; 0x218 <UART_INIT+0x12c>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 218:	e2 ec       	ldi	r30, 0xC2	; 194
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	86 60       	ori	r24, 0x06	; 6
 220:	80 83       	st	Z, r24
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	80 83       	st	Z, r24
 22c:	80 81       	ld	r24, Z
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <UART_transmit>:
 234:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 238:	95 ff       	sbrs	r25, 5
 23a:	fc cf       	rjmp	.-8      	; 0x234 <UART_transmit>
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 240:	08 95       	ret

00000242 <UART_printString>:
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	8c 01       	movw	r16, r24
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <UART_printString+0x14>
 252:	f0 df       	rcall	.-32     	; 0x234 <UART_transmit>
 254:	21 96       	adiw	r28, 0x01	; 1
 256:	f8 01       	movw	r30, r16
 258:	ec 0f       	add	r30, r28
 25a:	fd 1f       	adc	r31, r29
 25c:	80 81       	ld	r24, Z
 25e:	81 11       	cpse	r24, r1
 260:	f8 cf       	rjmp	.-16     	; 0x252 <UART_printString+0x10>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <UART_print8bitBinaryInc0f>:
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	28 97       	sbiw	r28, 0x08	; 8
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	20 e3       	ldi	r18, 0x30	; 48
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	3a 83       	std	Y+2, r19	; 0x02
 28a:	29 83       	std	Y+1, r18	; 0x01
 28c:	fe 01       	movw	r30, r28
 28e:	33 96       	adiw	r30, 0x03	; 3
 290:	96 e0       	ldi	r25, 0x06	; 6
 292:	df 01       	movw	r26, r30
 294:	1d 92       	st	X+, r1
 296:	9a 95       	dec	r25
 298:	e9 f7       	brne	.-6      	; 0x294 <UART_print8bitBinaryInc0f+0x28>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	0d c0       	rjmp	.+26     	; 0x2ba <UART_print8bitBinaryInc0f+0x4e>
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e2 0f       	add	r30, r18
 2aa:	f3 1f       	adc	r31, r19
 2ac:	98 2f       	mov	r25, r24
 2ae:	91 70       	andi	r25, 0x01	; 1
 2b0:	90 5d       	subi	r25, 0xD0	; 208
 2b2:	90 83       	st	Z, r25
 2b4:	86 95       	lsr	r24
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	28 30       	cpi	r18, 0x08	; 8
 2bc:	31 05       	cpc	r19, r1
 2be:	84 f3       	brlt	.-32     	; 0x2a0 <UART_print8bitBinaryInc0f+0x34>
 2c0:	e1 e0       	ldi	r30, 0x01	; 1
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ec 0f       	add	r30, r28
 2c6:	fd 1f       	adc	r31, r29
 2c8:	e2 0f       	add	r30, r18
 2ca:	f3 1f       	adc	r31, r19
 2cc:	10 82       	st	Z, r1
 2ce:	85 e6       	ldi	r24, 0x65	; 101
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	b7 df       	rcall	.-146    	; 0x242 <UART_printString>
 2d4:	07 e0       	ldi	r16, 0x07	; 7
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	10 c0       	rjmp	.+32     	; 0x2fa <UART_print8bitBinaryInc0f+0x8e>
 2da:	e1 e0       	ldi	r30, 0x01	; 1
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ec 0f       	add	r30, r28
 2e0:	fd 1f       	adc	r31, r29
 2e2:	e0 0f       	add	r30, r16
 2e4:	f1 1f       	adc	r31, r17
 2e6:	80 81       	ld	r24, Z
 2e8:	a5 df       	rcall	.-182    	; 0x234 <UART_transmit>
 2ea:	04 30       	cpi	r16, 0x04	; 4
 2ec:	11 05       	cpc	r17, r1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <UART_print8bitBinaryInc0f+0x8a>
 2f0:	80 e6       	ldi	r24, 0x60	; 96
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	a6 df       	rcall	.-180    	; 0x242 <UART_printString>
 2f6:	01 50       	subi	r16, 0x01	; 1
 2f8:	11 09       	sbc	r17, r1
 2fa:	11 23       	and	r17, r17
 2fc:	74 f7       	brge	.-36     	; 0x2da <UART_print8bitBinaryInc0f+0x6e>
 2fe:	28 96       	adiw	r28, 0x08	; 8
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <UART_print16bitBinaryInc0f>:
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	60 97       	sbiw	r28, 0x10	; 16
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	ac 01       	movw	r20, r24
 32e:	80 e3       	ldi	r24, 0x30	; 48
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	fe 01       	movw	r30, r28
 338:	33 96       	adiw	r30, 0x03	; 3
 33a:	8e e0       	ldi	r24, 0x0E	; 14
 33c:	df 01       	movw	r26, r30
 33e:	1d 92       	st	X+, r1
 340:	8a 95       	dec	r24
 342:	e9 f7       	brne	.-6      	; 0x33e <UART_print16bitBinaryInc0f+0x2a>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	0e c0       	rjmp	.+28     	; 0x366 <UART_print16bitBinaryInc0f+0x52>
 34a:	e1 e0       	ldi	r30, 0x01	; 1
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	e2 0f       	add	r30, r18
 354:	f3 1f       	adc	r31, r19
 356:	94 2f       	mov	r25, r20
 358:	91 70       	andi	r25, 0x01	; 1
 35a:	90 5d       	subi	r25, 0xD0	; 208
 35c:	90 83       	st	Z, r25
 35e:	56 95       	lsr	r21
 360:	47 95       	ror	r20
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
 366:	20 31       	cpi	r18, 0x10	; 16
 368:	31 05       	cpc	r19, r1
 36a:	7c f3       	brlt	.-34     	; 0x34a <UART_print16bitBinaryInc0f+0x36>
 36c:	e1 e0       	ldi	r30, 0x01	; 1
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ec 0f       	add	r30, r28
 372:	fd 1f       	adc	r31, r29
 374:	e2 0f       	add	r30, r18
 376:	f3 1f       	adc	r31, r19
 378:	10 82       	st	Z, r1
 37a:	85 e6       	ldi	r24, 0x65	; 101
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	61 df       	rcall	.-318    	; 0x242 <UART_printString>
 380:	0f e0       	ldi	r16, 0x0F	; 15
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	15 c0       	rjmp	.+42     	; 0x3b0 <UART_print16bitBinaryInc0f+0x9c>
 386:	e1 e0       	ldi	r30, 0x01	; 1
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	ec 0f       	add	r30, r28
 38c:	fd 1f       	adc	r31, r29
 38e:	e0 0f       	add	r30, r16
 390:	f1 1f       	adc	r31, r17
 392:	80 81       	ld	r24, Z
 394:	4f df       	rcall	.-354    	; 0x234 <UART_transmit>
 396:	c8 01       	movw	r24, r16
 398:	83 70       	andi	r24, 0x03	; 3
 39a:	99 27       	eor	r25, r25
 39c:	89 2b       	or	r24, r25
 39e:	31 f4       	brne	.+12     	; 0x3ac <UART_print16bitBinaryInc0f+0x98>
 3a0:	10 16       	cp	r1, r16
 3a2:	11 06       	cpc	r1, r17
 3a4:	1c f4       	brge	.+6      	; 0x3ac <UART_print16bitBinaryInc0f+0x98>
 3a6:	80 e6       	ldi	r24, 0x60	; 96
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	4b df       	rcall	.-362    	; 0x242 <UART_printString>
 3ac:	01 50       	subi	r16, 0x01	; 1
 3ae:	11 09       	sbc	r17, r1
 3b0:	11 23       	and	r17, r17
 3b2:	4c f7       	brge	.-46     	; 0x386 <UART_print16bitBinaryInc0f+0x72>
 3b4:	60 96       	adiw	r28, 0x10	; 16
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	08 95       	ret

000003ca <UART_print8bitHexInc0f>:
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	62 97       	sbiw	r28, 0x12	; 18
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	90 e1       	ldi	r25, 0x10	; 16
 3e4:	e0 e0       	ldi	r30, 0x00	; 0
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	de 01       	movw	r26, r28
 3ea:	11 96       	adiw	r26, 0x01	; 1
 3ec:	01 90       	ld	r0, Z+
 3ee:	0d 92       	st	X+, r0
 3f0:	9a 95       	dec	r25
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <UART_print8bitHexInc0f+0x22>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	14 c0       	rjmp	.+40     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fa:	98 2f       	mov	r25, r24
 3fc:	9f 70       	andi	r25, 0x0F	; 15
 3fe:	e1 e0       	ldi	r30, 0x01	; 1
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	ec 0f       	add	r30, r28
 404:	fd 1f       	adc	r31, r29
 406:	e9 0f       	add	r30, r25
 408:	f1 1d       	adc	r31, r1
 40a:	90 81       	ld	r25, Z
 40c:	e1 e1       	ldi	r30, 0x11	; 17
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ec 0f       	add	r30, r28
 412:	fd 1f       	adc	r31, r29
 414:	e2 0f       	add	r30, r18
 416:	f3 1f       	adc	r31, r19
 418:	90 83       	st	Z, r25
 41a:	82 95       	swap	r24
 41c:	8f 70       	andi	r24, 0x0F	; 15
 41e:	2f 5f       	subi	r18, 0xFF	; 255
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	22 30       	cpi	r18, 0x02	; 2
 424:	31 05       	cpc	r19, r1
 426:	4c f3       	brlt	.-46     	; 0x3fa <UART_print8bitHexInc0f+0x30>
 428:	89 e6       	ldi	r24, 0x69	; 105
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0a df       	rcall	.-492    	; 0x242 <UART_printString>
 42e:	01 e0       	ldi	r16, 0x01	; 1
 430:	10 e0       	ldi	r17, 0x00	; 0
 432:	0a c0       	rjmp	.+20     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 434:	e1 e1       	ldi	r30, 0x11	; 17
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	ec 0f       	add	r30, r28
 43a:	fd 1f       	adc	r31, r29
 43c:	e0 0f       	add	r30, r16
 43e:	f1 1f       	adc	r31, r17
 440:	80 81       	ld	r24, Z
 442:	f8 de       	rcall	.-528    	; 0x234 <UART_transmit>
 444:	01 50       	subi	r16, 0x01	; 1
 446:	11 09       	sbc	r17, r1
 448:	11 23       	and	r17, r17
 44a:	a4 f7       	brge	.-24     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 44c:	62 96       	adiw	r28, 0x12	; 18
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <UART_print16bitHexInc0f>:

void UART_print16bitHexInc0f(uint16_t no) {
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	64 97       	sbiw	r28, 0x14	; 20
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
	char hexTemp[16] = {'0', '1', '2', '3', '4', '5', '6',
 47a:	20 e1       	ldi	r18, 0x10	; 16
 47c:	e0 e0       	ldi	r30, 0x00	; 0
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	de 01       	movw	r26, r28
 482:	11 96       	adiw	r26, 0x01	; 1
 484:	01 90       	ld	r0, Z+
 486:	0d 92       	st	X+, r0
 488:	2a 95       	dec	r18
 48a:	e1 f7       	brne	.-8      	; 0x484 <UART_print16bitHexInc0f+0x22>
	'7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
	char numString[4];
	
	int i;

	for (i = 0; i<4; i++ ) {
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	19 c0       	rjmp	.+50     	; 0x4c4 <UART_print16bitHexInc0f+0x62>
		numString[i] = hexTemp[(no % 16)];
 492:	fc 01       	movw	r30, r24
 494:	ef 70       	andi	r30, 0x0F	; 15
 496:	ff 27       	eor	r31, r31
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	4c 0f       	add	r20, r28
 49e:	5d 1f       	adc	r21, r29
 4a0:	e4 0f       	add	r30, r20
 4a2:	f5 1f       	adc	r31, r21
 4a4:	40 81       	ld	r20, Z
 4a6:	e1 e1       	ldi	r30, 0x11	; 17
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	ec 0f       	add	r30, r28
 4ac:	fd 1f       	adc	r31, r29
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	40 83       	st	Z, r20
		no = no / 16;
 4b4:	92 95       	swap	r25
 4b6:	82 95       	swap	r24
 4b8:	8f 70       	andi	r24, 0x0F	; 15
 4ba:	89 27       	eor	r24, r25
 4bc:	9f 70       	andi	r25, 0x0F	; 15
 4be:	89 27       	eor	r24, r25
	'7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
	char numString[4];
	
	int i;

	for (i = 0; i<4; i++ ) {
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	24 30       	cpi	r18, 0x04	; 4
 4c6:	31 05       	cpc	r19, r1
 4c8:	24 f3       	brlt	.-56     	; 0x492 <UART_print16bitHexInc0f+0x30>
		numString[i] = hexTemp[(no % 16)];
		no = no / 16;
	}
	numString[4] = '\0';
	
	UART_printString("0x ");
 4ca:	89 e6       	ldi	r24, 0x69	; 105
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	b9 de       	rcall	.-654    	; 0x242 <UART_printString>
	for (i = 3; i >= 0; i--) {
 4d0:	03 e0       	ldi	r16, 0x03	; 3
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	12 c0       	rjmp	.+36     	; 0x4fa <UART_print16bitHexInc0f+0x98>
		UART_transmit(numString[i]);
 4d6:	e1 e1       	ldi	r30, 0x11	; 17
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ec 0f       	add	r30, r28
 4dc:	fd 1f       	adc	r31, r29
 4de:	e0 0f       	add	r30, r16
 4e0:	f1 1f       	adc	r31, r17
 4e2:	80 81       	ld	r24, Z
 4e4:	a7 de       	rcall	.-690    	; 0x234 <UART_transmit>
		if((i % 2 ) == 0 && i > 0) UART_printString(" ");
 4e6:	00 fd       	sbrc	r16, 0
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <UART_print16bitHexInc0f+0x94>
 4ea:	10 16       	cp	r1, r16
 4ec:	11 06       	cpc	r1, r17
 4ee:	1c f4       	brge	.+6      	; 0x4f6 <UART_print16bitHexInc0f+0x94>
 4f0:	80 e6       	ldi	r24, 0x60	; 96
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	a6 de       	rcall	.-692    	; 0x242 <UART_printString>
		no = no / 16;
	}
	numString[4] = '\0';
	
	UART_printString("0x ");
	for (i = 3; i >= 0; i--) {
 4f6:	01 50       	subi	r16, 0x01	; 1
 4f8:	11 09       	sbc	r17, r1
 4fa:	11 23       	and	r17, r17
 4fc:	64 f7       	brge	.-40     	; 0x4d6 <UART_print16bitHexInc0f+0x74>
		UART_transmit(numString[i]);
		if((i % 2 ) == 0 && i > 0) UART_printString(" ");
	}
 4fe:	64 96       	adiw	r28, 0x14	; 20
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
